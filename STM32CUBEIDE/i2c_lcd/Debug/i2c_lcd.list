
i2c_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080077c0  080077c0  000177c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb4  08007bb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007bb4  08007bb4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bb4  08007bb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001e0  08007d9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007d9c  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfe9  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ef0  00000000  00000000  0002d235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002f128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a91  00000000  00000000  0002feb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fe5  00000000  00000000  00030941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4b3  00000000  00000000  00049926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000910f2  00000000  00000000  00058dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a44  00000000  00000000  000e9ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ee910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080077a4 	.word	0x080077a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080077a4 	.word	0x080077a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <basla>:
void uart_gonder(char *deger)
{
	HAL_UART_Transmit(&huart3, (uint8_t*)deger, strlen(deger), 100);
}

void basla (void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);	//L1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	484e      	ldr	r0, [pc, #312]	; (8000bcc <basla+0x144>)
 8000a94:	f002 f9b3 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);	//L2
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	484c      	ldr	r0, [pc, #304]	; (8000bd0 <basla+0x148>)
 8000a9e:	f002 f9ae 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);	//L3
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	4849      	ldr	r0, [pc, #292]	; (8000bd0 <basla+0x148>)
 8000aaa:	f002 f9a8 	bl	8002dfe <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);	//H1
 8000aae:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <basla+0x14c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);	//H2
 8000ab6:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <basla+0x150>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);	//H3
 8000abe:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <basla+0x150>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4840      	ldr	r0, [pc, #256]	; (8000bcc <basla+0x144>)
 8000acc:	f002 f997 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f001 fa6f 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2101      	movs	r1, #1
 8000ada:	483c      	ldr	r0, [pc, #240]	; (8000bcc <basla+0x144>)
 8000adc:	f002 f98f 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(950);
 8000ae0:	f240 30b6 	movw	r0, #950	; 0x3b6
 8000ae4:	f001 fa66 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2101      	movs	r1, #1
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <basla+0x144>)
 8000aee:	f002 f986 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000af2:	200a      	movs	r0, #10
 8000af4:	f001 fa5e 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2101      	movs	r1, #1
 8000afc:	4833      	ldr	r0, [pc, #204]	; (8000bcc <basla+0x144>)
 8000afe:	f002 f97e 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(950);
 8000b02:	f240 30b6 	movw	r0, #950	; 0x3b6
 8000b06:	f001 fa55 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	482f      	ldr	r0, [pc, #188]	; (8000bcc <basla+0x144>)
 8000b10:	f002 f975 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b14:	200a      	movs	r0, #10
 8000b16:	f001 fa4d 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	482b      	ldr	r0, [pc, #172]	; (8000bcc <basla+0x144>)
 8000b20:	f002 f96d 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(950);
 8000b24:	f240 30b6 	movw	r0, #950	; 0x3b6
 8000b28:	f001 fa44 	bl	8001fb4 <HAL_Delay>
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);	//H3
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <basla+0x150>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,100);	//H1
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <basla+0x14c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2264      	movs	r2, #100	; 0x64
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);	//L2
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	4823      	ldr	r0, [pc, #140]	; (8000bd0 <basla+0x148>)
 8000b42:	f002 f95c 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f001 fa34 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);	//L2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <basla+0x148>)
 8000b52:	f002 f954 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);	//L3
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <basla+0x148>)
 8000b5e:	f002 f94e 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f001 fa26 	bl	8001fb4 <HAL_Delay>
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);	//H1
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <basla+0x14c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,100);	//H2
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <basla+0x150>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2264      	movs	r2, #100	; 0x64
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(10);
 8000b78:	200a      	movs	r0, #10
 8000b7a:	f001 fa1b 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);	//L3
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <basla+0x148>)
 8000b86:	f002 f93a 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);	//L1
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <basla+0x144>)
 8000b92:	f002 f934 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f001 fa0c 	bl	8001fb4 <HAL_Delay>
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);	//H2
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <basla+0x150>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,100);	//H3
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <basla+0x150>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2264      	movs	r2, #100	; 0x64
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f001 fa01 	bl	8001fb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);	//L1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <basla+0x144>)
 8000bba:	f002 f920 	bl	8002dfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);	//L2
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <basla+0x148>)
 8000bc4:	f002 f91b 	bl	8002dfe <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	2000025c 	.word	0x2000025c
 8000bd8:	200002a4 	.word	0x200002a4

08000bdc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]

   HALL1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	4851      	ldr	r0, [pc, #324]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x154>)
 8000bec:	f002 f8f0 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000bfe:	701a      	strb	r2, [r3, #0]
   HALL2=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000c00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c04:	484a      	ldr	r0, [pc, #296]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x154>)
 8000c06:	f002 f8e3 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c18:	701a      	strb	r2, [r3, #0]
   HALL3=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1e:	4844      	ldr	r0, [pc, #272]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x154>)
 8000c20:	f002 f8d6 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c32:	701a      	strb	r2, [r3, #0]
if(saat_yon==true)
 8000c34:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x164>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 8085 	beq.w	8000d48 <HAL_GPIO_EXTI_Callback+0x16c>
{
   if(HALL1&&!HALL2&&HALL3){//101
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00d      	beq.n	8000c62 <HAL_GPIO_EXTI_Callback+0x86>
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f083 0301 	eor.w	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_EXTI_Callback+0x86>
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <HAL_GPIO_EXTI_Callback+0x86>
         step=4;
 8000c5c:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x168>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	601a      	str	r2, [r3, #0]
      }
   if(HALL1&&!HALL2&&!HALL3){//100
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d010      	beq.n	8000c8c <HAL_GPIO_EXTI_Callback+0xb0>
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	f083 0301 	eor.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d009      	beq.n	8000c8c <HAL_GPIO_EXTI_Callback+0xb0>
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	f083 0301 	eor.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_GPIO_EXTI_Callback+0xb0>
         step=5;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x168>)
 8000c88:	2205      	movs	r2, #5
 8000c8a:	601a      	str	r2, [r3, #0]
      }
   if(HALL1&&HALL2&&!HALL3){//110
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00d      	beq.n	8000cb0 <HAL_GPIO_EXTI_Callback+0xd4>
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d009      	beq.n	8000cb0 <HAL_GPIO_EXTI_Callback+0xd4>
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f083 0301 	eor.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <HAL_GPIO_EXTI_Callback+0xd4>
         step=6;
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x168>)
 8000cac:	2206      	movs	r2, #6
 8000cae:	601a      	str	r2, [r3, #0]
      }
   if(!HALL1&&HALL2&&!HALL3){//010
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00d      	beq.n	8000cda <HAL_GPIO_EXTI_Callback+0xfe>
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d009      	beq.n	8000cda <HAL_GPIO_EXTI_Callback+0xfe>
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f083 0301 	eor.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_GPIO_EXTI_Callback+0xfe>
         step=1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x168>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
      }
   if(!HALL1&&HALL2&&HALL3){//011
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	f083 0301 	eor.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x122>
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x122>
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x122>
         step=2;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x168>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
      }
   if(!HALL1&&!HALL2&&HALL3){//001
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f083 0301 	eor.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 8099 	beq.w	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 8091 	beq.w	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x160>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 808c 	beq.w	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
         step=3;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x168>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e087      	b.n	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	20000334 	.word	0x20000334
 8000d38:	20000335 	.word	0x20000335
 8000d3c:	20000336 	.word	0x20000336
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004
      }
}
else if(saat_yon == false)
 8000d48:	4b96      	ldr	r3, [pc, #600]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x3c8>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d074      	beq.n	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
{
	if(HALL1&&!HALL2&&HALL3){//101
 8000d56:	4b94      	ldr	r3, [pc, #592]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_EXTI_Callback+0x19e>
 8000d5e:	4b93      	ldr	r3, [pc, #588]	; (8000fac <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f083 0301 	eor.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_EXTI_Callback+0x19e>
 8000d6c:	4b90      	ldr	r3, [pc, #576]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <HAL_GPIO_EXTI_Callback+0x19e>
			step=1;
 8000d74:	4b8f      	ldr	r3, [pc, #572]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
		}
	if(HALL1&&!HALL2&&!HALL3){//100
 8000d7a:	4b8b      	ldr	r3, [pc, #556]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d010      	beq.n	8000da4 <HAL_GPIO_EXTI_Callback+0x1c8>
 8000d82:	4b8a      	ldr	r3, [pc, #552]	; (8000fac <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d009      	beq.n	8000da4 <HAL_GPIO_EXTI_Callback+0x1c8>
 8000d90:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <HAL_GPIO_EXTI_Callback+0x1c8>
			step=2;
 8000d9e:	4b85      	ldr	r3, [pc, #532]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	601a      	str	r2, [r3, #0]
		}
	if(HALL1&&HALL2&&!HALL3){//110
 8000da4:	4b80      	ldr	r3, [pc, #512]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_EXTI_Callback+0x1ec>
 8000dac:	4b7f      	ldr	r3, [pc, #508]	; (8000fac <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d009      	beq.n	8000dc8 <HAL_GPIO_EXTI_Callback+0x1ec>
 8000db4:	4b7e      	ldr	r3, [pc, #504]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_GPIO_EXTI_Callback+0x1ec>
			step=3;
 8000dc2:	4b7c      	ldr	r3, [pc, #496]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	601a      	str	r2, [r3, #0]
		}
	if(!HALL1&&HALL2&&!HALL3){//010
 8000dc8:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_EXTI_Callback+0x216>
 8000dd6:	4b75      	ldr	r3, [pc, #468]	; (8000fac <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <HAL_GPIO_EXTI_Callback+0x216>
 8000dde:	4b74      	ldr	r3, [pc, #464]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <HAL_GPIO_EXTI_Callback+0x216>
			step=4;
 8000dec:	4b71      	ldr	r3, [pc, #452]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	601a      	str	r2, [r3, #0]
		}
	if(!HALL1&&HALL2&&HALL3){//011
 8000df2:	4b6d      	ldr	r3, [pc, #436]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	f083 0301 	eor.w	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <HAL_GPIO_EXTI_Callback+0x23a>
 8000e00:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_EXTI_Callback+0x23a>
 8000e08:	4b69      	ldr	r3, [pc, #420]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_GPIO_EXTI_Callback+0x23a>
			step=5;
 8000e10:	4b68      	ldr	r3, [pc, #416]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000e12:	2205      	movs	r2, #5
 8000e14:	601a      	str	r2, [r3, #0]
		}
	if(!HALL1&&!HALL2&&HALL3){//001
 8000e16:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
 8000e24:	4b61      	ldr	r3, [pc, #388]	; (8000fac <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	f083 0301 	eor.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
 8000e32:	4b5f      	ldr	r3, [pc, #380]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <HAL_GPIO_EXTI_Callback+0x264>
			step=6;
 8000e3a:	4b5e      	ldr	r3, [pc, #376]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000e3c:	2206      	movs	r2, #6
 8000e3e:	601a      	str	r2, [r3, #0]
		}
}
   switch(step)
 8000e40:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	f200 80ee 	bhi.w	8001028 <HAL_GPIO_EXTI_Callback+0x44c>
 8000e4c:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_GPIO_EXTI_Callback+0x278>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000eab 	.word	0x08000eab
 8000e5c:	08000ee9 	.word	0x08000ee9
 8000e60:	08000f27 	.word	0x08000f27
 8000e64:	08000f65 	.word	0x08000f65
 8000e68:	08000fcd 	.word	0x08000fcd
   {
      case 1:
           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//CL=L
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	4851      	ldr	r0, [pc, #324]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000e74:	f001 ffc3 	bl	8002dfe <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);//AL=L
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	484f      	ldr	r0, [pc, #316]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000e80:	f001 ffbd 	bl	8002dfe <HAL_GPIO_WritePin>
           __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);//BH=L
 8000e84:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);//CH=L
 8000e8c:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	641a      	str	r2, [r3, #64]	; 0x40
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);//BL=H
 8000e94:	2201      	movs	r2, #1
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	4847      	ldr	r0, [pc, #284]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000e9a:	f001 ffb0 	bl	8002dfe <HAL_GPIO_WritePin>
          __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,pwm_value);//AH=H PWM
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000ea8:	e0be      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x44c>
      case 2:
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);//BL=L
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4842      	ldr	r0, [pc, #264]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000eb0:	f001 ffa5 	bl	8002dfe <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);//AL=L
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eba:	4840      	ldr	r0, [pc, #256]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000ebc:	f001 ff9f 	bl	8002dfe <HAL_GPIO_WritePin>
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);//BH=L
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);//CH=L
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);//CL=H
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	4838      	ldr	r0, [pc, #224]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000ed8:	f001 ff91 	bl	8002dfe <HAL_GPIO_WritePin>
         __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,pwm_value);//AH=H PWM
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000ee6:	e09f      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x44c>
      case 3:
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);//BL=L
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4832      	ldr	r0, [pc, #200]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000eee:	f001 ff86 	bl	8002dfe <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);//AL=L
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	4830      	ldr	r0, [pc, #192]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000efa:	f001 ff80 	bl	8002dfe <HAL_GPIO_WritePin>
           __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);//AH=L
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38
           __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);//CH=L
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);//CL=H
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000f16:	f001 ff72 	bl	8002dfe <HAL_GPIO_WritePin>
           __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,pwm_value);//BH=H PWM
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000f24:	e080      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x44c>
      case 4:
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);//BL=L
 8000f26:	2200      	movs	r2, #0
 8000f28:	2140      	movs	r1, #64	; 0x40
 8000f2a:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000f2c:	f001 ff67 	bl	8002dfe <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//CL=L
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000f38:	f001 ff61 	bl	8002dfe <HAL_GPIO_WritePin>
          __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);//AH=L
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);//CH=L
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);//AL=H
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000f54:	f001 ff53 	bl	8002dfe <HAL_GPIO_WritePin>
          __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,pwm_value);//BH=H PWM
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000f62:	e061      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x44c>
      case 5:
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);//BL=L
 8000f64:	2200      	movs	r2, #0
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000f6a:	f001 ff48 	bl	8002dfe <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//CL=L
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000f76:	f001 ff42 	bl	8002dfe <HAL_GPIO_WritePin>
         __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);//AH=H
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);//BH=L
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);//AL=H
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000f92:	f001 ff34 	bl	8002dfe <HAL_GPIO_WritePin>
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pwm_value);//CH=H PWM
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000fa0:	e042      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x44c>
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000334 	.word	0x20000334
 8000fac:	20000335 	.word	0x20000335
 8000fb0:	20000336 	.word	0x20000336
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	200002a4 	.word	0x200002a4
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	2000025c 	.word	0x2000025c
      case 6:
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);//AL
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd2:	4817      	ldr	r0, [pc, #92]	; (8001030 <HAL_GPIO_EXTI_Callback+0x454>)
 8000fd4:	f001 ff13 	bl	8002dfe <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//CL
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	4815      	ldr	r0, [pc, #84]	; (8001034 <HAL_GPIO_EXTI_Callback+0x458>)
 8000fe0:	f001 ff0d 	bl	8002dfe <HAL_GPIO_WritePin>
         __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);//AH=L
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_GPIO_EXTI_Callback+0x45c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);//BH=L
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_GPIO_EXTI_Callback+0x460>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	639a      	str	r2, [r3, #56]	; 0x38
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);//BL=H
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	480e      	ldr	r0, [pc, #56]	; (8001034 <HAL_GPIO_EXTI_Callback+0x458>)
 8000ffa:	f001 ff00 	bl	8002dfe <HAL_GPIO_WritePin>
         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pwm_value);//CH=H PWM
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_GPIO_EXTI_Callback+0x464>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_GPIO_EXTI_Callback+0x460>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
         rpm++;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_GPIO_EXTI_Callback+0x468>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_GPIO_EXTI_Callback+0x468>)
 8001010:	6013      	str	r3, [r2, #0]
		  if(rpm==100)
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_GPIO_EXTI_Callback+0x468>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d105      	bne.n	8001026 <HAL_GPIO_EXTI_Callback+0x44a>
		  {
			 rpm_ok=true;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_GPIO_EXTI_Callback+0x46c>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
			 rpm=0;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_GPIO_EXTI_Callback+0x468>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
		  }
      break;
 8001026:	bf00      	nop
   }
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	2000025c 	.word	0x2000025c
 800103c:	200002a4 	.word	0x200002a4
 8001040:	20000000 	.word	0x20000000
 8001044:	2000033c 	.word	0x2000033c
 8001048:	20000340 	.word	0x20000340

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b09c      	sub	sp, #112	; 0x70
 8001050:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	   int sira=1;
 8001052:	2301      	movs	r3, #1
 8001054:	667b      	str	r3, [r7, #100]	; 0x64
	   int i;
	   uint8_t acilis[] = "Sistem Basliyor\r\n";
 8001056:	4b84      	ldr	r3, [pc, #528]	; (8001268 <main+0x21c>)
 8001058:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800105c:	461d      	mov	r5, r3
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	8023      	strh	r3, [r4, #0]
	   uint8_t hazir[] = "Sistem Hazir\r\n";
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <main+0x220>)
 8001068:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800106c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106e:	c407      	stmia	r4!, {r0, r1, r2}
 8001070:	8023      	strh	r3, [r4, #0]
 8001072:	3402      	adds	r4, #2
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	7023      	strb	r3, [r4, #0]
	uint8_t Rx_data=0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t MSG2[] = "Sistem Hazir\r\n";
 800107e:	4b7b      	ldr	r3, [pc, #492]	; (800126c <main+0x220>)
 8001080:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001086:	c407      	stmia	r4!, {r0, r1, r2}
 8001088:	8023      	strh	r3, [r4, #0]
 800108a:	3402      	adds	r4, #2
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	7023      	strb	r3, [r4, #0]
	uint16_t raw;
	uint16_t raw1;
	float volt;
	float akim;
	char buffer[32]={0};
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 ff22 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f9cc 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f000 fbd0 	bl	8001854 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010b4:	f000 faa0 	bl	80015f8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010b8:	f000 fa22 	bl	8001500 <MX_ADC1_Init>
  MX_TIM4_Init();
 80010bc:	f000 fb3c 	bl	8001738 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80010c0:	f000 fb9e 	bl	8001800 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 80010c4:	f000 fa5a 	bl	800157c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n");
 80010c8:	200a      	movs	r0, #10
 80010ca:	f004 f9e3 	bl	8005494 <putchar>
  HAL_UART_Transmit(&huart3, MSG2, sizeof(MSG2), 100);
 80010ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	220f      	movs	r2, #15
 80010d6:	4866      	ldr	r0, [pc, #408]	; (8001270 <main+0x224>)
 80010d8:	f003 faab 	bl	8004632 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80010dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e0:	f000 ff68 	bl	8001fb4 <HAL_Delay>
  HAL_UART_Transmit(&huart3, MSG2, sizeof(MSG2), 100);
 80010e4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	220f      	movs	r2, #15
 80010ec:	4860      	ldr	r0, [pc, #384]	; (8001270 <main+0x224>)
 80010ee:	f003 faa0 	bl	8004632 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Transmit(&huart3, acilis, sizeof(acilis), 100);
 80010f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	2212      	movs	r2, #18
 80010fa:	485d      	ldr	r0, [pc, #372]	; (8001270 <main+0x224>)
 80010fc:	f003 fa99 	bl	8004632 <HAL_UART_Transmit>
  HAL_Delay(20);
 8001100:	2014      	movs	r0, #20
 8001102:	f000 ff57 	bl	8001fb4 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);//A PWM START
 8001106:	2104      	movs	r1, #4
 8001108:	485a      	ldr	r0, [pc, #360]	; (8001274 <main+0x228>)
 800110a:	f002 fcc3 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);// B PWM START
 800110e:	2104      	movs	r1, #4
 8001110:	4859      	ldr	r0, [pc, #356]	; (8001278 <main+0x22c>)
 8001112:	f002 fcbf 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);// C PWM START
 8001116:	210c      	movs	r1, #12
 8001118:	4857      	ldr	r0, [pc, #348]	; (8001278 <main+0x22c>)
 800111a:	f002 fcbb 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f000 ff48 	bl	8001fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	4854      	ldr	r0, [pc, #336]	; (800127c <main+0x230>)
 800112a:	f001 fe68 	bl	8002dfe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800112e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001132:	f000 ff3f 	bl	8001fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4850      	ldr	r0, [pc, #320]	; (800127c <main+0x230>)
 800113c:	f001 fe5f 	bl	8002dfe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001144:	f000 ff36 	bl	8001fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2101      	movs	r1, #1
 800114c:	484b      	ldr	r0, [pc, #300]	; (800127c <main+0x230>)
 800114e:	f001 fe56 	bl	8002dfe <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f000 ff2e 	bl	8001fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	4847      	ldr	r0, [pc, #284]	; (800127c <main+0x230>)
 800115e:	f001 fe4e 	bl	8002dfe <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001162:	200a      	movs	r0, #10
 8001164:	f000 ff26 	bl	8001fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2101      	movs	r1, #1
 800116c:	4843      	ldr	r0, [pc, #268]	; (800127c <main+0x230>)
 800116e:	f001 fe46 	bl	8002dfe <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001172:	200a      	movs	r0, #10
 8001174:	f000 ff1e 	bl	8001fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	483f      	ldr	r0, [pc, #252]	; (800127c <main+0x230>)
 800117e:	f001 fe3e 	bl	8002dfe <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	f000 ff16 	bl	8001fb4 <HAL_Delay>
  HAL_UART_Transmit(&huart3, hazir, sizeof(hazir), 100);
 8001188:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	220f      	movs	r2, #15
 8001190:	4837      	ldr	r0, [pc, #220]	; (8001270 <main+0x224>)
 8001192:	f003 fa4e 	bl	8004632 <HAL_UART_Transmit>

  basla();
 8001196:	f7ff fc77 	bl	8000a88 <basla>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1)
 800119a:	2101      	movs	r1, #1
 800119c:	4838      	ldr	r0, [pc, #224]	; (8001280 <main+0x234>)
 800119e:	f001 fe17 	bl	8002dd0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d127      	bne.n	80011f8 <main+0x1ac>
  	  {
  		  if(pwm_value==0){
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <main+0x238>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <main+0x170>
  			pwm_value=pwm_value+10;
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <main+0x238>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	330a      	adds	r3, #10
 80011b6:	4a33      	ldr	r2, [pc, #204]	; (8001284 <main+0x238>)
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e004      	b.n	80011c6 <main+0x17a>
  			basla;
  		  }
  		  else{
  			  pwm_value=pwm_value+10;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <main+0x238>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	330a      	adds	r3, #10
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <main+0x238>)
 80011c4:	6013      	str	r3, [r2, #0]
  		  }
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2101      	movs	r1, #1
 80011ca:	482c      	ldr	r0, [pc, #176]	; (800127c <main+0x230>)
 80011cc:	f001 fe17 	bl	8002dfe <HAL_GPIO_WritePin>
  		HAL_Delay(10);
 80011d0:	200a      	movs	r0, #10
 80011d2:	f000 feef 	bl	8001fb4 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2101      	movs	r1, #1
 80011da:	4828      	ldr	r0, [pc, #160]	; (800127c <main+0x230>)
 80011dc:	f001 fe0f 	bl	8002dfe <HAL_GPIO_WritePin>
  		  if(pwm_value>290)
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <main+0x238>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80011e8:	dd03      	ble.n	80011f2 <main+0x1a6>
  		  {
  			pwm_value=290;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <main+0x238>)
 80011ec:	f44f 7291 	mov.w	r2, #290	; 0x122
 80011f0:	601a      	str	r2, [r3, #0]
  		  }
  		  HAL_Delay(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f000 fede 	bl	8001fb4 <HAL_Delay>
  	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)==1)
 80011f8:	2102      	movs	r1, #2
 80011fa:	4821      	ldr	r0, [pc, #132]	; (8001280 <main+0x234>)
 80011fc:	f001 fde8 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d11b      	bne.n	800123e <main+0x1f2>
	  	  {
		  pwm_value=pwm_value-10;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <main+0x238>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3b0a      	subs	r3, #10
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <main+0x238>)
 800120e:	6013      	str	r3, [r2, #0]
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2101      	movs	r1, #1
 8001214:	4819      	ldr	r0, [pc, #100]	; (800127c <main+0x230>)
 8001216:	f001 fdf2 	bl	8002dfe <HAL_GPIO_WritePin>
	  		HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f000 feca 	bl	8001fb4 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2101      	movs	r1, #1
 8001224:	4815      	ldr	r0, [pc, #84]	; (800127c <main+0x230>)
 8001226:	f001 fdea 	bl	8002dfe <HAL_GPIO_WritePin>
	  		  if(pwm_value<0)
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <main+0x238>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da02      	bge.n	8001238 <main+0x1ec>
	  		  {
	  			pwm_value=0;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <main+0x238>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f000 febb 	bl	8001fb4 <HAL_Delay>
	  	  }

	  	HAL_UART_Receive (&huart3, &Rx_data, 2, 100);
 800123e:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8001242:	2364      	movs	r3, #100	; 0x64
 8001244:	2202      	movs	r2, #2
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <main+0x224>)
 8001248:	f003 fa76 	bl	8004738 <HAL_UART_Receive>
	  	if(Rx_data=='1')
 800124c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001250:	2b31      	cmp	r3, #49	; 0x31
 8001252:	d12a      	bne.n	80012aa <main+0x25e>
	  	{
	  		  if(pwm_value==0){
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <main+0x238>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d115      	bne.n	8001288 <main+0x23c>
	  			pwm_value=pwm_value+10;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <main+0x238>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	330a      	adds	r3, #10
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <main+0x238>)
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e014      	b.n	8001292 <main+0x246>
 8001268:	080077e0 	.word	0x080077e0
 800126c:	080077f4 	.word	0x080077f4
 8001270:	200002ec 	.word	0x200002ec
 8001274:	2000025c 	.word	0x2000025c
 8001278:	200002a4 	.word	0x200002a4
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00
 8001284:	20000000 	.word	0x20000000
	  			basla;
	  		  }
	  		  else{
	  			  pwm_value=pwm_value+10;
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <main+0x3d4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	330a      	adds	r3, #10
 800128e:	4a64      	ldr	r2, [pc, #400]	; (8001420 <main+0x3d4>)
 8001290:	6013      	str	r3, [r2, #0]
	  		  }
	  		  if(pwm_value>290)
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <main+0x3d4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800129a:	dd03      	ble.n	80012a4 <main+0x258>
	  		  {
	  			pwm_value=290;
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <main+0x3d4>)
 800129e:	f44f 7291 	mov.w	r2, #290	; 0x122
 80012a2:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f000 fe85 	bl	8001fb4 <HAL_Delay>
	  	}
	  	if(Rx_data=='3')
 80012aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ae:	2b33      	cmp	r3, #51	; 0x33
 80012b0:	d10e      	bne.n	80012d0 <main+0x284>
	  	{
	  		pwm_value=pwm_value-10;
 80012b2:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <main+0x3d4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3b0a      	subs	r3, #10
 80012b8:	4a59      	ldr	r2, [pc, #356]	; (8001420 <main+0x3d4>)
 80012ba:	6013      	str	r3, [r2, #0]
	  		  if(pwm_value<0)
 80012bc:	4b58      	ldr	r3, [pc, #352]	; (8001420 <main+0x3d4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da02      	bge.n	80012ca <main+0x27e>
	  		  {
	  			pwm_value=3;
 80012c4:	4b56      	ldr	r3, [pc, #344]	; (8001420 <main+0x3d4>)
 80012c6:	2203      	movs	r2, #3
 80012c8:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f000 fe72 	bl	8001fb4 <HAL_Delay>
	  	}
	  	if(Rx_data=='0')
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012d4:	2b30      	cmp	r3, #48	; 0x30
 80012d6:	d10e      	bne.n	80012f6 <main+0x2aa>
	  	{
	  			pwm_eski=pwm_value;
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <main+0x3d4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a51      	ldr	r2, [pc, #324]	; (8001424 <main+0x3d8>)
 80012de:	6013      	str	r3, [r2, #0]
		  		pwm_value=0;
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <main+0x3d4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2101      	movs	r1, #1
 80012ea:	484f      	ldr	r0, [pc, #316]	; (8001428 <main+0x3dc>)
 80012ec:	f001 fd87 	bl	8002dfe <HAL_GPIO_WritePin>
		  		  HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f000 fe5f 	bl	8001fb4 <HAL_Delay>

	  		}
	  		if(Rx_data=='2'){
 80012f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012fa:	2b32      	cmp	r3, #50	; 0x32
 80012fc:	d10b      	bne.n	8001316 <main+0x2ca>
		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	4849      	ldr	r0, [pc, #292]	; (8001428 <main+0x3dc>)
 8001304:	f001 fd7b 	bl	8002dfe <HAL_GPIO_WritePin>
		  		pwm_value=pwm_eski;
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <main+0x3d8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a44      	ldr	r2, [pc, #272]	; (8001420 <main+0x3d4>)
 800130e:	6013      	str	r3, [r2, #0]
		  		basla;
		  		  HAL_Delay(100);
 8001310:	2064      	movs	r0, #100	; 0x64
 8001312:	f000 fe4f 	bl	8001fb4 <HAL_Delay>

	  		}
	  		if(Rx_data=='4'){
 8001316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800131a:	2b34      	cmp	r3, #52	; 0x34
 800131c:	d105      	bne.n	800132a <main+0x2de>
		  		basla;
		  		saat_yon=false;
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <main+0x3e0>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		  		  HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f000 fe45 	bl	8001fb4 <HAL_Delay>
	  		}
	  		if(Rx_data=='5'){
 800132a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800132e:	2b35      	cmp	r3, #53	; 0x35
 8001330:	d105      	bne.n	800133e <main+0x2f2>
		  		basla;
		  		saat_yon=true;
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <main+0x3e0>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		  		  HAL_Delay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f000 fe3b 	bl	8001fb4 <HAL_Delay>
	  		}
	  		if(Rx_data=='6'){
 800133e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001342:	2b36      	cmp	r3, #54	; 0x36
 8001344:	d115      	bne.n	8001372 <main+0x326>
		  		pwm_value=pwm_eski;
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <main+0x3d8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a35      	ldr	r2, [pc, #212]	; (8001420 <main+0x3d4>)
 800134c:	6013      	str	r3, [r2, #0]
		  		pwm_value==0;
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2101      	movs	r1, #1
 8001352:	4835      	ldr	r0, [pc, #212]	; (8001428 <main+0x3dc>)
 8001354:	f001 fd53 	bl	8002dfe <HAL_GPIO_WritePin>
		  	  HAL_Delay(500);
 8001358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135c:	f000 fe2a 	bl	8001fb4 <HAL_Delay>
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2101      	movs	r1, #1
 8001364:	4830      	ldr	r0, [pc, #192]	; (8001428 <main+0x3dc>)
 8001366:	f001 fd4a 	bl	8002dfe <HAL_GPIO_WritePin>
		  	  HAL_Delay(500);
 800136a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800136e:	f000 fe21 	bl	8001fb4 <HAL_Delay>
	  	//htim4.Instance->CCR1 = 20;
	  	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
	  	  //TIM1->CCR2 = PWM_deger;
	  	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
		  //HAL_Delay(1000);
	  HAL_ADC_Start(&hadc1);
 8001372:	482f      	ldr	r0, [pc, #188]	; (8001430 <main+0x3e4>)
 8001374:	f000 ff1a 	bl	80021ac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001378:	2164      	movs	r1, #100	; 0x64
 800137a:	482d      	ldr	r0, [pc, #180]	; (8001430 <main+0x3e4>)
 800137c:	f000 fff0 	bl	8002360 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8001380:	482b      	ldr	r0, [pc, #172]	; (8001430 <main+0x3e4>)
 8001382:	f001 f8f3 	bl	800256c <HAL_ADC_GetValue>
 8001386:	4603      	mov	r3, r0
 8001388:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  //volt=((((raw*3.3)/4096)*53.8)/2.7);
	  HAL_ADC_Stop (&hadc1);
 800138c:	4828      	ldr	r0, [pc, #160]	; (8001430 <main+0x3e4>)
 800138e:	f000 ffbb 	bl	8002308 <HAL_ADC_Stop>
	  HAL_Delay(2);
 8001392:	2002      	movs	r0, #2
 8001394:	f000 fe0e 	bl	8001fb4 <HAL_Delay>
	  HAL_ADC_Start(&hadc2);
 8001398:	4826      	ldr	r0, [pc, #152]	; (8001434 <main+0x3e8>)
 800139a:	f000 ff07 	bl	80021ac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 800139e:	2164      	movs	r1, #100	; 0x64
 80013a0:	4824      	ldr	r0, [pc, #144]	; (8001434 <main+0x3e8>)
 80013a2:	f000 ffdd 	bl	8002360 <HAL_ADC_PollForConversion>
	  raw1 = HAL_ADC_GetValue(&hadc2);
 80013a6:	4823      	ldr	r0, [pc, #140]	; (8001434 <main+0x3e8>)
 80013a8:	f001 f8e0 	bl	800256c <HAL_ADC_GetValue>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	  //akim=(((raw1*3.3)/2048)/96)*100;
	  HAL_ADC_Stop (&hadc2);
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <main+0x3e8>)
 80013b4:	f000 ffa8 	bl	8002308 <HAL_ADC_Stop>
	  if(rpm_ok==true)
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <main+0x3ec>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d018      	beq.n	80013f2 <main+0x3a6>
	  {
		  uint32_t len=sprintf(buffer, "%d*%d*%d*1\r\n", raw, raw1, pwm_value);
 80013c0:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80013c4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <main+0x3d4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1d38      	adds	r0, r7, #4
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	460b      	mov	r3, r1
 80013d2:	491a      	ldr	r1, [pc, #104]	; (800143c <main+0x3f0>)
 80013d4:	f004 f866 	bl	80054a4 <siprintf>
 80013d8:	4603      	mov	r3, r0
 80013da:	65bb      	str	r3, [r7, #88]	; 0x58
		  rpm_ok=false;
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <main+0x3ec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint16_t*)buffer, len, 100);
 80013e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	1d39      	adds	r1, r7, #4
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <main+0x3f4>)
 80013ec:	f003 f921 	bl	8004632 <HAL_UART_Transmit>
 80013f0:	e6d3      	b.n	800119a <main+0x14e>
	  }
	  else{
		  uint32_t len=sprintf(buffer, "%d*%d*%d*0\r\n", raw, raw1, pwm_value);
 80013f2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80013f6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <main+0x3d4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1d38      	adds	r0, r7, #4
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	460b      	mov	r3, r1
 8001404:	490f      	ldr	r1, [pc, #60]	; (8001444 <main+0x3f8>)
 8001406:	f004 f84d 	bl	80054a4 <siprintf>
 800140a:	4603      	mov	r3, r0
 800140c:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart3, (uint16_t*)buffer, len, 100);
 800140e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001410:	b29a      	uxth	r2, r3
 8001412:	1d39      	adds	r1, r7, #4
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <main+0x3f4>)
 8001418:	f003 f90b 	bl	8004632 <HAL_UART_Transmit>
  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1)
 800141c:	e6bd      	b.n	800119a <main+0x14e>
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000
 8001424:	20000338 	.word	0x20000338
 8001428:	40010800 	.word	0x40010800
 800142c:	20000008 	.word	0x20000008
 8001430:	200001fc 	.word	0x200001fc
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20000340 	.word	0x20000340
 800143c:	080077c0 	.word	0x080077c0
 8001440:	200002ec 	.word	0x200002ec
 8001444:	080077d0 	.word	0x080077d0

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	2228      	movs	r2, #40	; 0x28
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f004 f887 	bl	800556a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	2301      	movs	r3, #1
 8001488:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001494:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001498:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fcde 	bl	8002e60 <HAL_RCC_OscConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014aa:	f000 fa73 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ae:	230f      	movs	r3, #15
 80014b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2102      	movs	r1, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 ff49 	bl	8003364 <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d8:	f000 fa5c 	bl	8001994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014dc:	2302      	movs	r3, #2
 80014de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80014e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 f8c9 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80014f4:	f000 fa4e 	bl	8001994 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_ADC1_Init+0x74>)
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <MX_ADC1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_ADC1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_ADC1_Init+0x74>)
 800151e:	2201      	movs	r2, #1
 8001520:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_ADC1_Init+0x74>)
 800152a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800152e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_ADC1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_ADC1_Init+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_ADC1_Init+0x74>)
 800153e:	f000 fd5d 	bl	8001ffc <HAL_ADC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 fa24 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001550:	2301      	movs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001554:	2306      	movs	r3, #6
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_ADC1_Init+0x74>)
 800155e:	f001 f811 	bl	8002584 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001568:	f000 fa14 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200001fc 	.word	0x200001fc
 8001578:	40012400 	.word	0x40012400

0800157c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC2_Init+0x74>)
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <MX_ADC2_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC2_Init+0x74>)
 800159a:	2201      	movs	r2, #1
 800159c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC2_Init+0x74>)
 80015a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015aa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC2_Init+0x74>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_ADC2_Init+0x74>)
 80015ba:	f000 fd1f 	bl	8001ffc <HAL_ADC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 f9e6 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80015d0:	2306      	movs	r3, #6
 80015d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_ADC2_Init+0x74>)
 80015da:	f000 ffd3 	bl	8002584 <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80015e4:	f000 f9d6 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000022c 	.word	0x2000022c
 80015f4:	40012800 	.word	0x40012800

080015f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b096      	sub	sp, #88	; 0x58
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2220      	movs	r2, #32
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f003 ff9a 	bl	800556a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <MX_TIM1_Init+0x138>)
 8001638:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <MX_TIM1_Init+0x13c>)
 800163a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 800163c:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <MX_TIM1_Init+0x138>)
 800163e:	220b      	movs	r2, #11
 8001640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <MX_TIM1_Init+0x138>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 299;
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <MX_TIM1_Init+0x138>)
 800164a:	f240 122b 	movw	r2, #299	; 0x12b
 800164e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <MX_TIM1_Init+0x138>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <MX_TIM1_Init+0x138>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b34      	ldr	r3, [pc, #208]	; (8001730 <MX_TIM1_Init+0x138>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001662:	4833      	ldr	r0, [pc, #204]	; (8001730 <MX_TIM1_Init+0x138>)
 8001664:	f002 f978 	bl	8003958 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800166e:	f000 f991 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800167c:	4619      	mov	r1, r3
 800167e:	482c      	ldr	r0, [pc, #176]	; (8001730 <MX_TIM1_Init+0x138>)
 8001680:	f002 fb6c 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800168a:	f000 f983 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800168e:	4828      	ldr	r0, [pc, #160]	; (8001730 <MX_TIM1_Init+0x138>)
 8001690:	f002 f9b1 	bl	80039f6 <HAL_TIM_PWM_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800169a:	f000 f97b 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016aa:	4619      	mov	r1, r3
 80016ac:	4820      	ldr	r0, [pc, #128]	; (8001730 <MX_TIM1_Init+0x138>)
 80016ae:	f002 fec1 	bl	8004434 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016b8:	f000 f96c 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	2360      	movs	r3, #96	; 0x60
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	2204      	movs	r2, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <MX_TIM1_Init+0x138>)
 80016e2:	f002 fa79 	bl	8003bd8 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80016ec:	f000 f952 	bl	8001994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001708:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM1_Init+0x138>)
 8001714:	f002 feec 	bl	80044f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800171e:	f000 f939 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM1_Init+0x138>)
 8001724:	f000 fa1e 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3758      	adds	r7, #88	; 0x58
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000025c 	.word	0x2000025c
 8001734:	40012c00 	.word	0x40012c00

08001738 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_TIM4_Init+0xc0>)
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <MX_TIM4_Init+0xc4>)
 800175e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 11;
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <MX_TIM4_Init+0xc0>)
 8001762:	220b      	movs	r2, #11
 8001764:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_TIM4_Init+0xc0>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 299;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <MX_TIM4_Init+0xc0>)
 800176e:	f240 122b 	movw	r2, #299	; 0x12b
 8001772:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_TIM4_Init+0xc0>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_TIM4_Init+0xc0>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001780:	481d      	ldr	r0, [pc, #116]	; (80017f8 <MX_TIM4_Init+0xc0>)
 8001782:	f002 f938 	bl	80039f6 <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 f902 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	4619      	mov	r1, r3
 800179e:	4816      	ldr	r0, [pc, #88]	; (80017f8 <MX_TIM4_Init+0xc0>)
 80017a0:	f002 fe48 	bl	8004434 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017aa:	f000 f8f3 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2204      	movs	r2, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_TIM4_Init+0xc0>)
 80017c6:	f002 fa07 	bl	8003bd8 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017d0:	f000 f8e0 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	220c      	movs	r2, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM4_Init+0xc0>)
 80017dc:	f002 f9fc 	bl	8003bd8 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017e6:	f000 f8d5 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017ea:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM4_Init+0xc0>)
 80017ec:	f000 f9ba 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200002a4 	.word	0x200002a4
 80017fc:	40000800 	.word	0x40000800

08001800 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART3_UART_Init+0x4c>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <MX_USART3_UART_Init+0x50>)
 8001808:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <MX_USART3_UART_Init+0x4c>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART3_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART3_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART3_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART3_UART_Init+0x4c>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART3_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART3_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART3_UART_Init+0x4c>)
 8001838:	f002 feab 	bl	8004592 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001842:	f000 f8a7 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002ec 	.word	0x200002ec
 8001850:	40004800 	.word	0x40004800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001868:	4b46      	ldr	r3, [pc, #280]	; (8001984 <MX_GPIO_Init+0x130>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a45      	ldr	r2, [pc, #276]	; (8001984 <MX_GPIO_Init+0x130>)
 800186e:	f043 0320 	orr.w	r3, r3, #32
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <MX_GPIO_Init+0x130>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <MX_GPIO_Init+0x130>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a3f      	ldr	r2, [pc, #252]	; (8001984 <MX_GPIO_Init+0x130>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <MX_GPIO_Init+0x130>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <MX_GPIO_Init+0x130>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a39      	ldr	r2, [pc, #228]	; (8001984 <MX_GPIO_Init+0x130>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <MX_GPIO_Init+0x130>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|L1_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f240 4101 	movw	r1, #1025	; 0x401
 80018b6:	4834      	ldr	r0, [pc, #208]	; (8001988 <MX_GPIO_Init+0x134>)
 80018b8:	f001 faa1 	bl	8002dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L2_Pin|L3_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80018c2:	4832      	ldr	r0, [pc, #200]	; (800198c <MX_GPIO_Init+0x138>)
 80018c4:	f001 fa9b 	bl	8002dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	482a      	ldr	r0, [pc, #168]	; (8001988 <MX_GPIO_Init+0x134>)
 80018e0:	f001 f8f2 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4824      	ldr	r0, [pc, #144]	; (8001988 <MX_GPIO_Init+0x134>)
 80018f8:	f001 f8e6 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM__Pin PWM_B1_Pin */
  GPIO_InitStruct.Pin = PWM__Pin|PWM_B1_Pin;
 80018fc:	2303      	movs	r3, #3
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	481f      	ldr	r0, [pc, #124]	; (800198c <MX_GPIO_Init+0x138>)
 8001910:	f001 f8da 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001914:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_GPIO_Init+0x13c>)
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <MX_GPIO_Init+0x138>)
 800192a:	f001 f8cd 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_Pin */
  GPIO_InitStruct.Pin = L1_Pin;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4810      	ldr	r0, [pc, #64]	; (8001988 <MX_GPIO_Init+0x134>)
 8001948:	f001 f8be 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L2_Pin|L3_Pin;
 800194c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <MX_GPIO_Init+0x138>)
 8001966:	f001 f8af 	bl	8002ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2028      	movs	r0, #40	; 0x28
 8001970:	f001 f873 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001974:	2028      	movs	r0, #40	; 0x28
 8001976:	f001 f88c 	bl	8002a92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	10110000 	.word	0x10110000

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();
  while (1)
  {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	2101      	movs	r1, #1
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <Error_Handler+0x24>)
 80019a2:	f001 fa2c 	bl	8002dfe <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80019a6:	200a      	movs	r0, #10
 80019a8:	f000 fb04 	bl	8001fb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	4801      	ldr	r0, [pc, #4]	; (80019b8 <Error_Handler+0x24>)
 80019b2:	f001 fa24 	bl	8002dfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80019b6:	e7f1      	b.n	800199c <Error_Handler+0x8>
 80019b8:	40010800 	.word	0x40010800

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x5c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_MspInit+0x60>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_MspInit+0x60>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000

08001a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <HAL_ADC_MspInit+0xbc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d122      	bne.n	8001a86 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a20      	ldr	r2, [pc, #128]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = V_in_Pin;
 8001a70:	2320      	movs	r3, #32
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_in_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001a80:	f001 f822 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a84:	e026      	b.n	8001ad4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_ADC_MspInit+0xc8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d121      	bne.n	8001ad4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_in_Pin;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_in_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001ad0:	f000 fffa 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40012800 	.word	0x40012800

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_TIM_Base_MspInit+0x34>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10b      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_TIM_Base_MspInit+0x38>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_TIM_Base_MspInit+0x38>)
 8001b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_TIM_Base_MspInit+0x38>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <HAL_TIM_PWM_MspInit+0x34>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10b      	bne.n	8001b52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_TIM_PWM_MspInit+0x38>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_TIM_PWM_MspInit+0x38>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_TIM_PWM_MspInit+0x38>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_TIM_MspPostInit+0x98>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d119      	bne.n	8001bb8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4814      	ldr	r0, [pc, #80]	; (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001bb2:	f000 ff89 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bb6:	e01d      	b.n	8001bf4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <HAL_TIM_MspPostInit+0xa4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d118      	bne.n	8001bf4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6193      	str	r3, [r2, #24]
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = H2_Pin|H3_Pin;
 8001bda:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4807      	ldr	r0, [pc, #28]	; (8001c0c <HAL_TIM_MspPostInit+0xa8>)
 8001bf0:	f000 ff6a 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40000800 	.word	0x40000800
 8001c0c:	40010c00 	.word	0x40010c00

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_UART_MspInit+0x8c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d131      	bne.n	8001c94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3a:	61d3      	str	r3, [r2, #28]
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_UART_MspInit+0x90>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8001c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <HAL_UART_MspInit+0x94>)
 8001c76:	f000 ff27 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8001c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x94>)
 8001c90:	f000 ff1a 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004800 	.word	0x40004800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010c00 	.word	0x40010c00

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 f945 	bl	8001f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cfa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cfe:	f001 f897 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d06:	f001 f893 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001d0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d0e:	f001 f88f 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <_kill>:

int _kill(int pid, int sig)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2e:	f003 fc6f 	bl	8005610 <__errno>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2216      	movs	r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
  return -1;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_exit>:

void _exit (int status)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffe7 	bl	8001d24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d56:	e7fe      	b.n	8001d56 <_exit+0x12>

08001d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e00a      	b.n	8001d80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6a:	f3af 8000 	nop.w
 8001d6e:	4601      	mov	r1, r0
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	b2ca      	uxtb	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf0      	blt.n	8001d6a <_read+0x12>
  }

  return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e009      	b.n	8001db8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf1      	blt.n	8001da4 <_write+0x12>
  }
  return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_close>:

int _close(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df0:	605a      	str	r2, [r3, #4]
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f003 fbd8 	bl	8005610 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20005000 	.word	0x20005000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	20000344 	.word	0x20000344
 8001e94:	20000498 	.word	0x20000498

08001e98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea4:	f7ff fff8 	bl	8001e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eaa:	490c      	ldr	r1, [pc, #48]	; (8001edc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ec0:	4c09      	ldr	r4, [pc, #36]	; (8001ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ece:	f003 fba5 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed2:	f7ff f8bb 	bl	800104c <main>
  bx lr
 8001ed6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ee0:	08007bbc 	.word	0x08007bbc
  ldr r2, =_sbss
 8001ee4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ee8:	20000498 	.word	0x20000498

08001eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC1_2_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_Init+0x28>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_Init+0x28>)
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 fd9f 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	200f      	movs	r0, #15
 8001f08:	f000 f808 	bl	8001f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff fd56 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_InitTick+0x54>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fdb7 	bl	8002aae <HAL_SYSTICK_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00e      	b.n	8001f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d80a      	bhi.n	8001f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f000 fd7f 	bl	8002a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <HAL_InitTick+0x5c>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20000014 	.word	0x20000014
 8001f78:	20000010 	.word	0x20000010

08001f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_IncTick+0x1c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x20>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_IncTick+0x20>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000014 	.word	0x20000014
 8001f9c:	20000348 	.word	0x20000348

08001fa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <HAL_GetTick+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000348 	.word	0x20000348

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d005      	beq.n	8001fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_Delay+0x44>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fda:	bf00      	nop
 8001fdc:	f7ff ffe0 	bl	8001fa0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8f7      	bhi.n	8001fdc <HAL_Delay+0x28>
  {
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000014 	.word	0x20000014

08001ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0be      	b.n	800219c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fcf0 	bl	8001a20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fbf1 	bl	8002828 <ADC_ConversionStop_Disable>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8099 	bne.w	800218a <HAL_ADC_Init+0x18e>
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8095 	bne.w	800218a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002068:	f023 0302 	bic.w	r3, r3, #2
 800206c:	f043 0202 	orr.w	r2, r3, #2
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800207c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b1b      	ldrb	r3, [r3, #12]
 8002082:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002084:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4313      	orrs	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002094:	d003      	beq.n	800209e <HAL_ADC_Init+0xa2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_Init+0xa8>
 800209e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a2:	e000      	b.n	80020a6 <HAL_ADC_Init+0xaa>
 80020a4:	2300      	movs	r3, #0
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7d1b      	ldrb	r3, [r3, #20]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d119      	bne.n	80020e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7b1b      	ldrb	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	035a      	lsls	r2, r3, #13
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e00b      	b.n	80020e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_ADC_Init+0x1a8>)
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	430b      	orrs	r3, r1
 800210e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002118:	d003      	beq.n	8002122 <HAL_ADC_Init+0x126>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d104      	bne.n	800212c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	3b01      	subs	r3, #1
 8002128:	051b      	lsls	r3, r3, #20
 800212a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	430a      	orrs	r2, r1
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_ADC_Init+0x1ac>)
 8002148:	4013      	ands	r3, r2
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d10b      	bne.n	8002168 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002166:	e018      	b.n	800219a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	f023 0312 	bic.w	r3, r3, #18
 8002170:	f043 0210 	orr.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002188:	e007      	b.n	800219a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffe1f7fd 	.word	0xffe1f7fd
 80021a8:	ff1f0efe 	.word	0xff1f0efe

080021ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Start+0x1a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e098      	b.n	80022f8 <HAL_ADC_Start+0x14c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fad0 	bl	8002774 <ADC_Enable>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8087 	bne.w	80022ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a41      	ldr	r2, [pc, #260]	; (8002300 <HAL_ADC_Start+0x154>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d105      	bne.n	800220a <HAL_ADC_Start+0x5e>
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_ADC_Start+0x158>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d026      	beq.n	8002272 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002234:	e01d      	b.n	8002272 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <HAL_ADC_Start+0x158>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_ADC_Start+0xaa>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_ADC_Start+0x154>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <HAL_ADC_Start+0xc6>
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_ADC_Start+0x158>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f023 0206 	bic.w	r2, r3, #6
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
 800228a:	e002      	b.n	8002292 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 0202 	mvn.w	r2, #2
 80022a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022b2:	d113      	bne.n	80022dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <HAL_ADC_Start+0x154>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_ADC_Start+0x158>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	e00c      	b.n	80022f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40012800 	.word	0x40012800
 8002304:	40012400 	.word	0x40012400

08002308 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Stop+0x1a>
 800231e:	2302      	movs	r3, #2
 8002320:	e01a      	b.n	8002358 <HAL_ADC_Stop+0x50>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa7c 	bl	8002828 <ADC_ConversionStop_Disable>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002376:	f7ff fe13 	bl	8001fa0 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f043 0220 	orr.w	r2, r3, #32
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0d3      	b.n	800254a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d131      	bne.n	8002414 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d12a      	bne.n	8002414 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023be:	e021      	b.n	8002404 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d01d      	beq.n	8002404 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_ADC_PollForConversion+0x7e>
 80023ce:	f7ff fde7 	bl	8001fa0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d212      	bcs.n	8002404 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0a2      	b.n	800254a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0d6      	beq.n	80023c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002412:	e070      	b.n	80024f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002414:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <HAL_ADC_PollForConversion+0x1f4>)
 8002416:	681c      	ldr	r4, [r3, #0]
 8002418:	2002      	movs	r0, #2
 800241a:	f001 f9e7 	bl	80037ec <HAL_RCCEx_GetPeriphCLKFreq>
 800241e:	4603      	mov	r3, r0
 8002420:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_ADC_PollForConversion+0x1f8>)
 800242c:	400b      	ands	r3, r1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_ADC_PollForConversion+0x104>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68d9      	ldr	r1, [r3, #12]
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_ADC_PollForConversion+0x1fc>)
 800243a:	400b      	ands	r3, r1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <HAL_ADC_PollForConversion+0x104>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_ADC_PollForConversion+0x200>)
 8002448:	400b      	ands	r3, r1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d108      	bne.n	8002460 <HAL_ADC_PollForConversion+0x100>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68d9      	ldr	r1, [r3, #12]
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_ADC_PollForConversion+0x204>)
 8002456:	400b      	ands	r3, r1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_PollForConversion+0x100>
 800245c:	2314      	movs	r3, #20
 800245e:	e020      	b.n	80024a2 <HAL_ADC_PollForConversion+0x142>
 8002460:	2329      	movs	r3, #41	; 0x29
 8002462:	e01e      	b.n	80024a2 <HAL_ADC_PollForConversion+0x142>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6919      	ldr	r1, [r3, #16]
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_ADC_PollForConversion+0x200>)
 800246c:	400b      	ands	r3, r1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_ADC_PollForConversion+0x120>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68d9      	ldr	r1, [r3, #12]
 8002478:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <HAL_ADC_PollForConversion+0x204>)
 800247a:	400b      	ands	r3, r1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <HAL_ADC_PollForConversion+0x13c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_ADC_PollForConversion+0x208>)
 8002488:	400b      	ands	r3, r1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x140>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68d9      	ldr	r1, [r3, #12]
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_ADC_PollForConversion+0x208>)
 8002496:	400b      	ands	r3, r1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x140>
 800249c:	2354      	movs	r3, #84	; 0x54
 800249e:	e000      	b.n	80024a2 <HAL_ADC_PollForConversion+0x142>
 80024a0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024a8:	e021      	b.n	80024ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d01a      	beq.n	80024e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_ADC_PollForConversion+0x168>
 80024b8:	f7ff fd72 	bl	8001fa0 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d20f      	bcs.n	80024e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d90b      	bls.n	80024e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e030      	b.n	800254a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d8d9      	bhi.n	80024aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0212 	mvn.w	r2, #18
 80024fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002516:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800251a:	d115      	bne.n	8002548 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002520:	2b00      	cmp	r3, #0
 8002522:	d111      	bne.n	8002548 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	bf00      	nop
 8002554:	2000000c 	.word	0x2000000c
 8002558:	24924924 	.word	0x24924924
 800255c:	00924924 	.word	0x00924924
 8002560:	12492492 	.word	0x12492492
 8002564:	00492492 	.word	0x00492492
 8002568:	00249249 	.word	0x00249249

0800256c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x20>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e0dc      	b.n	800275e <HAL_ADC_ConfigChannel+0x1da>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d81c      	bhi.n	80025ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	3b05      	subs	r3, #5
 80025c6:	221f      	movs	r2, #31
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4019      	ands	r1, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b05      	subs	r3, #5
 80025e0:	fa00 f203 	lsl.w	r2, r0, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34
 80025ec:	e03c      	b.n	8002668 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	d81c      	bhi.n	8002630 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3b23      	subs	r3, #35	; 0x23
 8002608:	221f      	movs	r2, #31
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	4019      	ands	r1, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b23      	subs	r3, #35	; 0x23
 8002622:	fa00 f203 	lsl.w	r2, r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
 800262e:	e01b      	b.n	8002668 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	3b41      	subs	r3, #65	; 0x41
 8002642:	221f      	movs	r2, #31
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	4019      	ands	r1, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b41      	subs	r3, #65	; 0x41
 800265c:	fa00 f203 	lsl.w	r2, r0, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b09      	cmp	r3, #9
 800266e:	d91c      	bls.n	80026aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68d9      	ldr	r1, [r3, #12]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	3b1e      	subs	r3, #30
 8002682:	2207      	movs	r2, #7
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	4019      	ands	r1, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6898      	ldr	r0, [r3, #8]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	3b1e      	subs	r3, #30
 800269c:	fa00 f203 	lsl.w	r2, r0, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	e019      	b.n	80026de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	2207      	movs	r2, #7
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	4019      	ands	r1, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6898      	ldr	r0, [r3, #8]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d003      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026ea:	2b11      	cmp	r3, #17
 80026ec:	d132      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_ADC_ConfigChannel+0x1e4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d125      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d126      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002714:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b10      	cmp	r3, #16
 800271c:	d11a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_ADC_ConfigChannel+0x1e8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_ADC_ConfigChannel+0x1ec>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	0c9a      	lsrs	r2, r3, #18
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002734:	e002      	b.n	800273c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3b01      	subs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1b2>
 8002742:	e007      	b.n	8002754 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40012400 	.word	0x40012400
 800276c:	2000000c 	.word	0x2000000c
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d040      	beq.n	8002814 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <ADC_Enable+0xac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <ADC_Enable+0xb0>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	0c9b      	lsrs	r3, r3, #18
 80027ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027b0:	e002      	b.n	80027b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027be:	f7ff fbef 	bl	8001fa0 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027c4:	e01f      	b.n	8002806 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027c6:	f7ff fbeb 	bl	8001fa0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d918      	bls.n	8002806 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d011      	beq.n	8002806 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e007      	b.n	8002816 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d1d8      	bne.n	80027c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000000c 	.word	0x2000000c
 8002824:	431bde83 	.word	0x431bde83

08002828 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d12e      	bne.n	80028a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002852:	f7ff fba5 	bl	8001fa0 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002858:	e01b      	b.n	8002892 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800285a:	f7ff fba1 	bl	8001fa0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d914      	bls.n	8002892 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10d      	bne.n	8002892 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e007      	b.n	80028a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d0dc      	beq.n	800285a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <__NVIC_EnableIRQ+0x34>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff90 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff2d 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff42 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff90 	bl	800299c <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff35 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	e169      	b.n	8002db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002adc:	2201      	movs	r2, #1
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8158 	bne.w	8002daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a9a      	ldr	r2, [pc, #616]	; (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d05e      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b04:	4a98      	ldr	r2, [pc, #608]	; (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d875      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b0a:	4a98      	ldr	r2, [pc, #608]	; (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d058      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b10:	4a96      	ldr	r2, [pc, #600]	; (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d86f      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b16:	4a96      	ldr	r2, [pc, #600]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d052      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b1c:	4a94      	ldr	r2, [pc, #592]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d869      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b22:	4a94      	ldr	r2, [pc, #592]	; (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04c      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b28:	4a92      	ldr	r2, [pc, #584]	; (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d863      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b2e:	4a92      	ldr	r2, [pc, #584]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d046      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b34:	4a90      	ldr	r2, [pc, #576]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d85d      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d82a      	bhi.n	8002b94 <HAL_GPIO_Init+0xcc>
 8002b3e:	2b12      	cmp	r3, #18
 8002b40:	d859      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <HAL_GPIO_Init+0x80>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002b9d 	.word	0x08002b9d
 8002b50:	08002baf 	.word	0x08002baf
 8002b54:	08002bf1 	.word	0x08002bf1
 8002b58:	08002bf7 	.word	0x08002bf7
 8002b5c:	08002bf7 	.word	0x08002bf7
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002bf7 	.word	0x08002bf7
 8002b68:	08002bf7 	.word	0x08002bf7
 8002b6c:	08002bf7 	.word	0x08002bf7
 8002b70:	08002bf7 	.word	0x08002bf7
 8002b74:	08002bf7 	.word	0x08002bf7
 8002b78:	08002bf7 	.word	0x08002bf7
 8002b7c:	08002bf7 	.word	0x08002bf7
 8002b80:	08002bf7 	.word	0x08002bf7
 8002b84:	08002bf7 	.word	0x08002bf7
 8002b88:	08002bf7 	.word	0x08002bf7
 8002b8c:	08002ba5 	.word	0x08002ba5
 8002b90:	08002bb9 	.word	0x08002bb9
 8002b94:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_GPIO_Init+0x2b4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b9a:	e02c      	b.n	8002bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	623b      	str	r3, [r7, #32]
          break;
 8002ba2:	e029      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	623b      	str	r3, [r7, #32]
          break;
 8002bac:	e024      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e01f      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e01a      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	623b      	str	r3, [r7, #32]
          break;
 8002bce:	e013      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	611a      	str	r2, [r3, #16]
          break;
 8002be2:	e009      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be4:	2308      	movs	r3, #8
 8002be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	615a      	str	r2, [r3, #20]
          break;
 8002bee:	e003      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
          break;
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          break;
 8002bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d801      	bhi.n	8002c02 <HAL_GPIO_Init+0x13a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	e001      	b.n	8002c06 <HAL_GPIO_Init+0x13e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d802      	bhi.n	8002c14 <HAL_GPIO_Init+0x14c>
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x152>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	3b08      	subs	r3, #8
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	210f      	movs	r1, #15
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80b1 	beq.w	8002daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_GPIO_Init+0x2bc>)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a40      	ldr	r2, [pc, #256]	; (8002d88 <HAL_GPIO_Init+0x2c0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x1ec>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3f      	ldr	r2, [pc, #252]	; (8002d8c <HAL_GPIO_Init+0x2c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1e8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <HAL_GPIO_Init+0x2c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <HAL_GPIO_Init+0x2cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1e0>
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cc6:	492f      	ldr	r1, [pc, #188]	; (8002d84 <HAL_GPIO_Init+0x2bc>)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	492c      	ldr	r1, [pc, #176]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	4928      	ldr	r1, [pc, #160]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d08:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4922      	ldr	r1, [pc, #136]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	491e      	ldr	r1, [pc, #120]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4918      	ldr	r1, [pc, #96]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	4914      	ldr	r1, [pc, #80]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d021      	beq.n	8002d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	490e      	ldr	r1, [pc, #56]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e021      	b.n	8002daa <HAL_GPIO_Init+0x2e2>
 8002d66:	bf00      	nop
 8002d68:	10320000 	.word	0x10320000
 8002d6c:	10310000 	.word	0x10310000
 8002d70:	10220000 	.word	0x10220000
 8002d74:	10210000 	.word	0x10210000
 8002d78:	10120000 	.word	0x10120000
 8002d7c:	10110000 	.word	0x10110000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	40011000 	.word	0x40011000
 8002d94:	40011400 	.word	0x40011400
 8002d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	4909      	ldr	r1, [pc, #36]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	3301      	adds	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f47f ae8e 	bne.w	8002adc <HAL_GPIO_Init+0x14>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	372c      	adds	r7, #44	; 0x2c
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e001      	b.n	8002df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	807b      	strh	r3, [r7, #2]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0e:	787b      	ldrb	r3, [r7, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e14:	887a      	ldrh	r2, [r7, #2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e1a:	e003      	b.n	8002e24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	041a      	lsls	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	611a      	str	r2, [r3, #16]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fec4 	bl	8000bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40010400 	.word	0x40010400

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e272      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e80:	4b92      	ldr	r3, [pc, #584]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e8c:	4b8f      	ldr	r3, [pc, #572]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
 8002e98:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	4b89      	ldr	r3, [pc, #548]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x12c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d168      	bne.n	8002f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e24c      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x76>
 8002ec8:	4b80      	ldr	r3, [pc, #512]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7f      	ldr	r2, [pc, #508]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a77      	ldr	r2, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0xbc>
 8002f02:	4b72      	ldr	r3, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a71      	ldr	r2, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f830 	bl	8001fa0 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff f82c 	bl	8001fa0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e200      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe4>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff f81c 	bl	8001fa0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff f818 	bl	8001fa0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1ec      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x10c>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fa6:	4b49      	ldr	r3, [pc, #292]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
 8002fb2:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1c0      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe ffd1 	bl	8001fa0 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe ffcd 	bl	8001fa0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1a1      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4927      	ldr	r1, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_RCC_OscConfig+0x270>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe ffb0 	bl	8001fa0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe ffac 	bl	8001fa0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e180      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03a      	beq.n	80030e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d019      	beq.n	80030aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x274>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fe ff90 	bl	8001fa0 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe ff8c 	bl	8001fa0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e160      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 face 	bl	8003644 <RCC_Delay>
 80030a8:	e01c      	b.n	80030e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_OscConfig+0x274>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe ff76 	bl	8001fa0 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	e00f      	b.n	80030d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe ff72 	bl	8001fa0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d908      	bls.n	80030d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e146      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	42420000 	.word	0x42420000
 80030d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b92      	ldr	r3, [pc, #584]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e9      	bne.n	80030b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a6 	beq.w	800323e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f6:	4b8b      	ldr	r3, [pc, #556]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a87      	ldr	r2, [pc, #540]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	4b85      	ldr	r3, [pc, #532]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b7f      	ldr	r3, [pc, #508]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7e      	ldr	r2, [pc, #504]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe ff33 	bl	8001fa0 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe ff2f 	bl	8001fa0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e103      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b75      	ldr	r3, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x312>
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e02d      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x334>
 800317a:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a69      	ldr	r2, [pc, #420]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a66      	ldr	r2, [pc, #408]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	e01c      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x356>
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a60      	ldr	r2, [pc, #384]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 80031b6:	4b5b      	ldr	r3, [pc, #364]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fee3 	bl	8001fa0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fedf 	bl	8001fa0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0b1      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCC_OscConfig+0x37e>
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fecd 	bl	8001fa0 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe fec9 	bl	8001fa0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e09b      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d061      	beq.n	8003318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d146      	bne.n	80032ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fe9d 	bl	8001fa0 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fe99 	bl	8001fa0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e06d      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4921      	ldr	r1, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a19      	ldr	r1, [r3, #32]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	430b      	orrs	r3, r1
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe fe6d 	bl	8001fa0 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fe69 	bl	8001fa0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e03d      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x46a>
 80032e8:	e035      	b.n	8003356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fe56 	bl	8001fa0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fe52 	bl	8001fa0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e026      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x498>
 8003316:	e01e      	b.n	8003356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e019      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x500>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0d0      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d910      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b67      	ldr	r3, [pc, #412]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0207 	bic.w	r2, r3, #7
 800338e:	4965      	ldr	r1, [pc, #404]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a52      	ldr	r2, [pc, #328]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d040      	beq.n	8003484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e073      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06b      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b39      	ldr	r3, [pc, #228]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4936      	ldr	r1, [pc, #216]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003454:	f7fe fda4 	bl	8001fa0 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe fda0 	bl	8001fa0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e053      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d210      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	4922      	ldr	r1, [pc, #136]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	; (800352c <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1cc>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fd02 	bl	8001f1c <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
 800352c:	08007804 	.word	0x08007804
 8003530:	2000000c 	.word	0x2000000c
 8003534:	20000010 	.word	0x20000010

08003538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x30>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x36>
 8003566:	e027      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	e027      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	0c9b      	lsrs	r3, r3, #18
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003578:	5cd3      	ldrb	r3, [r2, r3]
 800357a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0c5b      	lsrs	r3, r3, #17
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800359a:	fb03 f202 	mul.w	r2, r3, r2
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e004      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	613b      	str	r3, [r7, #16]
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	613b      	str	r3, [r7, #16]
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	693b      	ldr	r3, [r7, #16]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	007a1200 	.word	0x007a1200
 80035d4:	0800781c 	.word	0x0800781c
 80035d8:	0800782c 	.word	0x0800782c
 80035dc:	003d0900 	.word	0x003d0900

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e4:	4b02      	ldr	r3, [pc, #8]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f8:	f7ff fff2 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	08007814 	.word	0x08007814

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003620:	f7ff ffde 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0adb      	lsrs	r3, r3, #11
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	08007814 	.word	0x08007814

08003644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <RCC_Delay+0x34>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0a      	ldr	r2, [pc, #40]	; (800367c <RCC_Delay+0x38>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0a5b      	lsrs	r3, r3, #9
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003660:	bf00      	nop
  }
  while (Delay --);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e5a      	subs	r2, r3, #1
 8003666:	60fa      	str	r2, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f9      	bne.n	8003660 <RCC_Delay+0x1c>
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	2000000c 	.word	0x2000000c
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d07d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a0:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10d      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b4c      	ldr	r3, [pc, #304]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4a4b      	ldr	r2, [pc, #300]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	61d3      	str	r3, [r2, #28]
 80036b8:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d118      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d4:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e0:	f7fe fc5e 	bl	8001fa0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	e008      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e8:	f7fe fc5a 	bl	8001fa0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e06d      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02e      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	429a      	cmp	r2, r3
 8003722:	d027      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d014      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe fc29 	bl	8001fa0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe fc25 	bl	8001fa0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e036      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4917      	ldr	r1, [pc, #92]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	4313      	orrs	r3, r2
 8003784:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	490b      	ldr	r1, [pc, #44]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4904      	ldr	r1, [pc, #16]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42420440 	.word	0x42420440

080037ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b10      	cmp	r3, #16
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b10      	cmp	r3, #16
 8003812:	f200 808a 	bhi.w	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d045      	beq.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d075      	beq.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003822:	e082      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003824:	4b46      	ldr	r3, [pc, #280]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800382a:	4b45      	ldr	r3, [pc, #276]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07b      	beq.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	0c9b      	lsrs	r3, r3, #18
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	4a41      	ldr	r2, [pc, #260]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d015      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0c5b      	lsrs	r3, r3, #17
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	4a3b      	ldr	r2, [pc, #236]	; (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00d      	beq.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4a34      	ldr	r2, [pc, #208]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003890:	d102      	bne.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	61bb      	str	r3, [r7, #24]
      break;
 8003896:	e04a      	b.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	61bb      	str	r3, [r7, #24]
      break;
 80038a6:	e042      	b.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d108      	bne.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80038c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e01f      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d6:	d109      	bne.n	80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80038e4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e00f      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f6:	d11c      	bne.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d016      	beq.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003904:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003908:	61bb      	str	r3, [r7, #24]
      break;
 800390a:	e012      	b.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800390c:	e011      	b.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800390e:	f7ff fe85 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0b9b      	lsrs	r3, r3, #14
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	61bb      	str	r3, [r7, #24]
      break;
 8003928:	e004      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003932:	bf00      	nop
    }
  }
  return (frequency);
 8003934:	69bb      	ldr	r3, [r7, #24]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	08007830 	.word	0x08007830
 8003948:	08007840 	.word	0x08007840
 800394c:	007a1200 	.word	0x007a1200
 8003950:	003d0900 	.word	0x003d0900
 8003954:	aaaaaaab 	.word	0xaaaaaaab

08003958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e041      	b.n	80039ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe f8b4 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 faa8 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e041      	b.n	8003a8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe f883 	bl	8001b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f000 fa59 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_TIM_PWM_Start+0x24>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e022      	b.n	8003afe <HAL_TIM_PWM_Start+0x6a>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d109      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x3e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e015      	b.n	8003afe <HAL_TIM_PWM_Start+0x6a>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d109      	bne.n	8003aec <HAL_TIM_PWM_Start+0x58>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e008      	b.n	8003afe <HAL_TIM_PWM_Start+0x6a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e05e      	b.n	8003bc4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x82>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	e013      	b.n	8003b3e <HAL_TIM_PWM_Start+0xaa>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x92>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b24:	e00b      	b.n	8003b3e <HAL_TIM_PWM_Start+0xaa>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_PWM_Start+0xa2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b34:	e003      	b.n	8003b3e <HAL_TIM_PWM_Start+0xaa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2201      	movs	r2, #1
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fc50 	bl	80043ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_TIM_PWM_Start+0x138>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_TIM_PWM_Start+0x138>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_TIM_PWM_Start+0xfa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d009      	beq.n	8003b8e <HAL_TIM_PWM_Start+0xfa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <HAL_TIM_PWM_Start+0x13c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_TIM_PWM_Start+0xfa>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <HAL_TIM_PWM_Start+0x140>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d111      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d010      	beq.n	8003bc2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	e007      	b.n	8003bc2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800

08003bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0ae      	b.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	f200 809f 	bhi.w	8003d44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c06:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003d45 	.word	0x08003d45
 8003c14:	08003d45 	.word	0x08003d45
 8003c18:	08003d45 	.word	0x08003d45
 8003c1c:	08003c81 	.word	0x08003c81
 8003c20:	08003d45 	.word	0x08003d45
 8003c24:	08003d45 	.word	0x08003d45
 8003c28:	08003d45 	.word	0x08003d45
 8003c2c:	08003cc3 	.word	0x08003cc3
 8003c30:	08003d45 	.word	0x08003d45
 8003c34:	08003d45 	.word	0x08003d45
 8003c38:	08003d45 	.word	0x08003d45
 8003c3c:	08003d03 	.word	0x08003d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f9b2 	bl	8003fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0208 	orr.w	r2, r2, #8
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	619a      	str	r2, [r3, #24]
      break;
 8003c7e:	e064      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f9f8 	bl	800407c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	021a      	lsls	r2, r3, #8
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	619a      	str	r2, [r3, #24]
      break;
 8003cc0:	e043      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fa41 	bl	8004150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0208 	orr.w	r2, r2, #8
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0204 	bic.w	r2, r2, #4
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
      break;
 8003d00:	e023      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fa8b 	bl	8004224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	021a      	lsls	r2, r3, #8
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	61da      	str	r2, [r3, #28]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
      break;
 8003d48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_ConfigClockSource+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0b4      	b.n	8003ee2 <HAL_TIM_ConfigClockSource+0x186>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d03e      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0xd4>
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	f200 8087 	bhi.w	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	f000 8086 	beq.w	8003ece <HAL_TIM_ConfigClockSource+0x172>
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d87f      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d01a      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0xa6>
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d87b      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d050      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x11a>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d877      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b50      	cmp	r3, #80	; 0x50
 8003dda:	d03c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xfa>
 8003ddc:	2b50      	cmp	r3, #80	; 0x50
 8003dde:	d873      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d058      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x13a>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d86f      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	d064      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b30      	cmp	r3, #48	; 0x30
 8003dee:	d86b      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d060      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d867      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05c      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d05a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	e062      	b.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	f000 facc 	bl	80043ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	609a      	str	r2, [r3, #8]
      break;
 8003e2e:	e04f      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e40:	f000 fab5 	bl	80043ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e52:	609a      	str	r2, [r3, #8]
      break;
 8003e54:	e03c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 fa2c 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2150      	movs	r1, #80	; 0x50
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fa83 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003e74:	e02c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 fa4a 	bl	800431c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2160      	movs	r1, #96	; 0x60
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa73 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003e94:	e01c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 fa0c 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2140      	movs	r1, #64	; 0x40
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa63 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003eb4:	e00c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 fa5a 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003ec6:	e003      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <TIM_Base_SetConfig+0xb8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x30>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x30>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <TIM_Base_SetConfig+0xbc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x30>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a25      	ldr	r2, [pc, #148]	; (8003fac <TIM_Base_SetConfig+0xc0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <TIM_Base_SetConfig+0xb8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0x62>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0x62>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <TIM_Base_SetConfig+0xbc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x62>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <TIM_Base_SetConfig+0xc0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <TIM_Base_SetConfig+0xb8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800

08003fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 0201 	bic.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 0302 	bic.w	r3, r3, #2
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <TIM_OC1_SetConfig+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10c      	bne.n	8004026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0308 	bic.w	r3, r3, #8
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <TIM_OC1_SetConfig+0xc8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00

0800407c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 0210 	bic.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0320 	bic.w	r3, r3, #32
 80040c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1d      	ldr	r2, [pc, #116]	; (800414c <TIM_OC2_SetConfig+0xd0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10d      	bne.n	80040f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <TIM_OC2_SetConfig+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d113      	bne.n	8004128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00

08004150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10d      	bne.n	80041ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d113      	bne.n	80041fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00

08004224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <TIM_OC4_SetConfig+0x98>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00

080042c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 030a 	bic.w	r3, r3, #10
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0210 	bic.w	r2, r3, #16
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	031b      	lsls	r3, r3, #12
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	f043 0307 	orr.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	021a      	lsls	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	609a      	str	r2, [r3, #8]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2201      	movs	r2, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004448:	2302      	movs	r3, #2
 800444a:	e046      	b.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d009      	beq.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a10      	ldr	r2, [pc, #64]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10c      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800

080044f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e03d      	b.n	8004588 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e042      	b.n	800462a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fd fb29 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2224      	movs	r2, #36	; 0x24
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f9ae 	bl	8004938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800460a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	d16d      	bne.n	800472e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Transmit+0x2c>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e066      	b.n	8004730 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	; 0x21
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004670:	f7fd fc96 	bl	8001fa0 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d108      	bne.n	800469e <HAL_UART_Transmit+0x6c>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e003      	b.n	80046a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a6:	e02a      	b.n	80046fe <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8d2 	bl	800485c <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e036      	b.n	8004730 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	3302      	adds	r3, #2
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e007      	b.n	80046f0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1cf      	bne.n	80046a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	2140      	movs	r1, #64	; 0x40
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f8a2 	bl	800485c <UART_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e006      	b.n	8004730 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b20      	cmp	r3, #32
 8004756:	d17c      	bne.n	8004852 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_UART_Receive+0x2c>
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e075      	b.n	8004854 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2222      	movs	r2, #34	; 0x22
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800477c:	f7fd fc10 	bl	8001fa0 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d108      	bne.n	80047aa <HAL_UART_Receive+0x72>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	e003      	b.n	80047b2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047b2:	e043      	b.n	800483c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	2120      	movs	r1, #32
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f84c 	bl	800485c <UART_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e042      	b.n	8004854 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10c      	bne.n	80047ee <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e01f      	b.n	800482e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d007      	beq.n	8004808 <HAL_UART_Receive+0xd0>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_UART_Receive+0xde>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e008      	b.n	8004828 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004822:	b2da      	uxtb	r2, r3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1b6      	bne.n	80047b4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b090      	sub	sp, #64	; 0x40
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486c:	e050      	b.n	8004910 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d04c      	beq.n	8004910 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <UART_WaitOnFlagUntilTimeout+0x30>
 800487c:	f7fd fb90 	bl	8001fa0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004888:	429a      	cmp	r2, r3
 800488a:	d241      	bcs.n	8004910 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ac:	637a      	str	r2, [r7, #52]	; 0x34
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	613b      	str	r3, [r7, #16]
   return(result);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048e0:	623a      	str	r2, [r7, #32]
 80048e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	69f9      	ldr	r1, [r7, #28]
 80048e6:	6a3a      	ldr	r2, [r7, #32]
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e00f      	b.n	8004930 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	429a      	cmp	r2, r3
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	429a      	cmp	r2, r3
 800492c:	d09f      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3740      	adds	r7, #64	; 0x40
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004972:	f023 030c 	bic.w	r3, r3, #12
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	430b      	orrs	r3, r1
 800497e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <UART_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049a0:	f7fe fe3c 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	e002      	b.n	80049ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fe24 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 80049ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <UART_SetConfig+0x118>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	0119      	lsls	r1, r3, #4
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <UART_SetConfig+0x118>)
 80049e6:	fba3 0302 	umull	r0, r3, r3, r2
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2064      	movs	r0, #100	; 0x64
 80049ee:	fb00 f303 	mul.w	r3, r0, r3
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	3332      	adds	r3, #50	; 0x32
 80049f8:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <UART_SetConfig+0x118>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a04:	4419      	add	r1, r3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009a      	lsls	r2, r3, #2
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <UART_SetConfig+0x118>)
 8004a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2064      	movs	r0, #100	; 0x64
 8004a26:	fb00 f303 	mul.w	r3, r0, r3
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	3332      	adds	r3, #50	; 0x32
 8004a30:	4a07      	ldr	r2, [pc, #28]	; (8004a50 <UART_SetConfig+0x118>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	f003 020f 	and.w	r2, r3, #15
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	440a      	add	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40013800 	.word	0x40013800
 8004a50:	51eb851f 	.word	0x51eb851f

08004a54 <__cvt>:
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	bfbb      	ittet	lt
 8004a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a62:	461f      	movlt	r7, r3
 8004a64:	2300      	movge	r3, #0
 8004a66:	232d      	movlt	r3, #45	; 0x2d
 8004a68:	b088      	sub	sp, #32
 8004a6a:	4614      	mov	r4, r2
 8004a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a70:	7013      	strb	r3, [r2, #0]
 8004a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a78:	f023 0820 	bic.w	r8, r3, #32
 8004a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a80:	d005      	beq.n	8004a8e <__cvt+0x3a>
 8004a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a86:	d100      	bne.n	8004a8a <__cvt+0x36>
 8004a88:	3501      	adds	r5, #1
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e000      	b.n	8004a90 <__cvt+0x3c>
 8004a8e:	2303      	movs	r3, #3
 8004a90:	aa07      	add	r2, sp, #28
 8004a92:	9204      	str	r2, [sp, #16]
 8004a94:	aa06      	add	r2, sp, #24
 8004a96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a9a:	e9cd 3500 	strd	r3, r5, [sp]
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	f000 fe79 	bl	8005798 <_dtoa_r>
 8004aa6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004aaa:	4606      	mov	r6, r0
 8004aac:	d102      	bne.n	8004ab4 <__cvt+0x60>
 8004aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ab0:	07db      	lsls	r3, r3, #31
 8004ab2:	d522      	bpl.n	8004afa <__cvt+0xa6>
 8004ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ab8:	eb06 0905 	add.w	r9, r6, r5
 8004abc:	d110      	bne.n	8004ae0 <__cvt+0x8c>
 8004abe:	7833      	ldrb	r3, [r6, #0]
 8004ac0:	2b30      	cmp	r3, #48	; 0x30
 8004ac2:	d10a      	bne.n	8004ada <__cvt+0x86>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4639      	mov	r1, r7
 8004acc:	f7fb ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8004ad0:	b918      	cbnz	r0, 8004ada <__cvt+0x86>
 8004ad2:	f1c5 0501 	rsb	r5, r5, #1
 8004ad6:	f8ca 5000 	str.w	r5, [sl]
 8004ada:	f8da 3000 	ldr.w	r3, [sl]
 8004ade:	4499      	add	r9, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f7fb ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8004aec:	b108      	cbz	r0, 8004af2 <__cvt+0x9e>
 8004aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8004af2:	2230      	movs	r2, #48	; 0x30
 8004af4:	9b07      	ldr	r3, [sp, #28]
 8004af6:	454b      	cmp	r3, r9
 8004af8:	d307      	bcc.n	8004b0a <__cvt+0xb6>
 8004afa:	4630      	mov	r0, r6
 8004afc:	9b07      	ldr	r3, [sp, #28]
 8004afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b00:	1b9b      	subs	r3, r3, r6
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	b008      	add	sp, #32
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	9107      	str	r1, [sp, #28]
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	e7f0      	b.n	8004af4 <__cvt+0xa0>

08004b12 <__exponent>:
 8004b12:	4603      	mov	r3, r0
 8004b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b16:	2900      	cmp	r1, #0
 8004b18:	f803 2b02 	strb.w	r2, [r3], #2
 8004b1c:	bfb6      	itet	lt
 8004b1e:	222d      	movlt	r2, #45	; 0x2d
 8004b20:	222b      	movge	r2, #43	; 0x2b
 8004b22:	4249      	neglt	r1, r1
 8004b24:	2909      	cmp	r1, #9
 8004b26:	7042      	strb	r2, [r0, #1]
 8004b28:	dd2a      	ble.n	8004b80 <__exponent+0x6e>
 8004b2a:	f10d 0207 	add.w	r2, sp, #7
 8004b2e:	4617      	mov	r7, r2
 8004b30:	260a      	movs	r6, #10
 8004b32:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b36:	4694      	mov	ip, r2
 8004b38:	fb06 1415 	mls	r4, r6, r5, r1
 8004b3c:	3430      	adds	r4, #48	; 0x30
 8004b3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b42:	460c      	mov	r4, r1
 8004b44:	2c63      	cmp	r4, #99	; 0x63
 8004b46:	4629      	mov	r1, r5
 8004b48:	f102 32ff 	add.w	r2, r2, #4294967295
 8004b4c:	dcf1      	bgt.n	8004b32 <__exponent+0x20>
 8004b4e:	3130      	adds	r1, #48	; 0x30
 8004b50:	f1ac 0402 	sub.w	r4, ip, #2
 8004b54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b58:	4622      	mov	r2, r4
 8004b5a:	1c41      	adds	r1, r0, #1
 8004b5c:	42ba      	cmp	r2, r7
 8004b5e:	d30a      	bcc.n	8004b76 <__exponent+0x64>
 8004b60:	f10d 0209 	add.w	r2, sp, #9
 8004b64:	eba2 020c 	sub.w	r2, r2, ip
 8004b68:	42bc      	cmp	r4, r7
 8004b6a:	bf88      	it	hi
 8004b6c:	2200      	movhi	r2, #0
 8004b6e:	4413      	add	r3, r2
 8004b70:	1a18      	subs	r0, r3, r0
 8004b72:	b003      	add	sp, #12
 8004b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004b7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004b7e:	e7ed      	b.n	8004b5c <__exponent+0x4a>
 8004b80:	2330      	movs	r3, #48	; 0x30
 8004b82:	3130      	adds	r1, #48	; 0x30
 8004b84:	7083      	strb	r3, [r0, #2]
 8004b86:	70c1      	strb	r1, [r0, #3]
 8004b88:	1d03      	adds	r3, r0, #4
 8004b8a:	e7f1      	b.n	8004b70 <__exponent+0x5e>

08004b8c <_printf_float>:
 8004b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b90:	b091      	sub	sp, #68	; 0x44
 8004b92:	460c      	mov	r4, r1
 8004b94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b98:	4616      	mov	r6, r2
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	f000 fced 	bl	800557c <_localeconv_r>
 8004ba2:	6803      	ldr	r3, [r0, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba8:	f7fb fad2 	bl	8000150 <strlen>
 8004bac:	2300      	movs	r3, #0
 8004bae:	930e      	str	r3, [sp, #56]	; 0x38
 8004bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb4:	900a      	str	r0, [sp, #40]	; 0x28
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	f103 0208 	add.w	r2, r3, #8
 8004bc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8004bc8:	f8c8 2000 	str.w	r2, [r8]
 8004bcc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004bd0:	4652      	mov	r2, sl
 8004bd2:	4643      	mov	r3, r8
 8004bd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bd8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	4650      	mov	r0, sl
 8004be4:	4b9c      	ldr	r3, [pc, #624]	; (8004e58 <_printf_float+0x2cc>)
 8004be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004be8:	f7fb ff10 	bl	8000a0c <__aeabi_dcmpun>
 8004bec:	bb70      	cbnz	r0, 8004c4c <_printf_float+0xc0>
 8004bee:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	4b98      	ldr	r3, [pc, #608]	; (8004e58 <_printf_float+0x2cc>)
 8004bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bf8:	f7fb feea 	bl	80009d0 <__aeabi_dcmple>
 8004bfc:	bb30      	cbnz	r0, 8004c4c <_printf_float+0xc0>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2300      	movs	r3, #0
 8004c02:	4650      	mov	r0, sl
 8004c04:	4641      	mov	r1, r8
 8004c06:	f7fb fed9 	bl	80009bc <__aeabi_dcmplt>
 8004c0a:	b110      	cbz	r0, 8004c12 <_printf_float+0x86>
 8004c0c:	232d      	movs	r3, #45	; 0x2d
 8004c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c12:	4a92      	ldr	r2, [pc, #584]	; (8004e5c <_printf_float+0x2d0>)
 8004c14:	4b92      	ldr	r3, [pc, #584]	; (8004e60 <_printf_float+0x2d4>)
 8004c16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c1a:	bf94      	ite	ls
 8004c1c:	4690      	movls	r8, r2
 8004c1e:	4698      	movhi	r8, r3
 8004c20:	2303      	movs	r3, #3
 8004c22:	f04f 0a00 	mov.w	sl, #0
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	f02b 0304 	bic.w	r3, fp, #4
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	4633      	mov	r3, r6
 8004c30:	4621      	mov	r1, r4
 8004c32:	4628      	mov	r0, r5
 8004c34:	9700      	str	r7, [sp, #0]
 8004c36:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c38:	f000 f9d6 	bl	8004fe8 <_printf_common>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f040 8090 	bne.w	8004d62 <_printf_float+0x1d6>
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	b011      	add	sp, #68	; 0x44
 8004c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4c:	4652      	mov	r2, sl
 8004c4e:	4643      	mov	r3, r8
 8004c50:	4650      	mov	r0, sl
 8004c52:	4641      	mov	r1, r8
 8004c54:	f7fb feda 	bl	8000a0c <__aeabi_dcmpun>
 8004c58:	b148      	cbz	r0, 8004c6e <_printf_float+0xe2>
 8004c5a:	f1b8 0f00 	cmp.w	r8, #0
 8004c5e:	bfb8      	it	lt
 8004c60:	232d      	movlt	r3, #45	; 0x2d
 8004c62:	4a80      	ldr	r2, [pc, #512]	; (8004e64 <_printf_float+0x2d8>)
 8004c64:	bfb8      	it	lt
 8004c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c6a:	4b7f      	ldr	r3, [pc, #508]	; (8004e68 <_printf_float+0x2dc>)
 8004c6c:	e7d3      	b.n	8004c16 <_printf_float+0x8a>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	d142      	bne.n	8004cfe <_printf_float+0x172>
 8004c78:	2306      	movs	r3, #6
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	9206      	str	r2, [sp, #24]
 8004c80:	aa0e      	add	r2, sp, #56	; 0x38
 8004c82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c86:	aa0d      	add	r2, sp, #52	; 0x34
 8004c88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c8c:	9203      	str	r2, [sp, #12]
 8004c8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	4643      	mov	r3, r8
 8004ca2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ca4:	f7ff fed6 	bl	8004a54 <__cvt>
 8004ca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004caa:	4680      	mov	r8, r0
 8004cac:	2947      	cmp	r1, #71	; 0x47
 8004cae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cb0:	d108      	bne.n	8004cc4 <_printf_float+0x138>
 8004cb2:	1cc8      	adds	r0, r1, #3
 8004cb4:	db02      	blt.n	8004cbc <_printf_float+0x130>
 8004cb6:	6863      	ldr	r3, [r4, #4]
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	dd40      	ble.n	8004d3e <_printf_float+0x1b2>
 8004cbc:	f1a9 0902 	sub.w	r9, r9, #2
 8004cc0:	fa5f f989 	uxtb.w	r9, r9
 8004cc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cc8:	d81f      	bhi.n	8004d0a <_printf_float+0x17e>
 8004cca:	464a      	mov	r2, r9
 8004ccc:	3901      	subs	r1, #1
 8004cce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8004cd4:	f7ff ff1d 	bl	8004b12 <__exponent>
 8004cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cda:	4682      	mov	sl, r0
 8004cdc:	1813      	adds	r3, r2, r0
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	dc02      	bgt.n	8004cea <_printf_float+0x15e>
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	07d2      	lsls	r2, r2, #31
 8004ce8:	d501      	bpl.n	8004cee <_printf_float+0x162>
 8004cea:	3301      	adds	r3, #1
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d09b      	beq.n	8004c2e <_printf_float+0xa2>
 8004cf6:	232d      	movs	r3, #45	; 0x2d
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfc:	e797      	b.n	8004c2e <_printf_float+0xa2>
 8004cfe:	2947      	cmp	r1, #71	; 0x47
 8004d00:	d1bc      	bne.n	8004c7c <_printf_float+0xf0>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ba      	bne.n	8004c7c <_printf_float+0xf0>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e7b7      	b.n	8004c7a <_printf_float+0xee>
 8004d0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d0e:	d118      	bne.n	8004d42 <_printf_float+0x1b6>
 8004d10:	2900      	cmp	r1, #0
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	dd0b      	ble.n	8004d2e <_printf_float+0x1a2>
 8004d16:	6121      	str	r1, [r4, #16]
 8004d18:	b913      	cbnz	r3, 8004d20 <_printf_float+0x194>
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	07d0      	lsls	r0, r2, #31
 8004d1e:	d502      	bpl.n	8004d26 <_printf_float+0x19a>
 8004d20:	3301      	adds	r3, #1
 8004d22:	440b      	add	r3, r1
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	f04f 0a00 	mov.w	sl, #0
 8004d2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d2c:	e7df      	b.n	8004cee <_printf_float+0x162>
 8004d2e:	b913      	cbnz	r3, 8004d36 <_printf_float+0x1aa>
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	07d2      	lsls	r2, r2, #31
 8004d34:	d501      	bpl.n	8004d3a <_printf_float+0x1ae>
 8004d36:	3302      	adds	r3, #2
 8004d38:	e7f4      	b.n	8004d24 <_printf_float+0x198>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e7f2      	b.n	8004d24 <_printf_float+0x198>
 8004d3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d44:	4299      	cmp	r1, r3
 8004d46:	db05      	blt.n	8004d54 <_printf_float+0x1c8>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	6121      	str	r1, [r4, #16]
 8004d4c:	07d8      	lsls	r0, r3, #31
 8004d4e:	d5ea      	bpl.n	8004d26 <_printf_float+0x19a>
 8004d50:	1c4b      	adds	r3, r1, #1
 8004d52:	e7e7      	b.n	8004d24 <_printf_float+0x198>
 8004d54:	2900      	cmp	r1, #0
 8004d56:	bfcc      	ite	gt
 8004d58:	2201      	movgt	r2, #1
 8004d5a:	f1c1 0202 	rsble	r2, r1, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	e7e0      	b.n	8004d24 <_printf_float+0x198>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	055a      	lsls	r2, r3, #21
 8004d66:	d407      	bmi.n	8004d78 <_printf_float+0x1ec>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	d12b      	bne.n	8004dce <_printf_float+0x242>
 8004d76:	e764      	b.n	8004c42 <_printf_float+0xb6>
 8004d78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d7c:	f240 80dd 	bls.w	8004f3a <_printf_float+0x3ae>
 8004d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d84:	2200      	movs	r2, #0
 8004d86:	2300      	movs	r3, #0
 8004d88:	f7fb fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d033      	beq.n	8004df8 <_printf_float+0x26c>
 8004d90:	2301      	movs	r3, #1
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	4a35      	ldr	r2, [pc, #212]	; (8004e6c <_printf_float+0x2e0>)
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f43f af51 	beq.w	8004c42 <_printf_float+0xb6>
 8004da0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004da4:	429a      	cmp	r2, r3
 8004da6:	db02      	blt.n	8004dae <_printf_float+0x222>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	07d8      	lsls	r0, r3, #31
 8004dac:	d50f      	bpl.n	8004dce <_printf_float+0x242>
 8004dae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f af42 	beq.w	8004c42 <_printf_float+0xb6>
 8004dbe:	f04f 0800 	mov.w	r8, #0
 8004dc2:	f104 091a 	add.w	r9, r4, #26
 8004dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	4543      	cmp	r3, r8
 8004dcc:	dc09      	bgt.n	8004de2 <_printf_float+0x256>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	079b      	lsls	r3, r3, #30
 8004dd2:	f100 8104 	bmi.w	8004fde <_printf_float+0x452>
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dda:	4298      	cmp	r0, r3
 8004ddc:	bfb8      	it	lt
 8004dde:	4618      	movlt	r0, r3
 8004de0:	e731      	b.n	8004c46 <_printf_float+0xba>
 8004de2:	2301      	movs	r3, #1
 8004de4:	464a      	mov	r2, r9
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f af28 	beq.w	8004c42 <_printf_float+0xb6>
 8004df2:	f108 0801 	add.w	r8, r8, #1
 8004df6:	e7e6      	b.n	8004dc6 <_printf_float+0x23a>
 8004df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dc38      	bgt.n	8004e70 <_printf_float+0x2e4>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4631      	mov	r1, r6
 8004e02:	4628      	mov	r0, r5
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <_printf_float+0x2e0>)
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f af1a 	beq.w	8004c42 <_printf_float+0xb6>
 8004e0e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004e12:	4313      	orrs	r3, r2
 8004e14:	d102      	bne.n	8004e1c <_printf_float+0x290>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	07d9      	lsls	r1, r3, #31
 8004e1a:	d5d8      	bpl.n	8004dce <_printf_float+0x242>
 8004e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e20:	4631      	mov	r1, r6
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	f43f af0b 	beq.w	8004c42 <_printf_float+0xb6>
 8004e2c:	f04f 0900 	mov.w	r9, #0
 8004e30:	f104 0a1a 	add.w	sl, r4, #26
 8004e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e36:	425b      	negs	r3, r3
 8004e38:	454b      	cmp	r3, r9
 8004e3a:	dc01      	bgt.n	8004e40 <_printf_float+0x2b4>
 8004e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e3e:	e794      	b.n	8004d6a <_printf_float+0x1de>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4652      	mov	r2, sl
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f aef9 	beq.w	8004c42 <_printf_float+0xb6>
 8004e50:	f109 0901 	add.w	r9, r9, #1
 8004e54:	e7ee      	b.n	8004e34 <_printf_float+0x2a8>
 8004e56:	bf00      	nop
 8004e58:	7fefffff 	.word	0x7fefffff
 8004e5c:	08007842 	.word	0x08007842
 8004e60:	08007846 	.word	0x08007846
 8004e64:	0800784a 	.word	0x0800784a
 8004e68:	0800784e 	.word	0x0800784e
 8004e6c:	08007852 	.word	0x08007852
 8004e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e74:	429a      	cmp	r2, r3
 8004e76:	bfa8      	it	ge
 8004e78:	461a      	movge	r2, r3
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	4691      	mov	r9, r2
 8004e7e:	dc37      	bgt.n	8004ef0 <_printf_float+0x364>
 8004e80:	f04f 0b00 	mov.w	fp, #0
 8004e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e88:	f104 021a 	add.w	r2, r4, #26
 8004e8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e90:	ebaa 0309 	sub.w	r3, sl, r9
 8004e94:	455b      	cmp	r3, fp
 8004e96:	dc33      	bgt.n	8004f00 <_printf_float+0x374>
 8004e98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	db3b      	blt.n	8004f18 <_printf_float+0x38c>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	07da      	lsls	r2, r3, #31
 8004ea4:	d438      	bmi.n	8004f18 <_printf_float+0x38c>
 8004ea6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004eaa:	eba2 0903 	sub.w	r9, r2, r3
 8004eae:	eba2 020a 	sub.w	r2, r2, sl
 8004eb2:	4591      	cmp	r9, r2
 8004eb4:	bfa8      	it	ge
 8004eb6:	4691      	movge	r9, r2
 8004eb8:	f1b9 0f00 	cmp.w	r9, #0
 8004ebc:	dc34      	bgt.n	8004f28 <_printf_float+0x39c>
 8004ebe:	f04f 0800 	mov.w	r8, #0
 8004ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ec6:	f104 0a1a 	add.w	sl, r4, #26
 8004eca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	eba3 0309 	sub.w	r3, r3, r9
 8004ed4:	4543      	cmp	r3, r8
 8004ed6:	f77f af7a 	ble.w	8004dce <_printf_float+0x242>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4652      	mov	r2, sl
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b8      	blx	r7
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	f43f aeac 	beq.w	8004c42 <_printf_float+0xb6>
 8004eea:	f108 0801 	add.w	r8, r8, #1
 8004eee:	e7ec      	b.n	8004eca <_printf_float+0x33e>
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	d1c0      	bne.n	8004e80 <_printf_float+0x2f4>
 8004efe:	e6a0      	b.n	8004c42 <_printf_float+0xb6>
 8004f00:	2301      	movs	r3, #1
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f08:	47b8      	blx	r7
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	f43f ae99 	beq.w	8004c42 <_printf_float+0xb6>
 8004f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f12:	f10b 0b01 	add.w	fp, fp, #1
 8004f16:	e7b9      	b.n	8004e8c <_printf_float+0x300>
 8004f18:	4631      	mov	r1, r6
 8004f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	d1bf      	bne.n	8004ea6 <_printf_float+0x31a>
 8004f26:	e68c      	b.n	8004c42 <_printf_float+0xb6>
 8004f28:	464b      	mov	r3, r9
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	eb08 020a 	add.w	r2, r8, sl
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	d1c2      	bne.n	8004ebe <_printf_float+0x332>
 8004f38:	e683      	b.n	8004c42 <_printf_float+0xb6>
 8004f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f3c:	2a01      	cmp	r2, #1
 8004f3e:	dc01      	bgt.n	8004f44 <_printf_float+0x3b8>
 8004f40:	07db      	lsls	r3, r3, #31
 8004f42:	d539      	bpl.n	8004fb8 <_printf_float+0x42c>
 8004f44:	2301      	movs	r3, #1
 8004f46:	4642      	mov	r2, r8
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f ae77 	beq.w	8004c42 <_printf_float+0xb6>
 8004f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b8      	blx	r7
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f43f ae6f 	beq.w	8004c42 <_printf_float+0xb6>
 8004f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004f70:	f7fb fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004f74:	b9d8      	cbnz	r0, 8004fae <_printf_float+0x422>
 8004f76:	f109 33ff 	add.w	r3, r9, #4294967295
 8004f7a:	f108 0201 	add.w	r2, r8, #1
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	d10e      	bne.n	8004fa6 <_printf_float+0x41a>
 8004f88:	e65b      	b.n	8004c42 <_printf_float+0xb6>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	464a      	mov	r2, r9
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f ae54 	beq.w	8004c42 <_printf_float+0xb6>
 8004f9a:	f108 0801 	add.w	r8, r8, #1
 8004f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4543      	cmp	r3, r8
 8004fa4:	dcf1      	bgt.n	8004f8a <_printf_float+0x3fe>
 8004fa6:	4653      	mov	r3, sl
 8004fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fac:	e6de      	b.n	8004d6c <_printf_float+0x1e0>
 8004fae:	f04f 0800 	mov.w	r8, #0
 8004fb2:	f104 091a 	add.w	r9, r4, #26
 8004fb6:	e7f2      	b.n	8004f9e <_printf_float+0x412>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4642      	mov	r2, r8
 8004fbc:	e7df      	b.n	8004f7e <_printf_float+0x3f2>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	464a      	mov	r2, r9
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b8      	blx	r7
 8004fc8:	3001      	adds	r0, #1
 8004fca:	f43f ae3a 	beq.w	8004c42 <_printf_float+0xb6>
 8004fce:	f108 0801 	add.w	r8, r8, #1
 8004fd2:	68e3      	ldr	r3, [r4, #12]
 8004fd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fd6:	1a5b      	subs	r3, r3, r1
 8004fd8:	4543      	cmp	r3, r8
 8004fda:	dcf0      	bgt.n	8004fbe <_printf_float+0x432>
 8004fdc:	e6fb      	b.n	8004dd6 <_printf_float+0x24a>
 8004fde:	f04f 0800 	mov.w	r8, #0
 8004fe2:	f104 0919 	add.w	r9, r4, #25
 8004fe6:	e7f4      	b.n	8004fd2 <_printf_float+0x446>

08004fe8 <_printf_common>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	4616      	mov	r6, r2
 8004fee:	4699      	mov	r9, r3
 8004ff0:	688a      	ldr	r2, [r1, #8]
 8004ff2:	690b      	ldr	r3, [r1, #16]
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bfb8      	it	lt
 8004ffa:	4613      	movlt	r3, r2
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005002:	460c      	mov	r4, r1
 8005004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005008:	b10a      	cbz	r2, 800500e <_printf_common+0x26>
 800500a:	3301      	adds	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0699      	lsls	r1, r3, #26
 8005012:	bf42      	ittt	mi
 8005014:	6833      	ldrmi	r3, [r6, #0]
 8005016:	3302      	addmi	r3, #2
 8005018:	6033      	strmi	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	f015 0506 	ands.w	r5, r5, #6
 8005020:	d106      	bne.n	8005030 <_printf_common+0x48>
 8005022:	f104 0a19 	add.w	sl, r4, #25
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	6832      	ldr	r2, [r6, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	42ab      	cmp	r3, r5
 800502e:	dc2b      	bgt.n	8005088 <_printf_common+0xa0>
 8005030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005034:	1e13      	subs	r3, r2, #0
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	bf18      	it	ne
 800503a:	2301      	movne	r3, #1
 800503c:	0692      	lsls	r2, r2, #26
 800503e:	d430      	bmi.n	80050a2 <_printf_common+0xba>
 8005040:	4649      	mov	r1, r9
 8005042:	4638      	mov	r0, r7
 8005044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005048:	47c0      	blx	r8
 800504a:	3001      	adds	r0, #1
 800504c:	d023      	beq.n	8005096 <_printf_common+0xae>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf14      	ite	ne
 800505a:	2500      	movne	r5, #0
 800505c:	6833      	ldreq	r3, [r6, #0]
 800505e:	f04f 0600 	mov.w	r6, #0
 8005062:	bf08      	it	eq
 8005064:	68e5      	ldreq	r5, [r4, #12]
 8005066:	f104 041a 	add.w	r4, r4, #26
 800506a:	bf08      	it	eq
 800506c:	1aed      	subeq	r5, r5, r3
 800506e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005072:	bf08      	it	eq
 8005074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005078:	4293      	cmp	r3, r2
 800507a:	bfc4      	itt	gt
 800507c:	1a9b      	subgt	r3, r3, r2
 800507e:	18ed      	addgt	r5, r5, r3
 8005080:	42b5      	cmp	r5, r6
 8005082:	d11a      	bne.n	80050ba <_printf_common+0xd2>
 8005084:	2000      	movs	r0, #0
 8005086:	e008      	b.n	800509a <_printf_common+0xb2>
 8005088:	2301      	movs	r3, #1
 800508a:	4652      	mov	r2, sl
 800508c:	4649      	mov	r1, r9
 800508e:	4638      	mov	r0, r7
 8005090:	47c0      	blx	r8
 8005092:	3001      	adds	r0, #1
 8005094:	d103      	bne.n	800509e <_printf_common+0xb6>
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	3501      	adds	r5, #1
 80050a0:	e7c1      	b.n	8005026 <_printf_common+0x3e>
 80050a2:	2030      	movs	r0, #48	; 0x30
 80050a4:	18e1      	adds	r1, r4, r3
 80050a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050b0:	4422      	add	r2, r4
 80050b2:	3302      	adds	r3, #2
 80050b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b8:	e7c2      	b.n	8005040 <_printf_common+0x58>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4622      	mov	r2, r4
 80050be:	4649      	mov	r1, r9
 80050c0:	4638      	mov	r0, r7
 80050c2:	47c0      	blx	r8
 80050c4:	3001      	adds	r0, #1
 80050c6:	d0e6      	beq.n	8005096 <_printf_common+0xae>
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7d9      	b.n	8005080 <_printf_common+0x98>

080050cc <_printf_i>:
 80050cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	7e0f      	ldrb	r7, [r1, #24]
 80050d2:	4691      	mov	r9, r2
 80050d4:	2f78      	cmp	r7, #120	; 0x78
 80050d6:	4680      	mov	r8, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	469a      	mov	sl, r3
 80050dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050e2:	d807      	bhi.n	80050f4 <_printf_i+0x28>
 80050e4:	2f62      	cmp	r7, #98	; 0x62
 80050e6:	d80a      	bhi.n	80050fe <_printf_i+0x32>
 80050e8:	2f00      	cmp	r7, #0
 80050ea:	f000 80d5 	beq.w	8005298 <_printf_i+0x1cc>
 80050ee:	2f58      	cmp	r7, #88	; 0x58
 80050f0:	f000 80c1 	beq.w	8005276 <_printf_i+0x1aa>
 80050f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050fc:	e03a      	b.n	8005174 <_printf_i+0xa8>
 80050fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005102:	2b15      	cmp	r3, #21
 8005104:	d8f6      	bhi.n	80050f4 <_printf_i+0x28>
 8005106:	a101      	add	r1, pc, #4	; (adr r1, 800510c <_printf_i+0x40>)
 8005108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800510c:	08005165 	.word	0x08005165
 8005110:	08005179 	.word	0x08005179
 8005114:	080050f5 	.word	0x080050f5
 8005118:	080050f5 	.word	0x080050f5
 800511c:	080050f5 	.word	0x080050f5
 8005120:	080050f5 	.word	0x080050f5
 8005124:	08005179 	.word	0x08005179
 8005128:	080050f5 	.word	0x080050f5
 800512c:	080050f5 	.word	0x080050f5
 8005130:	080050f5 	.word	0x080050f5
 8005134:	080050f5 	.word	0x080050f5
 8005138:	0800527f 	.word	0x0800527f
 800513c:	080051a5 	.word	0x080051a5
 8005140:	08005239 	.word	0x08005239
 8005144:	080050f5 	.word	0x080050f5
 8005148:	080050f5 	.word	0x080050f5
 800514c:	080052a1 	.word	0x080052a1
 8005150:	080050f5 	.word	0x080050f5
 8005154:	080051a5 	.word	0x080051a5
 8005158:	080050f5 	.word	0x080050f5
 800515c:	080050f5 	.word	0x080050f5
 8005160:	08005241 	.word	0x08005241
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	1d1a      	adds	r2, r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	602a      	str	r2, [r5, #0]
 800516c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005174:	2301      	movs	r3, #1
 8005176:	e0a0      	b.n	80052ba <_printf_i+0x1ee>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	0607      	lsls	r7, r0, #24
 800517e:	f103 0104 	add.w	r1, r3, #4
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	d501      	bpl.n	800518a <_printf_i+0xbe>
 8005186:	681e      	ldr	r6, [r3, #0]
 8005188:	e003      	b.n	8005192 <_printf_i+0xc6>
 800518a:	0646      	lsls	r6, r0, #25
 800518c:	d5fb      	bpl.n	8005186 <_printf_i+0xba>
 800518e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005192:	2e00      	cmp	r6, #0
 8005194:	da03      	bge.n	800519e <_printf_i+0xd2>
 8005196:	232d      	movs	r3, #45	; 0x2d
 8005198:	4276      	negs	r6, r6
 800519a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519e:	230a      	movs	r3, #10
 80051a0:	4859      	ldr	r0, [pc, #356]	; (8005308 <_printf_i+0x23c>)
 80051a2:	e012      	b.n	80051ca <_printf_i+0xfe>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	1d19      	adds	r1, r3, #4
 80051aa:	6029      	str	r1, [r5, #0]
 80051ac:	0605      	lsls	r5, r0, #24
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0xe8>
 80051b0:	681e      	ldr	r6, [r3, #0]
 80051b2:	e002      	b.n	80051ba <_printf_i+0xee>
 80051b4:	0641      	lsls	r1, r0, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0xe4>
 80051b8:	881e      	ldrh	r6, [r3, #0]
 80051ba:	2f6f      	cmp	r7, #111	; 0x6f
 80051bc:	bf0c      	ite	eq
 80051be:	2308      	moveq	r3, #8
 80051c0:	230a      	movne	r3, #10
 80051c2:	4851      	ldr	r0, [pc, #324]	; (8005308 <_printf_i+0x23c>)
 80051c4:	2100      	movs	r1, #0
 80051c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ca:	6865      	ldr	r5, [r4, #4]
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	bfa8      	it	ge
 80051d0:	6821      	ldrge	r1, [r4, #0]
 80051d2:	60a5      	str	r5, [r4, #8]
 80051d4:	bfa4      	itt	ge
 80051d6:	f021 0104 	bicge.w	r1, r1, #4
 80051da:	6021      	strge	r1, [r4, #0]
 80051dc:	b90e      	cbnz	r6, 80051e2 <_printf_i+0x116>
 80051de:	2d00      	cmp	r5, #0
 80051e0:	d04b      	beq.n	800527a <_printf_i+0x1ae>
 80051e2:	4615      	mov	r5, r2
 80051e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80051e8:	fb03 6711 	mls	r7, r3, r1, r6
 80051ec:	5dc7      	ldrb	r7, [r0, r7]
 80051ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051f2:	4637      	mov	r7, r6
 80051f4:	42bb      	cmp	r3, r7
 80051f6:	460e      	mov	r6, r1
 80051f8:	d9f4      	bls.n	80051e4 <_printf_i+0x118>
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d10b      	bne.n	8005216 <_printf_i+0x14a>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	07de      	lsls	r6, r3, #31
 8005202:	d508      	bpl.n	8005216 <_printf_i+0x14a>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	6861      	ldr	r1, [r4, #4]
 8005208:	4299      	cmp	r1, r3
 800520a:	bfde      	ittt	le
 800520c:	2330      	movle	r3, #48	; 0x30
 800520e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005212:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005216:	1b52      	subs	r2, r2, r5
 8005218:	6122      	str	r2, [r4, #16]
 800521a:	464b      	mov	r3, r9
 800521c:	4621      	mov	r1, r4
 800521e:	4640      	mov	r0, r8
 8005220:	f8cd a000 	str.w	sl, [sp]
 8005224:	aa03      	add	r2, sp, #12
 8005226:	f7ff fedf 	bl	8004fe8 <_printf_common>
 800522a:	3001      	adds	r0, #1
 800522c:	d14a      	bne.n	80052c4 <_printf_i+0x1f8>
 800522e:	f04f 30ff 	mov.w	r0, #4294967295
 8005232:	b004      	add	sp, #16
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	f043 0320 	orr.w	r3, r3, #32
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	2778      	movs	r7, #120	; 0x78
 8005242:	4832      	ldr	r0, [pc, #200]	; (800530c <_printf_i+0x240>)
 8005244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	6829      	ldr	r1, [r5, #0]
 800524c:	061f      	lsls	r7, r3, #24
 800524e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005252:	d402      	bmi.n	800525a <_printf_i+0x18e>
 8005254:	065f      	lsls	r7, r3, #25
 8005256:	bf48      	it	mi
 8005258:	b2b6      	uxthmi	r6, r6
 800525a:	07df      	lsls	r7, r3, #31
 800525c:	bf48      	it	mi
 800525e:	f043 0320 	orrmi.w	r3, r3, #32
 8005262:	6029      	str	r1, [r5, #0]
 8005264:	bf48      	it	mi
 8005266:	6023      	strmi	r3, [r4, #0]
 8005268:	b91e      	cbnz	r6, 8005272 <_printf_i+0x1a6>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f023 0320 	bic.w	r3, r3, #32
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	2310      	movs	r3, #16
 8005274:	e7a6      	b.n	80051c4 <_printf_i+0xf8>
 8005276:	4824      	ldr	r0, [pc, #144]	; (8005308 <_printf_i+0x23c>)
 8005278:	e7e4      	b.n	8005244 <_printf_i+0x178>
 800527a:	4615      	mov	r5, r2
 800527c:	e7bd      	b.n	80051fa <_printf_i+0x12e>
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	6826      	ldr	r6, [r4, #0]
 8005282:	1d18      	adds	r0, r3, #4
 8005284:	6961      	ldr	r1, [r4, #20]
 8005286:	6028      	str	r0, [r5, #0]
 8005288:	0635      	lsls	r5, r6, #24
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	d501      	bpl.n	8005292 <_printf_i+0x1c6>
 800528e:	6019      	str	r1, [r3, #0]
 8005290:	e002      	b.n	8005298 <_printf_i+0x1cc>
 8005292:	0670      	lsls	r0, r6, #25
 8005294:	d5fb      	bpl.n	800528e <_printf_i+0x1c2>
 8005296:	8019      	strh	r1, [r3, #0]
 8005298:	2300      	movs	r3, #0
 800529a:	4615      	mov	r5, r2
 800529c:	6123      	str	r3, [r4, #16]
 800529e:	e7bc      	b.n	800521a <_printf_i+0x14e>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	2100      	movs	r1, #0
 80052a4:	1d1a      	adds	r2, r3, #4
 80052a6:	602a      	str	r2, [r5, #0]
 80052a8:	681d      	ldr	r5, [r3, #0]
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 f9dc 	bl	800566a <memchr>
 80052b2:	b108      	cbz	r0, 80052b8 <_printf_i+0x1ec>
 80052b4:	1b40      	subs	r0, r0, r5
 80052b6:	6060      	str	r0, [r4, #4]
 80052b8:	6863      	ldr	r3, [r4, #4]
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	2300      	movs	r3, #0
 80052be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c2:	e7aa      	b.n	800521a <_printf_i+0x14e>
 80052c4:	462a      	mov	r2, r5
 80052c6:	4649      	mov	r1, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	47d0      	blx	sl
 80052ce:	3001      	adds	r0, #1
 80052d0:	d0ad      	beq.n	800522e <_printf_i+0x162>
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	079b      	lsls	r3, r3, #30
 80052d6:	d413      	bmi.n	8005300 <_printf_i+0x234>
 80052d8:	68e0      	ldr	r0, [r4, #12]
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	4298      	cmp	r0, r3
 80052de:	bfb8      	it	lt
 80052e0:	4618      	movlt	r0, r3
 80052e2:	e7a6      	b.n	8005232 <_printf_i+0x166>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4632      	mov	r2, r6
 80052e8:	4649      	mov	r1, r9
 80052ea:	4640      	mov	r0, r8
 80052ec:	47d0      	blx	sl
 80052ee:	3001      	adds	r0, #1
 80052f0:	d09d      	beq.n	800522e <_printf_i+0x162>
 80052f2:	3501      	adds	r5, #1
 80052f4:	68e3      	ldr	r3, [r4, #12]
 80052f6:	9903      	ldr	r1, [sp, #12]
 80052f8:	1a5b      	subs	r3, r3, r1
 80052fa:	42ab      	cmp	r3, r5
 80052fc:	dcf2      	bgt.n	80052e4 <_printf_i+0x218>
 80052fe:	e7eb      	b.n	80052d8 <_printf_i+0x20c>
 8005300:	2500      	movs	r5, #0
 8005302:	f104 0619 	add.w	r6, r4, #25
 8005306:	e7f5      	b.n	80052f4 <_printf_i+0x228>
 8005308:	08007854 	.word	0x08007854
 800530c:	08007865 	.word	0x08007865

08005310 <std>:
 8005310:	2300      	movs	r3, #0
 8005312:	b510      	push	{r4, lr}
 8005314:	4604      	mov	r4, r0
 8005316:	e9c0 3300 	strd	r3, r3, [r0]
 800531a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800531e:	6083      	str	r3, [r0, #8]
 8005320:	8181      	strh	r1, [r0, #12]
 8005322:	6643      	str	r3, [r0, #100]	; 0x64
 8005324:	81c2      	strh	r2, [r0, #14]
 8005326:	6183      	str	r3, [r0, #24]
 8005328:	4619      	mov	r1, r3
 800532a:	2208      	movs	r2, #8
 800532c:	305c      	adds	r0, #92	; 0x5c
 800532e:	f000 f91c 	bl	800556a <memset>
 8005332:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <std+0x58>)
 8005334:	6224      	str	r4, [r4, #32]
 8005336:	6263      	str	r3, [r4, #36]	; 0x24
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <std+0x5c>)
 800533a:	62a3      	str	r3, [r4, #40]	; 0x28
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <std+0x60>)
 800533e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <std+0x64>)
 8005342:	6323      	str	r3, [r4, #48]	; 0x30
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <std+0x68>)
 8005346:	429c      	cmp	r4, r3
 8005348:	d006      	beq.n	8005358 <std+0x48>
 800534a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800534e:	4294      	cmp	r4, r2
 8005350:	d002      	beq.n	8005358 <std+0x48>
 8005352:	33d0      	adds	r3, #208	; 0xd0
 8005354:	429c      	cmp	r4, r3
 8005356:	d105      	bne.n	8005364 <std+0x54>
 8005358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005360:	f000 b980 	b.w	8005664 <__retarget_lock_init_recursive>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	bf00      	nop
 8005368:	080054e5 	.word	0x080054e5
 800536c:	08005507 	.word	0x08005507
 8005370:	0800553f 	.word	0x0800553f
 8005374:	08005563 	.word	0x08005563
 8005378:	2000034c 	.word	0x2000034c

0800537c <stdio_exit_handler>:
 800537c:	4a02      	ldr	r2, [pc, #8]	; (8005388 <stdio_exit_handler+0xc>)
 800537e:	4903      	ldr	r1, [pc, #12]	; (800538c <stdio_exit_handler+0x10>)
 8005380:	4803      	ldr	r0, [pc, #12]	; (8005390 <stdio_exit_handler+0x14>)
 8005382:	f000 b869 	b.w	8005458 <_fwalk_sglue>
 8005386:	bf00      	nop
 8005388:	20000018 	.word	0x20000018
 800538c:	08006ffd 	.word	0x08006ffd
 8005390:	20000024 	.word	0x20000024

08005394 <cleanup_stdio>:
 8005394:	6841      	ldr	r1, [r0, #4]
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <cleanup_stdio+0x34>)
 8005398:	b510      	push	{r4, lr}
 800539a:	4299      	cmp	r1, r3
 800539c:	4604      	mov	r4, r0
 800539e:	d001      	beq.n	80053a4 <cleanup_stdio+0x10>
 80053a0:	f001 fe2c 	bl	8006ffc <_fflush_r>
 80053a4:	68a1      	ldr	r1, [r4, #8]
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <cleanup_stdio+0x38>)
 80053a8:	4299      	cmp	r1, r3
 80053aa:	d002      	beq.n	80053b2 <cleanup_stdio+0x1e>
 80053ac:	4620      	mov	r0, r4
 80053ae:	f001 fe25 	bl	8006ffc <_fflush_r>
 80053b2:	68e1      	ldr	r1, [r4, #12]
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <cleanup_stdio+0x3c>)
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d004      	beq.n	80053c4 <cleanup_stdio+0x30>
 80053ba:	4620      	mov	r0, r4
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	f001 be1c 	b.w	8006ffc <_fflush_r>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	2000034c 	.word	0x2000034c
 80053cc:	200003b4 	.word	0x200003b4
 80053d0:	2000041c 	.word	0x2000041c

080053d4 <global_stdio_init.part.0>:
 80053d4:	b510      	push	{r4, lr}
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <global_stdio_init.part.0+0x30>)
 80053d8:	4c0b      	ldr	r4, [pc, #44]	; (8005408 <global_stdio_init.part.0+0x34>)
 80053da:	4a0c      	ldr	r2, [pc, #48]	; (800540c <global_stdio_init.part.0+0x38>)
 80053dc:	4620      	mov	r0, r4
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	2104      	movs	r1, #4
 80053e2:	2200      	movs	r2, #0
 80053e4:	f7ff ff94 	bl	8005310 <std>
 80053e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053ec:	2201      	movs	r2, #1
 80053ee:	2109      	movs	r1, #9
 80053f0:	f7ff ff8e 	bl	8005310 <std>
 80053f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053f8:	2202      	movs	r2, #2
 80053fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fe:	2112      	movs	r1, #18
 8005400:	f7ff bf86 	b.w	8005310 <std>
 8005404:	20000484 	.word	0x20000484
 8005408:	2000034c 	.word	0x2000034c
 800540c:	0800537d 	.word	0x0800537d

08005410 <__sfp_lock_acquire>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__sfp_lock_acquire+0x8>)
 8005412:	f000 b928 	b.w	8005666 <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	2000048d 	.word	0x2000048d

0800541c <__sfp_lock_release>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__sfp_lock_release+0x8>)
 800541e:	f000 b923 	b.w	8005668 <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	2000048d 	.word	0x2000048d

08005428 <__sinit>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4604      	mov	r4, r0
 800542c:	f7ff fff0 	bl	8005410 <__sfp_lock_acquire>
 8005430:	6a23      	ldr	r3, [r4, #32]
 8005432:	b11b      	cbz	r3, 800543c <__sinit+0x14>
 8005434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005438:	f7ff bff0 	b.w	800541c <__sfp_lock_release>
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <__sinit+0x28>)
 800543e:	6223      	str	r3, [r4, #32]
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <__sinit+0x2c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f5      	bne.n	8005434 <__sinit+0xc>
 8005448:	f7ff ffc4 	bl	80053d4 <global_stdio_init.part.0>
 800544c:	e7f2      	b.n	8005434 <__sinit+0xc>
 800544e:	bf00      	nop
 8005450:	08005395 	.word	0x08005395
 8005454:	20000484 	.word	0x20000484

08005458 <_fwalk_sglue>:
 8005458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800545c:	4607      	mov	r7, r0
 800545e:	4688      	mov	r8, r1
 8005460:	4614      	mov	r4, r2
 8005462:	2600      	movs	r6, #0
 8005464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005468:	f1b9 0901 	subs.w	r9, r9, #1
 800546c:	d505      	bpl.n	800547a <_fwalk_sglue+0x22>
 800546e:	6824      	ldr	r4, [r4, #0]
 8005470:	2c00      	cmp	r4, #0
 8005472:	d1f7      	bne.n	8005464 <_fwalk_sglue+0xc>
 8005474:	4630      	mov	r0, r6
 8005476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547a:	89ab      	ldrh	r3, [r5, #12]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d907      	bls.n	8005490 <_fwalk_sglue+0x38>
 8005480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005484:	3301      	adds	r3, #1
 8005486:	d003      	beq.n	8005490 <_fwalk_sglue+0x38>
 8005488:	4629      	mov	r1, r5
 800548a:	4638      	mov	r0, r7
 800548c:	47c0      	blx	r8
 800548e:	4306      	orrs	r6, r0
 8005490:	3568      	adds	r5, #104	; 0x68
 8005492:	e7e9      	b.n	8005468 <_fwalk_sglue+0x10>

08005494 <putchar>:
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <putchar+0xc>)
 8005496:	4601      	mov	r1, r0
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	6882      	ldr	r2, [r0, #8]
 800549c:	f001 bdd6 	b.w	800704c <_putc_r>
 80054a0:	20000070 	.word	0x20000070

080054a4 <siprintf>:
 80054a4:	b40e      	push	{r1, r2, r3}
 80054a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054aa:	b500      	push	{lr}
 80054ac:	b09c      	sub	sp, #112	; 0x70
 80054ae:	ab1d      	add	r3, sp, #116	; 0x74
 80054b0:	9002      	str	r0, [sp, #8]
 80054b2:	9006      	str	r0, [sp, #24]
 80054b4:	9107      	str	r1, [sp, #28]
 80054b6:	9104      	str	r1, [sp, #16]
 80054b8:	4808      	ldr	r0, [pc, #32]	; (80054dc <siprintf+0x38>)
 80054ba:	4909      	ldr	r1, [pc, #36]	; (80054e0 <siprintf+0x3c>)
 80054bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c0:	9105      	str	r1, [sp, #20]
 80054c2:	6800      	ldr	r0, [r0, #0]
 80054c4:	a902      	add	r1, sp, #8
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	f001 fc18 	bl	8006cfc <_svfiprintf_r>
 80054cc:	2200      	movs	r2, #0
 80054ce:	9b02      	ldr	r3, [sp, #8]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	b01c      	add	sp, #112	; 0x70
 80054d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d8:	b003      	add	sp, #12
 80054da:	4770      	bx	lr
 80054dc:	20000070 	.word	0x20000070
 80054e0:	ffff0208 	.word	0xffff0208

080054e4 <__sread>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	460c      	mov	r4, r1
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	f000 f86c 	bl	80055c8 <_read_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	bfab      	itete	ge
 80054f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054f6:	89a3      	ldrhlt	r3, [r4, #12]
 80054f8:	181b      	addge	r3, r3, r0
 80054fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054fe:	bfac      	ite	ge
 8005500:	6563      	strge	r3, [r4, #84]	; 0x54
 8005502:	81a3      	strhlt	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__swrite>:
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	461f      	mov	r7, r3
 800550c:	898b      	ldrh	r3, [r1, #12]
 800550e:	4605      	mov	r5, r0
 8005510:	05db      	lsls	r3, r3, #23
 8005512:	460c      	mov	r4, r1
 8005514:	4616      	mov	r6, r2
 8005516:	d505      	bpl.n	8005524 <__swrite+0x1e>
 8005518:	2302      	movs	r3, #2
 800551a:	2200      	movs	r2, #0
 800551c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005520:	f000 f840 	bl	80055a4 <_lseek_r>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	4632      	mov	r2, r6
 8005528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	4628      	mov	r0, r5
 8005530:	463b      	mov	r3, r7
 8005532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	f000 b857 	b.w	80055ec <_write_r>

0800553e <__sseek>:
 800553e:	b510      	push	{r4, lr}
 8005540:	460c      	mov	r4, r1
 8005542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005546:	f000 f82d 	bl	80055a4 <_lseek_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	bf15      	itete	ne
 8005550:	6560      	strne	r0, [r4, #84]	; 0x54
 8005552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strheq	r3, [r4, #12]
 800555c:	bf18      	it	ne
 800555e:	81a3      	strhne	r3, [r4, #12]
 8005560:	bd10      	pop	{r4, pc}

08005562 <__sclose>:
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 b80d 	b.w	8005584 <_close_r>

0800556a <memset>:
 800556a:	4603      	mov	r3, r0
 800556c:	4402      	add	r2, r0
 800556e:	4293      	cmp	r3, r2
 8005570:	d100      	bne.n	8005574 <memset+0xa>
 8005572:	4770      	bx	lr
 8005574:	f803 1b01 	strb.w	r1, [r3], #1
 8005578:	e7f9      	b.n	800556e <memset+0x4>
	...

0800557c <_localeconv_r>:
 800557c:	4800      	ldr	r0, [pc, #0]	; (8005580 <_localeconv_r+0x4>)
 800557e:	4770      	bx	lr
 8005580:	20000164 	.word	0x20000164

08005584 <_close_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	2300      	movs	r3, #0
 8005588:	4d05      	ldr	r5, [pc, #20]	; (80055a0 <_close_r+0x1c>)
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fc fc1b 	bl	8001dca <_close>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_close_r+0x1a>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_close_r+0x1a>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	20000488 	.word	0x20000488

080055a4 <_lseek_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	2200      	movs	r2, #0
 80055ae:	4d05      	ldr	r5, [pc, #20]	; (80055c4 <_lseek_r+0x20>)
 80055b0:	602a      	str	r2, [r5, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f7fc fc2d 	bl	8001e12 <_lseek>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_lseek_r+0x1e>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_lseek_r+0x1e>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	20000488 	.word	0x20000488

080055c8 <_read_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	2200      	movs	r2, #0
 80055d2:	4d05      	ldr	r5, [pc, #20]	; (80055e8 <_read_r+0x20>)
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fc fbbe 	bl	8001d58 <_read>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_read_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_read_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20000488 	.word	0x20000488

080055ec <_write_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4604      	mov	r4, r0
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	2200      	movs	r2, #0
 80055f6:	4d05      	ldr	r5, [pc, #20]	; (800560c <_write_r+0x20>)
 80055f8:	602a      	str	r2, [r5, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f7fc fbc9 	bl	8001d92 <_write>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_write_r+0x1e>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_write_r+0x1e>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	20000488 	.word	0x20000488

08005610 <__errno>:
 8005610:	4b01      	ldr	r3, [pc, #4]	; (8005618 <__errno+0x8>)
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000070 	.word	0x20000070

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	2600      	movs	r6, #0
 8005620:	4d0c      	ldr	r5, [pc, #48]	; (8005654 <__libc_init_array+0x38>)
 8005622:	4c0d      	ldr	r4, [pc, #52]	; (8005658 <__libc_init_array+0x3c>)
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	f002 f8ba 	bl	80077a4 <_init>
 8005630:	2600      	movs	r6, #0
 8005632:	4d0a      	ldr	r5, [pc, #40]	; (800565c <__libc_init_array+0x40>)
 8005634:	4c0a      	ldr	r4, [pc, #40]	; (8005660 <__libc_init_array+0x44>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	f855 3b04 	ldr.w	r3, [r5], #4
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	f855 3b04 	ldr.w	r3, [r5], #4
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	08007bb4 	.word	0x08007bb4
 8005658:	08007bb4 	.word	0x08007bb4
 800565c:	08007bb4 	.word	0x08007bb4
 8005660:	08007bb8 	.word	0x08007bb8

08005664 <__retarget_lock_init_recursive>:
 8005664:	4770      	bx	lr

08005666 <__retarget_lock_acquire_recursive>:
 8005666:	4770      	bx	lr

08005668 <__retarget_lock_release_recursive>:
 8005668:	4770      	bx	lr

0800566a <memchr>:
 800566a:	4603      	mov	r3, r0
 800566c:	b510      	push	{r4, lr}
 800566e:	b2c9      	uxtb	r1, r1
 8005670:	4402      	add	r2, r0
 8005672:	4293      	cmp	r3, r2
 8005674:	4618      	mov	r0, r3
 8005676:	d101      	bne.n	800567c <memchr+0x12>
 8005678:	2000      	movs	r0, #0
 800567a:	e003      	b.n	8005684 <memchr+0x1a>
 800567c:	7804      	ldrb	r4, [r0, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	428c      	cmp	r4, r1
 8005682:	d1f6      	bne.n	8005672 <memchr+0x8>
 8005684:	bd10      	pop	{r4, pc}

08005686 <quorem>:
 8005686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568a:	6903      	ldr	r3, [r0, #16]
 800568c:	690c      	ldr	r4, [r1, #16]
 800568e:	4607      	mov	r7, r0
 8005690:	42a3      	cmp	r3, r4
 8005692:	db7f      	blt.n	8005794 <quorem+0x10e>
 8005694:	3c01      	subs	r4, #1
 8005696:	f100 0514 	add.w	r5, r0, #20
 800569a:	f101 0814 	add.w	r8, r1, #20
 800569e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056ac:	3301      	adds	r3, #1
 80056ae:	429a      	cmp	r2, r3
 80056b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056bc:	d331      	bcc.n	8005722 <quorem+0x9c>
 80056be:	f04f 0e00 	mov.w	lr, #0
 80056c2:	4640      	mov	r0, r8
 80056c4:	46ac      	mov	ip, r5
 80056c6:	46f2      	mov	sl, lr
 80056c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80056cc:	b293      	uxth	r3, r2
 80056ce:	fb06 e303 	mla	r3, r6, r3, lr
 80056d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056d6:	0c1a      	lsrs	r2, r3, #16
 80056d8:	b29b      	uxth	r3, r3
 80056da:	fb06 220e 	mla	r2, r6, lr, r2
 80056de:	ebaa 0303 	sub.w	r3, sl, r3
 80056e2:	f8dc a000 	ldr.w	sl, [ip]
 80056e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056ea:	fa1f fa8a 	uxth.w	sl, sl
 80056ee:	4453      	add	r3, sl
 80056f0:	f8dc a000 	ldr.w	sl, [ip]
 80056f4:	b292      	uxth	r2, r2
 80056f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80056fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056fe:	b29b      	uxth	r3, r3
 8005700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005704:	4581      	cmp	r9, r0
 8005706:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800570a:	f84c 3b04 	str.w	r3, [ip], #4
 800570e:	d2db      	bcs.n	80056c8 <quorem+0x42>
 8005710:	f855 300b 	ldr.w	r3, [r5, fp]
 8005714:	b92b      	cbnz	r3, 8005722 <quorem+0x9c>
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	3b04      	subs	r3, #4
 800571a:	429d      	cmp	r5, r3
 800571c:	461a      	mov	r2, r3
 800571e:	d32d      	bcc.n	800577c <quorem+0xf6>
 8005720:	613c      	str	r4, [r7, #16]
 8005722:	4638      	mov	r0, r7
 8005724:	f001 f992 	bl	8006a4c <__mcmp>
 8005728:	2800      	cmp	r0, #0
 800572a:	db23      	blt.n	8005774 <quorem+0xee>
 800572c:	4629      	mov	r1, r5
 800572e:	2000      	movs	r0, #0
 8005730:	3601      	adds	r6, #1
 8005732:	f858 2b04 	ldr.w	r2, [r8], #4
 8005736:	f8d1 c000 	ldr.w	ip, [r1]
 800573a:	b293      	uxth	r3, r2
 800573c:	1ac3      	subs	r3, r0, r3
 800573e:	0c12      	lsrs	r2, r2, #16
 8005740:	fa1f f08c 	uxth.w	r0, ip
 8005744:	4403      	add	r3, r0
 8005746:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800574a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800574e:	b29b      	uxth	r3, r3
 8005750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005754:	45c1      	cmp	r9, r8
 8005756:	ea4f 4022 	mov.w	r0, r2, asr #16
 800575a:	f841 3b04 	str.w	r3, [r1], #4
 800575e:	d2e8      	bcs.n	8005732 <quorem+0xac>
 8005760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005764:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005768:	b922      	cbnz	r2, 8005774 <quorem+0xee>
 800576a:	3b04      	subs	r3, #4
 800576c:	429d      	cmp	r5, r3
 800576e:	461a      	mov	r2, r3
 8005770:	d30a      	bcc.n	8005788 <quorem+0x102>
 8005772:	613c      	str	r4, [r7, #16]
 8005774:	4630      	mov	r0, r6
 8005776:	b003      	add	sp, #12
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	3b04      	subs	r3, #4
 8005780:	2a00      	cmp	r2, #0
 8005782:	d1cd      	bne.n	8005720 <quorem+0x9a>
 8005784:	3c01      	subs	r4, #1
 8005786:	e7c8      	b.n	800571a <quorem+0x94>
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	3b04      	subs	r3, #4
 800578c:	2a00      	cmp	r2, #0
 800578e:	d1f0      	bne.n	8005772 <quorem+0xec>
 8005790:	3c01      	subs	r4, #1
 8005792:	e7eb      	b.n	800576c <quorem+0xe6>
 8005794:	2000      	movs	r0, #0
 8005796:	e7ee      	b.n	8005776 <quorem+0xf0>

08005798 <_dtoa_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	4616      	mov	r6, r2
 800579e:	461f      	mov	r7, r3
 80057a0:	69c4      	ldr	r4, [r0, #28]
 80057a2:	b099      	sub	sp, #100	; 0x64
 80057a4:	4605      	mov	r5, r0
 80057a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057ae:	b974      	cbnz	r4, 80057ce <_dtoa_r+0x36>
 80057b0:	2010      	movs	r0, #16
 80057b2:	f000 fe1d 	bl	80063f0 <malloc>
 80057b6:	4602      	mov	r2, r0
 80057b8:	61e8      	str	r0, [r5, #28]
 80057ba:	b920      	cbnz	r0, 80057c6 <_dtoa_r+0x2e>
 80057bc:	21ef      	movs	r1, #239	; 0xef
 80057be:	4bac      	ldr	r3, [pc, #688]	; (8005a70 <_dtoa_r+0x2d8>)
 80057c0:	48ac      	ldr	r0, [pc, #688]	; (8005a74 <_dtoa_r+0x2dc>)
 80057c2:	f001 fd45 	bl	8007250 <__assert_func>
 80057c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057ca:	6004      	str	r4, [r0, #0]
 80057cc:	60c4      	str	r4, [r0, #12]
 80057ce:	69eb      	ldr	r3, [r5, #28]
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	b151      	cbz	r1, 80057ea <_dtoa_r+0x52>
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	2301      	movs	r3, #1
 80057d8:	4093      	lsls	r3, r2
 80057da:	604a      	str	r2, [r1, #4]
 80057dc:	608b      	str	r3, [r1, #8]
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fefa 	bl	80065d8 <_Bfree>
 80057e4:	2200      	movs	r2, #0
 80057e6:	69eb      	ldr	r3, [r5, #28]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	1e3b      	subs	r3, r7, #0
 80057ec:	bfaf      	iteee	ge
 80057ee:	2300      	movge	r3, #0
 80057f0:	2201      	movlt	r2, #1
 80057f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057f6:	9305      	strlt	r3, [sp, #20]
 80057f8:	bfa8      	it	ge
 80057fa:	f8c8 3000 	strge.w	r3, [r8]
 80057fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005802:	4b9d      	ldr	r3, [pc, #628]	; (8005a78 <_dtoa_r+0x2e0>)
 8005804:	bfb8      	it	lt
 8005806:	f8c8 2000 	strlt.w	r2, [r8]
 800580a:	ea33 0309 	bics.w	r3, r3, r9
 800580e:	d119      	bne.n	8005844 <_dtoa_r+0xac>
 8005810:	f242 730f 	movw	r3, #9999	; 0x270f
 8005814:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800581c:	4333      	orrs	r3, r6
 800581e:	f000 8589 	beq.w	8006334 <_dtoa_r+0xb9c>
 8005822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005824:	b953      	cbnz	r3, 800583c <_dtoa_r+0xa4>
 8005826:	4b95      	ldr	r3, [pc, #596]	; (8005a7c <_dtoa_r+0x2e4>)
 8005828:	e023      	b.n	8005872 <_dtoa_r+0xda>
 800582a:	4b95      	ldr	r3, [pc, #596]	; (8005a80 <_dtoa_r+0x2e8>)
 800582c:	9303      	str	r3, [sp, #12]
 800582e:	3308      	adds	r3, #8
 8005830:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	9803      	ldr	r0, [sp, #12]
 8005836:	b019      	add	sp, #100	; 0x64
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	4b8f      	ldr	r3, [pc, #572]	; (8005a7c <_dtoa_r+0x2e4>)
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	3303      	adds	r3, #3
 8005842:	e7f5      	b.n	8005830 <_dtoa_r+0x98>
 8005844:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005848:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800584c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	2300      	movs	r3, #0
 8005854:	f7fb f8a8 	bl	80009a8 <__aeabi_dcmpeq>
 8005858:	4680      	mov	r8, r0
 800585a:	b160      	cbz	r0, 8005876 <_dtoa_r+0xde>
 800585c:	2301      	movs	r3, #1
 800585e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8562 	beq.w	800632e <_dtoa_r+0xb96>
 800586a:	4b86      	ldr	r3, [pc, #536]	; (8005a84 <_dtoa_r+0x2ec>)
 800586c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	3b01      	subs	r3, #1
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	e7de      	b.n	8005834 <_dtoa_r+0x9c>
 8005876:	ab16      	add	r3, sp, #88	; 0x58
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	ab17      	add	r3, sp, #92	; 0x5c
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4628      	mov	r0, r5
 8005880:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005884:	f001 f98a 	bl	8006b9c <__d2b>
 8005888:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800588c:	4682      	mov	sl, r0
 800588e:	2c00      	cmp	r4, #0
 8005890:	d07e      	beq.n	8005990 <_dtoa_r+0x1f8>
 8005892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005898:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800589c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058ac:	4619      	mov	r1, r3
 80058ae:	2200      	movs	r2, #0
 80058b0:	4b75      	ldr	r3, [pc, #468]	; (8005a88 <_dtoa_r+0x2f0>)
 80058b2:	f7fa fc59 	bl	8000168 <__aeabi_dsub>
 80058b6:	a368      	add	r3, pc, #416	; (adr r3, 8005a58 <_dtoa_r+0x2c0>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fe0c 	bl	80004d8 <__aeabi_dmul>
 80058c0:	a367      	add	r3, pc, #412	; (adr r3, 8005a60 <_dtoa_r+0x2c8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa fc51 	bl	800016c <__adddf3>
 80058ca:	4606      	mov	r6, r0
 80058cc:	4620      	mov	r0, r4
 80058ce:	460f      	mov	r7, r1
 80058d0:	f7fa fd98 	bl	8000404 <__aeabi_i2d>
 80058d4:	a364      	add	r3, pc, #400	; (adr r3, 8005a68 <_dtoa_r+0x2d0>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4630      	mov	r0, r6
 80058e4:	4639      	mov	r1, r7
 80058e6:	f7fa fc41 	bl	800016c <__adddf3>
 80058ea:	4606      	mov	r6, r0
 80058ec:	460f      	mov	r7, r1
 80058ee:	f7fb f8a3 	bl	8000a38 <__aeabi_d2iz>
 80058f2:	2200      	movs	r2, #0
 80058f4:	4683      	mov	fp, r0
 80058f6:	2300      	movs	r3, #0
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fb f85e 	bl	80009bc <__aeabi_dcmplt>
 8005900:	b148      	cbz	r0, 8005916 <_dtoa_r+0x17e>
 8005902:	4658      	mov	r0, fp
 8005904:	f7fa fd7e 	bl	8000404 <__aeabi_i2d>
 8005908:	4632      	mov	r2, r6
 800590a:	463b      	mov	r3, r7
 800590c:	f7fb f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8005910:	b908      	cbnz	r0, 8005916 <_dtoa_r+0x17e>
 8005912:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005916:	f1bb 0f16 	cmp.w	fp, #22
 800591a:	d857      	bhi.n	80059cc <_dtoa_r+0x234>
 800591c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005920:	4b5a      	ldr	r3, [pc, #360]	; (8005a8c <_dtoa_r+0x2f4>)
 8005922:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fb f847 	bl	80009bc <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	d04e      	beq.n	80059d0 <_dtoa_r+0x238>
 8005932:	2300      	movs	r3, #0
 8005934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005938:	930f      	str	r3, [sp, #60]	; 0x3c
 800593a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800593c:	1b1b      	subs	r3, r3, r4
 800593e:	1e5a      	subs	r2, r3, #1
 8005940:	bf46      	itte	mi
 8005942:	f1c3 0901 	rsbmi	r9, r3, #1
 8005946:	2300      	movmi	r3, #0
 8005948:	f04f 0900 	movpl.w	r9, #0
 800594c:	9209      	str	r2, [sp, #36]	; 0x24
 800594e:	bf48      	it	mi
 8005950:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005952:	f1bb 0f00 	cmp.w	fp, #0
 8005956:	db3d      	blt.n	80059d4 <_dtoa_r+0x23c>
 8005958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800595a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800595e:	445b      	add	r3, fp
 8005960:	9309      	str	r3, [sp, #36]	; 0x24
 8005962:	2300      	movs	r3, #0
 8005964:	930a      	str	r3, [sp, #40]	; 0x28
 8005966:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005968:	2b09      	cmp	r3, #9
 800596a:	d867      	bhi.n	8005a3c <_dtoa_r+0x2a4>
 800596c:	2b05      	cmp	r3, #5
 800596e:	bfc4      	itt	gt
 8005970:	3b04      	subgt	r3, #4
 8005972:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005976:	bfc8      	it	gt
 8005978:	2400      	movgt	r4, #0
 800597a:	f1a3 0302 	sub.w	r3, r3, #2
 800597e:	bfd8      	it	le
 8005980:	2401      	movle	r4, #1
 8005982:	2b03      	cmp	r3, #3
 8005984:	f200 8086 	bhi.w	8005a94 <_dtoa_r+0x2fc>
 8005988:	e8df f003 	tbb	[pc, r3]
 800598c:	5637392c 	.word	0x5637392c
 8005990:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005994:	441c      	add	r4, r3
 8005996:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800599a:	2b20      	cmp	r3, #32
 800599c:	bfc1      	itttt	gt
 800599e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80059a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80059aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80059ae:	bfd6      	itet	le
 80059b0:	f1c3 0320 	rsble	r3, r3, #32
 80059b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80059b8:	fa06 f003 	lslle.w	r0, r6, r3
 80059bc:	f7fa fd12 	bl	80003e4 <__aeabi_ui2d>
 80059c0:	2201      	movs	r2, #1
 80059c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80059c6:	3c01      	subs	r4, #1
 80059c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80059ca:	e76f      	b.n	80058ac <_dtoa_r+0x114>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e7b3      	b.n	8005938 <_dtoa_r+0x1a0>
 80059d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80059d2:	e7b2      	b.n	800593a <_dtoa_r+0x1a2>
 80059d4:	f1cb 0300 	rsb	r3, fp, #0
 80059d8:	930a      	str	r3, [sp, #40]	; 0x28
 80059da:	2300      	movs	r3, #0
 80059dc:	eba9 090b 	sub.w	r9, r9, fp
 80059e0:	930e      	str	r3, [sp, #56]	; 0x38
 80059e2:	e7c0      	b.n	8005966 <_dtoa_r+0x1ce>
 80059e4:	2300      	movs	r3, #0
 80059e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dc55      	bgt.n	8005a9a <_dtoa_r+0x302>
 80059ee:	2301      	movs	r3, #1
 80059f0:	461a      	mov	r2, r3
 80059f2:	9306      	str	r3, [sp, #24]
 80059f4:	9308      	str	r3, [sp, #32]
 80059f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80059f8:	e00b      	b.n	8005a12 <_dtoa_r+0x27a>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7f3      	b.n	80059e6 <_dtoa_r+0x24e>
 80059fe:	2300      	movs	r3, #0
 8005a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a04:	445b      	add	r3, fp
 8005a06:	9306      	str	r3, [sp, #24]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	9308      	str	r3, [sp, #32]
 8005a0e:	bfb8      	it	lt
 8005a10:	2301      	movlt	r3, #1
 8005a12:	2100      	movs	r1, #0
 8005a14:	2204      	movs	r2, #4
 8005a16:	69e8      	ldr	r0, [r5, #28]
 8005a18:	f102 0614 	add.w	r6, r2, #20
 8005a1c:	429e      	cmp	r6, r3
 8005a1e:	d940      	bls.n	8005aa2 <_dtoa_r+0x30a>
 8005a20:	6041      	str	r1, [r0, #4]
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 fd98 	bl	8006558 <_Balloc>
 8005a28:	9003      	str	r0, [sp, #12]
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d13c      	bne.n	8005aa8 <_dtoa_r+0x310>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	f240 11af 	movw	r1, #431	; 0x1af
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <_dtoa_r+0x2f8>)
 8005a36:	e6c3      	b.n	80057c0 <_dtoa_r+0x28>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e7e1      	b.n	8005a00 <_dtoa_r+0x268>
 8005a3c:	2401      	movs	r4, #1
 8005a3e:	2300      	movs	r3, #0
 8005a40:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a42:	9322      	str	r3, [sp, #136]	; 0x88
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	2200      	movs	r2, #0
 8005a4a:	9306      	str	r3, [sp, #24]
 8005a4c:	9308      	str	r3, [sp, #32]
 8005a4e:	2312      	movs	r3, #18
 8005a50:	e7d1      	b.n	80059f6 <_dtoa_r+0x25e>
 8005a52:	bf00      	nop
 8005a54:	f3af 8000 	nop.w
 8005a58:	636f4361 	.word	0x636f4361
 8005a5c:	3fd287a7 	.word	0x3fd287a7
 8005a60:	8b60c8b3 	.word	0x8b60c8b3
 8005a64:	3fc68a28 	.word	0x3fc68a28
 8005a68:	509f79fb 	.word	0x509f79fb
 8005a6c:	3fd34413 	.word	0x3fd34413
 8005a70:	08007883 	.word	0x08007883
 8005a74:	0800789a 	.word	0x0800789a
 8005a78:	7ff00000 	.word	0x7ff00000
 8005a7c:	0800787f 	.word	0x0800787f
 8005a80:	08007876 	.word	0x08007876
 8005a84:	08007853 	.word	0x08007853
 8005a88:	3ff80000 	.word	0x3ff80000
 8005a8c:	08007988 	.word	0x08007988
 8005a90:	080078f2 	.word	0x080078f2
 8005a94:	2301      	movs	r3, #1
 8005a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a98:	e7d4      	b.n	8005a44 <_dtoa_r+0x2ac>
 8005a9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a9c:	9306      	str	r3, [sp, #24]
 8005a9e:	9308      	str	r3, [sp, #32]
 8005aa0:	e7b7      	b.n	8005a12 <_dtoa_r+0x27a>
 8005aa2:	3101      	adds	r1, #1
 8005aa4:	0052      	lsls	r2, r2, #1
 8005aa6:	e7b7      	b.n	8005a18 <_dtoa_r+0x280>
 8005aa8:	69eb      	ldr	r3, [r5, #28]
 8005aaa:	9a03      	ldr	r2, [sp, #12]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	9b08      	ldr	r3, [sp, #32]
 8005ab0:	2b0e      	cmp	r3, #14
 8005ab2:	f200 80a8 	bhi.w	8005c06 <_dtoa_r+0x46e>
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	f000 80a5 	beq.w	8005c06 <_dtoa_r+0x46e>
 8005abc:	f1bb 0f00 	cmp.w	fp, #0
 8005ac0:	dd34      	ble.n	8005b2c <_dtoa_r+0x394>
 8005ac2:	4b9a      	ldr	r3, [pc, #616]	; (8005d2c <_dtoa_r+0x594>)
 8005ac4:	f00b 020f 	and.w	r2, fp, #15
 8005ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005acc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ad0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ad4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ad8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005adc:	d016      	beq.n	8005b0c <_dtoa_r+0x374>
 8005ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ae2:	4b93      	ldr	r3, [pc, #588]	; (8005d30 <_dtoa_r+0x598>)
 8005ae4:	2703      	movs	r7, #3
 8005ae6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005aea:	f7fa fe1f 	bl	800072c <__aeabi_ddiv>
 8005aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af2:	f004 040f 	and.w	r4, r4, #15
 8005af6:	4e8e      	ldr	r6, [pc, #568]	; (8005d30 <_dtoa_r+0x598>)
 8005af8:	b954      	cbnz	r4, 8005b10 <_dtoa_r+0x378>
 8005afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005afe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b02:	f7fa fe13 	bl	800072c <__aeabi_ddiv>
 8005b06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b0a:	e029      	b.n	8005b60 <_dtoa_r+0x3c8>
 8005b0c:	2702      	movs	r7, #2
 8005b0e:	e7f2      	b.n	8005af6 <_dtoa_r+0x35e>
 8005b10:	07e1      	lsls	r1, r4, #31
 8005b12:	d508      	bpl.n	8005b26 <_dtoa_r+0x38e>
 8005b14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b1c:	f7fa fcdc 	bl	80004d8 <__aeabi_dmul>
 8005b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b24:	3701      	adds	r7, #1
 8005b26:	1064      	asrs	r4, r4, #1
 8005b28:	3608      	adds	r6, #8
 8005b2a:	e7e5      	b.n	8005af8 <_dtoa_r+0x360>
 8005b2c:	f000 80a5 	beq.w	8005c7a <_dtoa_r+0x4e2>
 8005b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b34:	f1cb 0400 	rsb	r4, fp, #0
 8005b38:	4b7c      	ldr	r3, [pc, #496]	; (8005d2c <_dtoa_r+0x594>)
 8005b3a:	f004 020f 	and.w	r2, r4, #15
 8005b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fcc7 	bl	80004d8 <__aeabi_dmul>
 8005b4a:	2702      	movs	r7, #2
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b52:	4e77      	ldr	r6, [pc, #476]	; (8005d30 <_dtoa_r+0x598>)
 8005b54:	1124      	asrs	r4, r4, #4
 8005b56:	2c00      	cmp	r4, #0
 8005b58:	f040 8084 	bne.w	8005c64 <_dtoa_r+0x4cc>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1d2      	bne.n	8005b06 <_dtoa_r+0x36e>
 8005b60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8087 	beq.w	8005c7e <_dtoa_r+0x4e6>
 8005b70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b74:	2200      	movs	r2, #0
 8005b76:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <_dtoa_r+0x59c>)
 8005b78:	f7fa ff20 	bl	80009bc <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d07e      	beq.n	8005c7e <_dtoa_r+0x4e6>
 8005b80:	9b08      	ldr	r3, [sp, #32]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d07b      	beq.n	8005c7e <_dtoa_r+0x4e6>
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd38      	ble.n	8005bfe <_dtoa_r+0x466>
 8005b8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b69      	ldr	r3, [pc, #420]	; (8005d38 <_dtoa_r+0x5a0>)
 8005b94:	f7fa fca0 	bl	80004d8 <__aeabi_dmul>
 8005b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9c:	9c06      	ldr	r4, [sp, #24]
 8005b9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005ba2:	3701      	adds	r7, #1
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	f7fa fc2d 	bl	8000404 <__aeabi_i2d>
 8005baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bae:	f7fa fc93 	bl	80004d8 <__aeabi_dmul>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4b61      	ldr	r3, [pc, #388]	; (8005d3c <_dtoa_r+0x5a4>)
 8005bb6:	f7fa fad9 	bl	800016c <__adddf3>
 8005bba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bc2:	9611      	str	r6, [sp, #68]	; 0x44
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d15d      	bne.n	8005c84 <_dtoa_r+0x4ec>
 8005bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <_dtoa_r+0x5a8>)
 8005bd0:	f7fa faca 	bl	8000168 <__aeabi_dsub>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bdc:	4633      	mov	r3, r6
 8005bde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005be0:	f7fa ff0a 	bl	80009f8 <__aeabi_dcmpgt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 8295 	bne.w	8006114 <_dtoa_r+0x97c>
 8005bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005bf4:	f7fa fee2 	bl	80009bc <__aeabi_dcmplt>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f040 8289 	bne.w	8006110 <_dtoa_r+0x978>
 8005bfe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f2c0 8151 	blt.w	8005eb0 <_dtoa_r+0x718>
 8005c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005c12:	f300 814d 	bgt.w	8005eb0 <_dtoa_r+0x718>
 8005c16:	4b45      	ldr	r3, [pc, #276]	; (8005d2c <_dtoa_r+0x594>)
 8005c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f280 80da 	bge.w	8005de0 <_dtoa_r+0x648>
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f300 80d6 	bgt.w	8005de0 <_dtoa_r+0x648>
 8005c34:	f040 826b 	bne.w	800610e <_dtoa_r+0x976>
 8005c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <_dtoa_r+0x5a8>)
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c48:	f7fa fecc 	bl	80009e4 <__aeabi_dcmpge>
 8005c4c:	9c08      	ldr	r4, [sp, #32]
 8005c4e:	4626      	mov	r6, r4
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f040 8241 	bne.w	80060d8 <_dtoa_r+0x940>
 8005c56:	2331      	movs	r3, #49	; 0x31
 8005c58:	9f03      	ldr	r7, [sp, #12]
 8005c5a:	f10b 0b01 	add.w	fp, fp, #1
 8005c5e:	f807 3b01 	strb.w	r3, [r7], #1
 8005c62:	e23d      	b.n	80060e0 <_dtoa_r+0x948>
 8005c64:	07e2      	lsls	r2, r4, #31
 8005c66:	d505      	bpl.n	8005c74 <_dtoa_r+0x4dc>
 8005c68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c6c:	f7fa fc34 	bl	80004d8 <__aeabi_dmul>
 8005c70:	2301      	movs	r3, #1
 8005c72:	3701      	adds	r7, #1
 8005c74:	1064      	asrs	r4, r4, #1
 8005c76:	3608      	adds	r6, #8
 8005c78:	e76d      	b.n	8005b56 <_dtoa_r+0x3be>
 8005c7a:	2702      	movs	r7, #2
 8005c7c:	e770      	b.n	8005b60 <_dtoa_r+0x3c8>
 8005c7e:	46d8      	mov	r8, fp
 8005c80:	9c08      	ldr	r4, [sp, #32]
 8005c82:	e78f      	b.n	8005ba4 <_dtoa_r+0x40c>
 8005c84:	9903      	ldr	r1, [sp, #12]
 8005c86:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <_dtoa_r+0x594>)
 8005c88:	4421      	add	r1, r4
 8005c8a:	9112      	str	r1, [sp, #72]	; 0x48
 8005c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d054      	beq.n	8005d48 <_dtoa_r+0x5b0>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	4928      	ldr	r1, [pc, #160]	; (8005d44 <_dtoa_r+0x5ac>)
 8005ca2:	f7fa fd43 	bl	800072c <__aeabi_ddiv>
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	4632      	mov	r2, r6
 8005caa:	f7fa fa5d 	bl	8000168 <__aeabi_dsub>
 8005cae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cb2:	9f03      	ldr	r7, [sp, #12]
 8005cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cb8:	f7fa febe 	bl	8000a38 <__aeabi_d2iz>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	f7fa fba1 	bl	8000404 <__aeabi_i2d>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cca:	f7fa fa4d 	bl	8000168 <__aeabi_dsub>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	3430      	adds	r4, #48	; 0x30
 8005cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cdc:	f807 4b01 	strb.w	r4, [r7], #1
 8005ce0:	f7fa fe6c 	bl	80009bc <__aeabi_dcmplt>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d173      	bne.n	8005dd0 <_dtoa_r+0x638>
 8005ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cec:	2000      	movs	r0, #0
 8005cee:	4911      	ldr	r1, [pc, #68]	; (8005d34 <_dtoa_r+0x59c>)
 8005cf0:	f7fa fa3a 	bl	8000168 <__aeabi_dsub>
 8005cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cf8:	f7fa fe60 	bl	80009bc <__aeabi_dcmplt>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f040 80b6 	bne.w	8005e6e <_dtoa_r+0x6d6>
 8005d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d04:	429f      	cmp	r7, r3
 8005d06:	f43f af7a 	beq.w	8005bfe <_dtoa_r+0x466>
 8005d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <_dtoa_r+0x5a0>)
 8005d12:	f7fa fbe1 	bl	80004d8 <__aeabi_dmul>
 8005d16:	2200      	movs	r2, #0
 8005d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_dtoa_r+0x5a0>)
 8005d22:	f7fa fbd9 	bl	80004d8 <__aeabi_dmul>
 8005d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d2a:	e7c3      	b.n	8005cb4 <_dtoa_r+0x51c>
 8005d2c:	08007988 	.word	0x08007988
 8005d30:	08007960 	.word	0x08007960
 8005d34:	3ff00000 	.word	0x3ff00000
 8005d38:	40240000 	.word	0x40240000
 8005d3c:	401c0000 	.word	0x401c0000
 8005d40:	40140000 	.word	0x40140000
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fbc4 	bl	80004d8 <__aeabi_dmul>
 8005d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d56:	9c03      	ldr	r4, [sp, #12]
 8005d58:	9314      	str	r3, [sp, #80]	; 0x50
 8005d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d5e:	f7fa fe6b 	bl	8000a38 <__aeabi_d2iz>
 8005d62:	9015      	str	r0, [sp, #84]	; 0x54
 8005d64:	f7fa fb4e 	bl	8000404 <__aeabi_i2d>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d70:	f7fa f9fa 	bl	8000168 <__aeabi_dsub>
 8005d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d76:	4606      	mov	r6, r0
 8005d78:	3330      	adds	r3, #48	; 0x30
 8005d7a:	f804 3b01 	strb.w	r3, [r4], #1
 8005d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d80:	460f      	mov	r7, r1
 8005d82:	429c      	cmp	r4, r3
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	d124      	bne.n	8005dd4 <_dtoa_r+0x63c>
 8005d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d8e:	4baf      	ldr	r3, [pc, #700]	; (800604c <_dtoa_r+0x8b4>)
 8005d90:	f7fa f9ec 	bl	800016c <__adddf3>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4630      	mov	r0, r6
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	f7fa fe2c 	bl	80009f8 <__aeabi_dcmpgt>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d163      	bne.n	8005e6c <_dtoa_r+0x6d4>
 8005da4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005da8:	2000      	movs	r0, #0
 8005daa:	49a8      	ldr	r1, [pc, #672]	; (800604c <_dtoa_r+0x8b4>)
 8005dac:	f7fa f9dc 	bl	8000168 <__aeabi_dsub>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4630      	mov	r0, r6
 8005db6:	4639      	mov	r1, r7
 8005db8:	f7fa fe00 	bl	80009bc <__aeabi_dcmplt>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f43f af1e 	beq.w	8005bfe <_dtoa_r+0x466>
 8005dc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005dc4:	1e7b      	subs	r3, r7, #1
 8005dc6:	9314      	str	r3, [sp, #80]	; 0x50
 8005dc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005dcc:	2b30      	cmp	r3, #48	; 0x30
 8005dce:	d0f8      	beq.n	8005dc2 <_dtoa_r+0x62a>
 8005dd0:	46c3      	mov	fp, r8
 8005dd2:	e03b      	b.n	8005e4c <_dtoa_r+0x6b4>
 8005dd4:	4b9e      	ldr	r3, [pc, #632]	; (8006050 <_dtoa_r+0x8b8>)
 8005dd6:	f7fa fb7f 	bl	80004d8 <__aeabi_dmul>
 8005dda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dde:	e7bc      	b.n	8005d5a <_dtoa_r+0x5c2>
 8005de0:	9f03      	ldr	r7, [sp, #12]
 8005de2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005de6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dea:	4640      	mov	r0, r8
 8005dec:	4649      	mov	r1, r9
 8005dee:	f7fa fc9d 	bl	800072c <__aeabi_ddiv>
 8005df2:	f7fa fe21 	bl	8000a38 <__aeabi_d2iz>
 8005df6:	4604      	mov	r4, r0
 8005df8:	f7fa fb04 	bl	8000404 <__aeabi_i2d>
 8005dfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e00:	f7fa fb6a 	bl	80004d8 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa f9ac 	bl	8000168 <__aeabi_dsub>
 8005e10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e14:	f807 6b01 	strb.w	r6, [r7], #1
 8005e18:	9e03      	ldr	r6, [sp, #12]
 8005e1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e1e:	1bbe      	subs	r6, r7, r6
 8005e20:	45b4      	cmp	ip, r6
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	d136      	bne.n	8005e96 <_dtoa_r+0x6fe>
 8005e28:	f7fa f9a0 	bl	800016c <__adddf3>
 8005e2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e30:	4680      	mov	r8, r0
 8005e32:	4689      	mov	r9, r1
 8005e34:	f7fa fde0 	bl	80009f8 <__aeabi_dcmpgt>
 8005e38:	bb58      	cbnz	r0, 8005e92 <_dtoa_r+0x6fa>
 8005e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4649      	mov	r1, r9
 8005e42:	f7fa fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8005e46:	b108      	cbz	r0, 8005e4c <_dtoa_r+0x6b4>
 8005e48:	07e3      	lsls	r3, r4, #31
 8005e4a:	d422      	bmi.n	8005e92 <_dtoa_r+0x6fa>
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 fbc2 	bl	80065d8 <_Bfree>
 8005e54:	2300      	movs	r3, #0
 8005e56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e58:	703b      	strb	r3, [r7, #0]
 8005e5a:	f10b 0301 	add.w	r3, fp, #1
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f43f ace6 	beq.w	8005834 <_dtoa_r+0x9c>
 8005e68:	601f      	str	r7, [r3, #0]
 8005e6a:	e4e3      	b.n	8005834 <_dtoa_r+0x9c>
 8005e6c:	4627      	mov	r7, r4
 8005e6e:	463b      	mov	r3, r7
 8005e70:	461f      	mov	r7, r3
 8005e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e76:	2a39      	cmp	r2, #57	; 0x39
 8005e78:	d107      	bne.n	8005e8a <_dtoa_r+0x6f2>
 8005e7a:	9a03      	ldr	r2, [sp, #12]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d1f7      	bne.n	8005e70 <_dtoa_r+0x6d8>
 8005e80:	2230      	movs	r2, #48	; 0x30
 8005e82:	9903      	ldr	r1, [sp, #12]
 8005e84:	f108 0801 	add.w	r8, r8, #1
 8005e88:	700a      	strb	r2, [r1, #0]
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	3201      	adds	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e79e      	b.n	8005dd0 <_dtoa_r+0x638>
 8005e92:	46d8      	mov	r8, fp
 8005e94:	e7eb      	b.n	8005e6e <_dtoa_r+0x6d6>
 8005e96:	2200      	movs	r2, #0
 8005e98:	4b6d      	ldr	r3, [pc, #436]	; (8006050 <_dtoa_r+0x8b8>)
 8005e9a:	f7fa fb1d 	bl	80004d8 <__aeabi_dmul>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	f7fa fd7f 	bl	80009a8 <__aeabi_dcmpeq>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d09b      	beq.n	8005de6 <_dtoa_r+0x64e>
 8005eae:	e7cd      	b.n	8005e4c <_dtoa_r+0x6b4>
 8005eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	f000 80c4 	beq.w	8006040 <_dtoa_r+0x8a8>
 8005eb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005eba:	2a01      	cmp	r2, #1
 8005ebc:	f300 80a8 	bgt.w	8006010 <_dtoa_r+0x878>
 8005ec0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	f000 80a0 	beq.w	8006008 <_dtoa_r+0x870>
 8005ec8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ecc:	464f      	mov	r7, r9
 8005ece:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	441a      	add	r2, r3
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	4499      	add	r9, r3
 8005eda:	9209      	str	r2, [sp, #36]	; 0x24
 8005edc:	f000 fc32 	bl	8006744 <__i2b>
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	b15f      	cbz	r7, 8005efc <_dtoa_r+0x764>
 8005ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd08      	ble.n	8005efc <_dtoa_r+0x764>
 8005eea:	42bb      	cmp	r3, r7
 8005eec:	bfa8      	it	ge
 8005eee:	463b      	movge	r3, r7
 8005ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef2:	eba9 0903 	sub.w	r9, r9, r3
 8005ef6:	1aff      	subs	r7, r7, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	9309      	str	r3, [sp, #36]	; 0x24
 8005efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005efe:	b1f3      	cbz	r3, 8005f3e <_dtoa_r+0x7a6>
 8005f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80a0 	beq.w	8006048 <_dtoa_r+0x8b0>
 8005f08:	2c00      	cmp	r4, #0
 8005f0a:	dd10      	ble.n	8005f2e <_dtoa_r+0x796>
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fcd5 	bl	80068c0 <__pow5mult>
 8005f16:	4652      	mov	r2, sl
 8005f18:	4601      	mov	r1, r0
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fc27 	bl	8006770 <__multiply>
 8005f22:	4680      	mov	r8, r0
 8005f24:	4651      	mov	r1, sl
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 fb56 	bl	80065d8 <_Bfree>
 8005f2c:	46c2      	mov	sl, r8
 8005f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f30:	1b1a      	subs	r2, r3, r4
 8005f32:	d004      	beq.n	8005f3e <_dtoa_r+0x7a6>
 8005f34:	4651      	mov	r1, sl
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 fcc2 	bl	80068c0 <__pow5mult>
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 fbff 	bl	8006744 <__i2b>
 8005f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f48:	4604      	mov	r4, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f340 8082 	ble.w	8006054 <_dtoa_r+0x8bc>
 8005f50:	461a      	mov	r2, r3
 8005f52:	4601      	mov	r1, r0
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fcb3 	bl	80068c0 <__pow5mult>
 8005f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	dd7b      	ble.n	800605a <_dtoa_r+0x8c2>
 8005f62:	f04f 0800 	mov.w	r8, #0
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f6c:	6918      	ldr	r0, [r3, #16]
 8005f6e:	f000 fb9b 	bl	80066a8 <__hi0bits>
 8005f72:	f1c0 0020 	rsb	r0, r0, #32
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	4418      	add	r0, r3
 8005f7a:	f010 001f 	ands.w	r0, r0, #31
 8005f7e:	f000 8092 	beq.w	80060a6 <_dtoa_r+0x90e>
 8005f82:	f1c0 0320 	rsb	r3, r0, #32
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	f340 8085 	ble.w	8006096 <_dtoa_r+0x8fe>
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	f1c0 001c 	rsb	r0, r0, #28
 8005f92:	4403      	add	r3, r0
 8005f94:	4481      	add	r9, r0
 8005f96:	4407      	add	r7, r0
 8005f98:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9a:	f1b9 0f00 	cmp.w	r9, #0
 8005f9e:	dd05      	ble.n	8005fac <_dtoa_r+0x814>
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 fce5 	bl	8006974 <__lshift>
 8005faa:	4682      	mov	sl, r0
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dd05      	ble.n	8005fbe <_dtoa_r+0x826>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 fcdc 	bl	8006974 <__lshift>
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d072      	beq.n	80060aa <_dtoa_r+0x912>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f000 fd40 	bl	8006a4c <__mcmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	da6c      	bge.n	80060aa <_dtoa_r+0x912>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4651      	mov	r1, sl
 8005fd4:	220a      	movs	r2, #10
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fb20 	bl	800661c <__multadd>
 8005fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fde:	4682      	mov	sl, r0
 8005fe0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 81ac 	beq.w	8006342 <_dtoa_r+0xbaa>
 8005fea:	2300      	movs	r3, #0
 8005fec:	4631      	mov	r1, r6
 8005fee:	220a      	movs	r2, #10
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 fb13 	bl	800661c <__multadd>
 8005ff6:	9b06      	ldr	r3, [sp, #24]
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f300 8093 	bgt.w	8006126 <_dtoa_r+0x98e>
 8006000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006002:	2b02      	cmp	r3, #2
 8006004:	dc59      	bgt.n	80060ba <_dtoa_r+0x922>
 8006006:	e08e      	b.n	8006126 <_dtoa_r+0x98e>
 8006008:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800600a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800600e:	e75d      	b.n	8005ecc <_dtoa_r+0x734>
 8006010:	9b08      	ldr	r3, [sp, #32]
 8006012:	1e5c      	subs	r4, r3, #1
 8006014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006016:	42a3      	cmp	r3, r4
 8006018:	bfbf      	itttt	lt
 800601a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800601c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800601e:	1ae3      	sublt	r3, r4, r3
 8006020:	18d2      	addlt	r2, r2, r3
 8006022:	bfa8      	it	ge
 8006024:	1b1c      	subge	r4, r3, r4
 8006026:	9b08      	ldr	r3, [sp, #32]
 8006028:	bfbe      	ittt	lt
 800602a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800602c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800602e:	2400      	movlt	r4, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfb5      	itete	lt
 8006034:	eba9 0703 	sublt.w	r7, r9, r3
 8006038:	464f      	movge	r7, r9
 800603a:	2300      	movlt	r3, #0
 800603c:	9b08      	ldrge	r3, [sp, #32]
 800603e:	e747      	b.n	8005ed0 <_dtoa_r+0x738>
 8006040:	464f      	mov	r7, r9
 8006042:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006044:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006046:	e74c      	b.n	8005ee2 <_dtoa_r+0x74a>
 8006048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800604a:	e773      	b.n	8005f34 <_dtoa_r+0x79c>
 800604c:	3fe00000 	.word	0x3fe00000
 8006050:	40240000 	.word	0x40240000
 8006054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006056:	2b01      	cmp	r3, #1
 8006058:	dc18      	bgt.n	800608c <_dtoa_r+0x8f4>
 800605a:	9b04      	ldr	r3, [sp, #16]
 800605c:	b9b3      	cbnz	r3, 800608c <_dtoa_r+0x8f4>
 800605e:	9b05      	ldr	r3, [sp, #20]
 8006060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006064:	b993      	cbnz	r3, 800608c <_dtoa_r+0x8f4>
 8006066:	9b05      	ldr	r3, [sp, #20]
 8006068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800606c:	0d1b      	lsrs	r3, r3, #20
 800606e:	051b      	lsls	r3, r3, #20
 8006070:	b17b      	cbz	r3, 8006092 <_dtoa_r+0x8fa>
 8006072:	f04f 0801 	mov.w	r8, #1
 8006076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006078:	f109 0901 	add.w	r9, r9, #1
 800607c:	3301      	adds	r3, #1
 800607e:	9309      	str	r3, [sp, #36]	; 0x24
 8006080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	f47f af6f 	bne.w	8005f66 <_dtoa_r+0x7ce>
 8006088:	2001      	movs	r0, #1
 800608a:	e774      	b.n	8005f76 <_dtoa_r+0x7de>
 800608c:	f04f 0800 	mov.w	r8, #0
 8006090:	e7f6      	b.n	8006080 <_dtoa_r+0x8e8>
 8006092:	4698      	mov	r8, r3
 8006094:	e7f4      	b.n	8006080 <_dtoa_r+0x8e8>
 8006096:	d080      	beq.n	8005f9a <_dtoa_r+0x802>
 8006098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609a:	331c      	adds	r3, #28
 800609c:	441a      	add	r2, r3
 800609e:	4499      	add	r9, r3
 80060a0:	441f      	add	r7, r3
 80060a2:	9209      	str	r2, [sp, #36]	; 0x24
 80060a4:	e779      	b.n	8005f9a <_dtoa_r+0x802>
 80060a6:	4603      	mov	r3, r0
 80060a8:	e7f6      	b.n	8006098 <_dtoa_r+0x900>
 80060aa:	9b08      	ldr	r3, [sp, #32]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dc34      	bgt.n	800611a <_dtoa_r+0x982>
 80060b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	dd31      	ble.n	800611a <_dtoa_r+0x982>
 80060b6:	9b08      	ldr	r3, [sp, #32]
 80060b8:	9306      	str	r3, [sp, #24]
 80060ba:	9b06      	ldr	r3, [sp, #24]
 80060bc:	b963      	cbnz	r3, 80060d8 <_dtoa_r+0x940>
 80060be:	4621      	mov	r1, r4
 80060c0:	2205      	movs	r2, #5
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 faaa 	bl	800661c <__multadd>
 80060c8:	4601      	mov	r1, r0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4650      	mov	r0, sl
 80060ce:	f000 fcbd 	bl	8006a4c <__mcmp>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f73f adbf 	bgt.w	8005c56 <_dtoa_r+0x4be>
 80060d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060da:	9f03      	ldr	r7, [sp, #12]
 80060dc:	ea6f 0b03 	mvn.w	fp, r3
 80060e0:	f04f 0800 	mov.w	r8, #0
 80060e4:	4621      	mov	r1, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 fa76 	bl	80065d8 <_Bfree>
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	f43f aead 	beq.w	8005e4c <_dtoa_r+0x6b4>
 80060f2:	f1b8 0f00 	cmp.w	r8, #0
 80060f6:	d005      	beq.n	8006104 <_dtoa_r+0x96c>
 80060f8:	45b0      	cmp	r8, r6
 80060fa:	d003      	beq.n	8006104 <_dtoa_r+0x96c>
 80060fc:	4641      	mov	r1, r8
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 fa6a 	bl	80065d8 <_Bfree>
 8006104:	4631      	mov	r1, r6
 8006106:	4628      	mov	r0, r5
 8006108:	f000 fa66 	bl	80065d8 <_Bfree>
 800610c:	e69e      	b.n	8005e4c <_dtoa_r+0x6b4>
 800610e:	2400      	movs	r4, #0
 8006110:	4626      	mov	r6, r4
 8006112:	e7e1      	b.n	80060d8 <_dtoa_r+0x940>
 8006114:	46c3      	mov	fp, r8
 8006116:	4626      	mov	r6, r4
 8006118:	e59d      	b.n	8005c56 <_dtoa_r+0x4be>
 800611a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80c8 	beq.w	80062b2 <_dtoa_r+0xb1a>
 8006122:	9b08      	ldr	r3, [sp, #32]
 8006124:	9306      	str	r3, [sp, #24]
 8006126:	2f00      	cmp	r7, #0
 8006128:	dd05      	ble.n	8006136 <_dtoa_r+0x99e>
 800612a:	4631      	mov	r1, r6
 800612c:	463a      	mov	r2, r7
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fc20 	bl	8006974 <__lshift>
 8006134:	4606      	mov	r6, r0
 8006136:	f1b8 0f00 	cmp.w	r8, #0
 800613a:	d05b      	beq.n	80061f4 <_dtoa_r+0xa5c>
 800613c:	4628      	mov	r0, r5
 800613e:	6871      	ldr	r1, [r6, #4]
 8006140:	f000 fa0a 	bl	8006558 <_Balloc>
 8006144:	4607      	mov	r7, r0
 8006146:	b928      	cbnz	r0, 8006154 <_dtoa_r+0x9bc>
 8006148:	4602      	mov	r2, r0
 800614a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800614e:	4b81      	ldr	r3, [pc, #516]	; (8006354 <_dtoa_r+0xbbc>)
 8006150:	f7ff bb36 	b.w	80057c0 <_dtoa_r+0x28>
 8006154:	6932      	ldr	r2, [r6, #16]
 8006156:	f106 010c 	add.w	r1, r6, #12
 800615a:	3202      	adds	r2, #2
 800615c:	0092      	lsls	r2, r2, #2
 800615e:	300c      	adds	r0, #12
 8006160:	f001 f868 	bl	8007234 <memcpy>
 8006164:	2201      	movs	r2, #1
 8006166:	4639      	mov	r1, r7
 8006168:	4628      	mov	r0, r5
 800616a:	f000 fc03 	bl	8006974 <__lshift>
 800616e:	46b0      	mov	r8, r6
 8006170:	4606      	mov	r6, r0
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	9a03      	ldr	r2, [sp, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	9308      	str	r3, [sp, #32]
 800617a:	9b06      	ldr	r3, [sp, #24]
 800617c:	4413      	add	r3, r2
 800617e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006180:	9b04      	ldr	r3, [sp, #16]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	930a      	str	r3, [sp, #40]	; 0x28
 8006188:	9b08      	ldr	r3, [sp, #32]
 800618a:	4621      	mov	r1, r4
 800618c:	3b01      	subs	r3, #1
 800618e:	4650      	mov	r0, sl
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	f7ff fa78 	bl	8005686 <quorem>
 8006196:	4641      	mov	r1, r8
 8006198:	9006      	str	r0, [sp, #24]
 800619a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800619e:	4650      	mov	r0, sl
 80061a0:	f000 fc54 	bl	8006a4c <__mcmp>
 80061a4:	4632      	mov	r2, r6
 80061a6:	9009      	str	r0, [sp, #36]	; 0x24
 80061a8:	4621      	mov	r1, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 fc6a 	bl	8006a84 <__mdiff>
 80061b0:	68c2      	ldr	r2, [r0, #12]
 80061b2:	4607      	mov	r7, r0
 80061b4:	bb02      	cbnz	r2, 80061f8 <_dtoa_r+0xa60>
 80061b6:	4601      	mov	r1, r0
 80061b8:	4650      	mov	r0, sl
 80061ba:	f000 fc47 	bl	8006a4c <__mcmp>
 80061be:	4602      	mov	r2, r0
 80061c0:	4639      	mov	r1, r7
 80061c2:	4628      	mov	r0, r5
 80061c4:	920c      	str	r2, [sp, #48]	; 0x30
 80061c6:	f000 fa07 	bl	80065d8 <_Bfree>
 80061ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ce:	9f08      	ldr	r7, [sp, #32]
 80061d0:	ea43 0102 	orr.w	r1, r3, r2
 80061d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d6:	4319      	orrs	r1, r3
 80061d8:	d110      	bne.n	80061fc <_dtoa_r+0xa64>
 80061da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061de:	d029      	beq.n	8006234 <_dtoa_r+0xa9c>
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd02      	ble.n	80061ec <_dtoa_r+0xa54>
 80061e6:	9b06      	ldr	r3, [sp, #24]
 80061e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	f883 9000 	strb.w	r9, [r3]
 80061f2:	e777      	b.n	80060e4 <_dtoa_r+0x94c>
 80061f4:	4630      	mov	r0, r6
 80061f6:	e7ba      	b.n	800616e <_dtoa_r+0x9d6>
 80061f8:	2201      	movs	r2, #1
 80061fa:	e7e1      	b.n	80061c0 <_dtoa_r+0xa28>
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	db04      	blt.n	800620c <_dtoa_r+0xa74>
 8006202:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006204:	430b      	orrs	r3, r1
 8006206:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006208:	430b      	orrs	r3, r1
 800620a:	d120      	bne.n	800624e <_dtoa_r+0xab6>
 800620c:	2a00      	cmp	r2, #0
 800620e:	dded      	ble.n	80061ec <_dtoa_r+0xa54>
 8006210:	4651      	mov	r1, sl
 8006212:	2201      	movs	r2, #1
 8006214:	4628      	mov	r0, r5
 8006216:	f000 fbad 	bl	8006974 <__lshift>
 800621a:	4621      	mov	r1, r4
 800621c:	4682      	mov	sl, r0
 800621e:	f000 fc15 	bl	8006a4c <__mcmp>
 8006222:	2800      	cmp	r0, #0
 8006224:	dc03      	bgt.n	800622e <_dtoa_r+0xa96>
 8006226:	d1e1      	bne.n	80061ec <_dtoa_r+0xa54>
 8006228:	f019 0f01 	tst.w	r9, #1
 800622c:	d0de      	beq.n	80061ec <_dtoa_r+0xa54>
 800622e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006232:	d1d8      	bne.n	80061e6 <_dtoa_r+0xa4e>
 8006234:	2339      	movs	r3, #57	; 0x39
 8006236:	9a04      	ldr	r2, [sp, #16]
 8006238:	7013      	strb	r3, [r2, #0]
 800623a:	463b      	mov	r3, r7
 800623c:	461f      	mov	r7, r3
 800623e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006242:	3b01      	subs	r3, #1
 8006244:	2a39      	cmp	r2, #57	; 0x39
 8006246:	d06b      	beq.n	8006320 <_dtoa_r+0xb88>
 8006248:	3201      	adds	r2, #1
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	e74a      	b.n	80060e4 <_dtoa_r+0x94c>
 800624e:	2a00      	cmp	r2, #0
 8006250:	dd07      	ble.n	8006262 <_dtoa_r+0xaca>
 8006252:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006256:	d0ed      	beq.n	8006234 <_dtoa_r+0xa9c>
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	f109 0301 	add.w	r3, r9, #1
 800625e:	7013      	strb	r3, [r2, #0]
 8006260:	e740      	b.n	80060e4 <_dtoa_r+0x94c>
 8006262:	9b08      	ldr	r3, [sp, #32]
 8006264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006266:	f803 9c01 	strb.w	r9, [r3, #-1]
 800626a:	4293      	cmp	r3, r2
 800626c:	d042      	beq.n	80062f4 <_dtoa_r+0xb5c>
 800626e:	4651      	mov	r1, sl
 8006270:	2300      	movs	r3, #0
 8006272:	220a      	movs	r2, #10
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f9d1 	bl	800661c <__multadd>
 800627a:	45b0      	cmp	r8, r6
 800627c:	4682      	mov	sl, r0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	f04f 020a 	mov.w	r2, #10
 8006286:	4641      	mov	r1, r8
 8006288:	4628      	mov	r0, r5
 800628a:	d107      	bne.n	800629c <_dtoa_r+0xb04>
 800628c:	f000 f9c6 	bl	800661c <__multadd>
 8006290:	4680      	mov	r8, r0
 8006292:	4606      	mov	r6, r0
 8006294:	9b08      	ldr	r3, [sp, #32]
 8006296:	3301      	adds	r3, #1
 8006298:	9308      	str	r3, [sp, #32]
 800629a:	e775      	b.n	8006188 <_dtoa_r+0x9f0>
 800629c:	f000 f9be 	bl	800661c <__multadd>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4680      	mov	r8, r0
 80062a4:	2300      	movs	r3, #0
 80062a6:	220a      	movs	r2, #10
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 f9b7 	bl	800661c <__multadd>
 80062ae:	4606      	mov	r6, r0
 80062b0:	e7f0      	b.n	8006294 <_dtoa_r+0xafc>
 80062b2:	9b08      	ldr	r3, [sp, #32]
 80062b4:	9306      	str	r3, [sp, #24]
 80062b6:	9f03      	ldr	r7, [sp, #12]
 80062b8:	4621      	mov	r1, r4
 80062ba:	4650      	mov	r0, sl
 80062bc:	f7ff f9e3 	bl	8005686 <quorem>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062c6:	f807 9b01 	strb.w	r9, [r7], #1
 80062ca:	1afa      	subs	r2, r7, r3
 80062cc:	9b06      	ldr	r3, [sp, #24]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	dd07      	ble.n	80062e2 <_dtoa_r+0xb4a>
 80062d2:	4651      	mov	r1, sl
 80062d4:	2300      	movs	r3, #0
 80062d6:	220a      	movs	r2, #10
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 f99f 	bl	800661c <__multadd>
 80062de:	4682      	mov	sl, r0
 80062e0:	e7ea      	b.n	80062b8 <_dtoa_r+0xb20>
 80062e2:	9b06      	ldr	r3, [sp, #24]
 80062e4:	f04f 0800 	mov.w	r8, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfcc      	ite	gt
 80062ec:	461f      	movgt	r7, r3
 80062ee:	2701      	movle	r7, #1
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	441f      	add	r7, r3
 80062f4:	4651      	mov	r1, sl
 80062f6:	2201      	movs	r2, #1
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 fb3b 	bl	8006974 <__lshift>
 80062fe:	4621      	mov	r1, r4
 8006300:	4682      	mov	sl, r0
 8006302:	f000 fba3 	bl	8006a4c <__mcmp>
 8006306:	2800      	cmp	r0, #0
 8006308:	dc97      	bgt.n	800623a <_dtoa_r+0xaa2>
 800630a:	d102      	bne.n	8006312 <_dtoa_r+0xb7a>
 800630c:	f019 0f01 	tst.w	r9, #1
 8006310:	d193      	bne.n	800623a <_dtoa_r+0xaa2>
 8006312:	463b      	mov	r3, r7
 8006314:	461f      	mov	r7, r3
 8006316:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631a:	2a30      	cmp	r2, #48	; 0x30
 800631c:	d0fa      	beq.n	8006314 <_dtoa_r+0xb7c>
 800631e:	e6e1      	b.n	80060e4 <_dtoa_r+0x94c>
 8006320:	9a03      	ldr	r2, [sp, #12]
 8006322:	429a      	cmp	r2, r3
 8006324:	d18a      	bne.n	800623c <_dtoa_r+0xaa4>
 8006326:	2331      	movs	r3, #49	; 0x31
 8006328:	f10b 0b01 	add.w	fp, fp, #1
 800632c:	e797      	b.n	800625e <_dtoa_r+0xac6>
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <_dtoa_r+0xbc0>)
 8006330:	f7ff ba9f 	b.w	8005872 <_dtoa_r+0xda>
 8006334:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006336:	2b00      	cmp	r3, #0
 8006338:	f47f aa77 	bne.w	800582a <_dtoa_r+0x92>
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <_dtoa_r+0xbc4>)
 800633e:	f7ff ba98 	b.w	8005872 <_dtoa_r+0xda>
 8006342:	9b06      	ldr	r3, [sp, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dcb6      	bgt.n	80062b6 <_dtoa_r+0xb1e>
 8006348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800634a:	2b02      	cmp	r3, #2
 800634c:	f73f aeb5 	bgt.w	80060ba <_dtoa_r+0x922>
 8006350:	e7b1      	b.n	80062b6 <_dtoa_r+0xb1e>
 8006352:	bf00      	nop
 8006354:	080078f2 	.word	0x080078f2
 8006358:	08007852 	.word	0x08007852
 800635c:	08007876 	.word	0x08007876

08006360 <_free_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4605      	mov	r5, r0
 8006364:	2900      	cmp	r1, #0
 8006366:	d040      	beq.n	80063ea <_free_r+0x8a>
 8006368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636c:	1f0c      	subs	r4, r1, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfb8      	it	lt
 8006372:	18e4      	addlt	r4, r4, r3
 8006374:	f000 f8e4 	bl	8006540 <__malloc_lock>
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <_free_r+0x8c>)
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	b933      	cbnz	r3, 800638c <_free_r+0x2c>
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	6014      	str	r4, [r2, #0]
 8006382:	4628      	mov	r0, r5
 8006384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006388:	f000 b8e0 	b.w	800654c <__malloc_unlock>
 800638c:	42a3      	cmp	r3, r4
 800638e:	d908      	bls.n	80063a2 <_free_r+0x42>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	1821      	adds	r1, r4, r0
 8006394:	428b      	cmp	r3, r1
 8006396:	bf01      	itttt	eq
 8006398:	6819      	ldreq	r1, [r3, #0]
 800639a:	685b      	ldreq	r3, [r3, #4]
 800639c:	1809      	addeq	r1, r1, r0
 800639e:	6021      	streq	r1, [r4, #0]
 80063a0:	e7ed      	b.n	800637e <_free_r+0x1e>
 80063a2:	461a      	mov	r2, r3
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	b10b      	cbz	r3, 80063ac <_free_r+0x4c>
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	d9fa      	bls.n	80063a2 <_free_r+0x42>
 80063ac:	6811      	ldr	r1, [r2, #0]
 80063ae:	1850      	adds	r0, r2, r1
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d10b      	bne.n	80063cc <_free_r+0x6c>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	4401      	add	r1, r0
 80063b8:	1850      	adds	r0, r2, r1
 80063ba:	4283      	cmp	r3, r0
 80063bc:	6011      	str	r1, [r2, #0]
 80063be:	d1e0      	bne.n	8006382 <_free_r+0x22>
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4408      	add	r0, r1
 80063c6:	6010      	str	r0, [r2, #0]
 80063c8:	6053      	str	r3, [r2, #4]
 80063ca:	e7da      	b.n	8006382 <_free_r+0x22>
 80063cc:	d902      	bls.n	80063d4 <_free_r+0x74>
 80063ce:	230c      	movs	r3, #12
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	e7d6      	b.n	8006382 <_free_r+0x22>
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	1821      	adds	r1, r4, r0
 80063d8:	428b      	cmp	r3, r1
 80063da:	bf01      	itttt	eq
 80063dc:	6819      	ldreq	r1, [r3, #0]
 80063de:	685b      	ldreq	r3, [r3, #4]
 80063e0:	1809      	addeq	r1, r1, r0
 80063e2:	6021      	streq	r1, [r4, #0]
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	6054      	str	r4, [r2, #4]
 80063e8:	e7cb      	b.n	8006382 <_free_r+0x22>
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	20000490 	.word	0x20000490

080063f0 <malloc>:
 80063f0:	4b02      	ldr	r3, [pc, #8]	; (80063fc <malloc+0xc>)
 80063f2:	4601      	mov	r1, r0
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	f000 b823 	b.w	8006440 <_malloc_r>
 80063fa:	bf00      	nop
 80063fc:	20000070 	.word	0x20000070

08006400 <sbrk_aligned>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4e0e      	ldr	r6, [pc, #56]	; (800643c <sbrk_aligned+0x3c>)
 8006404:	460c      	mov	r4, r1
 8006406:	6831      	ldr	r1, [r6, #0]
 8006408:	4605      	mov	r5, r0
 800640a:	b911      	cbnz	r1, 8006412 <sbrk_aligned+0x12>
 800640c:	f000 ff02 	bl	8007214 <_sbrk_r>
 8006410:	6030      	str	r0, [r6, #0]
 8006412:	4621      	mov	r1, r4
 8006414:	4628      	mov	r0, r5
 8006416:	f000 fefd 	bl	8007214 <_sbrk_r>
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	d00a      	beq.n	8006434 <sbrk_aligned+0x34>
 800641e:	1cc4      	adds	r4, r0, #3
 8006420:	f024 0403 	bic.w	r4, r4, #3
 8006424:	42a0      	cmp	r0, r4
 8006426:	d007      	beq.n	8006438 <sbrk_aligned+0x38>
 8006428:	1a21      	subs	r1, r4, r0
 800642a:	4628      	mov	r0, r5
 800642c:	f000 fef2 	bl	8007214 <_sbrk_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d101      	bne.n	8006438 <sbrk_aligned+0x38>
 8006434:	f04f 34ff 	mov.w	r4, #4294967295
 8006438:	4620      	mov	r0, r4
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	20000494 	.word	0x20000494

08006440 <_malloc_r>:
 8006440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006444:	1ccd      	adds	r5, r1, #3
 8006446:	f025 0503 	bic.w	r5, r5, #3
 800644a:	3508      	adds	r5, #8
 800644c:	2d0c      	cmp	r5, #12
 800644e:	bf38      	it	cc
 8006450:	250c      	movcc	r5, #12
 8006452:	2d00      	cmp	r5, #0
 8006454:	4607      	mov	r7, r0
 8006456:	db01      	blt.n	800645c <_malloc_r+0x1c>
 8006458:	42a9      	cmp	r1, r5
 800645a:	d905      	bls.n	8006468 <_malloc_r+0x28>
 800645c:	230c      	movs	r3, #12
 800645e:	2600      	movs	r6, #0
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	4630      	mov	r0, r6
 8006464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006468:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800653c <_malloc_r+0xfc>
 800646c:	f000 f868 	bl	8006540 <__malloc_lock>
 8006470:	f8d8 3000 	ldr.w	r3, [r8]
 8006474:	461c      	mov	r4, r3
 8006476:	bb5c      	cbnz	r4, 80064d0 <_malloc_r+0x90>
 8006478:	4629      	mov	r1, r5
 800647a:	4638      	mov	r0, r7
 800647c:	f7ff ffc0 	bl	8006400 <sbrk_aligned>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	4604      	mov	r4, r0
 8006484:	d155      	bne.n	8006532 <_malloc_r+0xf2>
 8006486:	f8d8 4000 	ldr.w	r4, [r8]
 800648a:	4626      	mov	r6, r4
 800648c:	2e00      	cmp	r6, #0
 800648e:	d145      	bne.n	800651c <_malloc_r+0xdc>
 8006490:	2c00      	cmp	r4, #0
 8006492:	d048      	beq.n	8006526 <_malloc_r+0xe6>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	4631      	mov	r1, r6
 8006498:	4638      	mov	r0, r7
 800649a:	eb04 0903 	add.w	r9, r4, r3
 800649e:	f000 feb9 	bl	8007214 <_sbrk_r>
 80064a2:	4581      	cmp	r9, r0
 80064a4:	d13f      	bne.n	8006526 <_malloc_r+0xe6>
 80064a6:	6821      	ldr	r1, [r4, #0]
 80064a8:	4638      	mov	r0, r7
 80064aa:	1a6d      	subs	r5, r5, r1
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7ff ffa7 	bl	8006400 <sbrk_aligned>
 80064b2:	3001      	adds	r0, #1
 80064b4:	d037      	beq.n	8006526 <_malloc_r+0xe6>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	442b      	add	r3, r5
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	f8d8 3000 	ldr.w	r3, [r8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d038      	beq.n	8006536 <_malloc_r+0xf6>
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	42a2      	cmp	r2, r4
 80064c8:	d12b      	bne.n	8006522 <_malloc_r+0xe2>
 80064ca:	2200      	movs	r2, #0
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	e00f      	b.n	80064f0 <_malloc_r+0xb0>
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	1b52      	subs	r2, r2, r5
 80064d4:	d41f      	bmi.n	8006516 <_malloc_r+0xd6>
 80064d6:	2a0b      	cmp	r2, #11
 80064d8:	d917      	bls.n	800650a <_malloc_r+0xca>
 80064da:	1961      	adds	r1, r4, r5
 80064dc:	42a3      	cmp	r3, r4
 80064de:	6025      	str	r5, [r4, #0]
 80064e0:	bf18      	it	ne
 80064e2:	6059      	strne	r1, [r3, #4]
 80064e4:	6863      	ldr	r3, [r4, #4]
 80064e6:	bf08      	it	eq
 80064e8:	f8c8 1000 	streq.w	r1, [r8]
 80064ec:	5162      	str	r2, [r4, r5]
 80064ee:	604b      	str	r3, [r1, #4]
 80064f0:	4638      	mov	r0, r7
 80064f2:	f104 060b 	add.w	r6, r4, #11
 80064f6:	f000 f829 	bl	800654c <__malloc_unlock>
 80064fa:	f026 0607 	bic.w	r6, r6, #7
 80064fe:	1d23      	adds	r3, r4, #4
 8006500:	1af2      	subs	r2, r6, r3
 8006502:	d0ae      	beq.n	8006462 <_malloc_r+0x22>
 8006504:	1b9b      	subs	r3, r3, r6
 8006506:	50a3      	str	r3, [r4, r2]
 8006508:	e7ab      	b.n	8006462 <_malloc_r+0x22>
 800650a:	42a3      	cmp	r3, r4
 800650c:	6862      	ldr	r2, [r4, #4]
 800650e:	d1dd      	bne.n	80064cc <_malloc_r+0x8c>
 8006510:	f8c8 2000 	str.w	r2, [r8]
 8006514:	e7ec      	b.n	80064f0 <_malloc_r+0xb0>
 8006516:	4623      	mov	r3, r4
 8006518:	6864      	ldr	r4, [r4, #4]
 800651a:	e7ac      	b.n	8006476 <_malloc_r+0x36>
 800651c:	4634      	mov	r4, r6
 800651e:	6876      	ldr	r6, [r6, #4]
 8006520:	e7b4      	b.n	800648c <_malloc_r+0x4c>
 8006522:	4613      	mov	r3, r2
 8006524:	e7cc      	b.n	80064c0 <_malloc_r+0x80>
 8006526:	230c      	movs	r3, #12
 8006528:	4638      	mov	r0, r7
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	f000 f80e 	bl	800654c <__malloc_unlock>
 8006530:	e797      	b.n	8006462 <_malloc_r+0x22>
 8006532:	6025      	str	r5, [r4, #0]
 8006534:	e7dc      	b.n	80064f0 <_malloc_r+0xb0>
 8006536:	605b      	str	r3, [r3, #4]
 8006538:	deff      	udf	#255	; 0xff
 800653a:	bf00      	nop
 800653c:	20000490 	.word	0x20000490

08006540 <__malloc_lock>:
 8006540:	4801      	ldr	r0, [pc, #4]	; (8006548 <__malloc_lock+0x8>)
 8006542:	f7ff b890 	b.w	8005666 <__retarget_lock_acquire_recursive>
 8006546:	bf00      	nop
 8006548:	2000048c 	.word	0x2000048c

0800654c <__malloc_unlock>:
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <__malloc_unlock+0x8>)
 800654e:	f7ff b88b 	b.w	8005668 <__retarget_lock_release_recursive>
 8006552:	bf00      	nop
 8006554:	2000048c 	.word	0x2000048c

08006558 <_Balloc>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	69c6      	ldr	r6, [r0, #28]
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	b976      	cbnz	r6, 8006580 <_Balloc+0x28>
 8006562:	2010      	movs	r0, #16
 8006564:	f7ff ff44 	bl	80063f0 <malloc>
 8006568:	4602      	mov	r2, r0
 800656a:	61e0      	str	r0, [r4, #28]
 800656c:	b920      	cbnz	r0, 8006578 <_Balloc+0x20>
 800656e:	216b      	movs	r1, #107	; 0x6b
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <_Balloc+0x78>)
 8006572:	4818      	ldr	r0, [pc, #96]	; (80065d4 <_Balloc+0x7c>)
 8006574:	f000 fe6c 	bl	8007250 <__assert_func>
 8006578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800657c:	6006      	str	r6, [r0, #0]
 800657e:	60c6      	str	r6, [r0, #12]
 8006580:	69e6      	ldr	r6, [r4, #28]
 8006582:	68f3      	ldr	r3, [r6, #12]
 8006584:	b183      	cbz	r3, 80065a8 <_Balloc+0x50>
 8006586:	69e3      	ldr	r3, [r4, #28]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800658e:	b9b8      	cbnz	r0, 80065c0 <_Balloc+0x68>
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f605 	lsl.w	r6, r1, r5
 8006596:	1d72      	adds	r2, r6, #5
 8006598:	4620      	mov	r0, r4
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	f000 fe76 	bl	800728c <_calloc_r>
 80065a0:	b160      	cbz	r0, 80065bc <_Balloc+0x64>
 80065a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065a6:	e00e      	b.n	80065c6 <_Balloc+0x6e>
 80065a8:	2221      	movs	r2, #33	; 0x21
 80065aa:	2104      	movs	r1, #4
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fe6d 	bl	800728c <_calloc_r>
 80065b2:	69e3      	ldr	r3, [r4, #28]
 80065b4:	60f0      	str	r0, [r6, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e4      	bne.n	8006586 <_Balloc+0x2e>
 80065bc:	2000      	movs	r0, #0
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	6802      	ldr	r2, [r0, #0]
 80065c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065c6:	2300      	movs	r3, #0
 80065c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065cc:	e7f7      	b.n	80065be <_Balloc+0x66>
 80065ce:	bf00      	nop
 80065d0:	08007883 	.word	0x08007883
 80065d4:	08007903 	.word	0x08007903

080065d8 <_Bfree>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	69c6      	ldr	r6, [r0, #28]
 80065dc:	4605      	mov	r5, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	b976      	cbnz	r6, 8006600 <_Bfree+0x28>
 80065e2:	2010      	movs	r0, #16
 80065e4:	f7ff ff04 	bl	80063f0 <malloc>
 80065e8:	4602      	mov	r2, r0
 80065ea:	61e8      	str	r0, [r5, #28]
 80065ec:	b920      	cbnz	r0, 80065f8 <_Bfree+0x20>
 80065ee:	218f      	movs	r1, #143	; 0x8f
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <_Bfree+0x3c>)
 80065f2:	4809      	ldr	r0, [pc, #36]	; (8006618 <_Bfree+0x40>)
 80065f4:	f000 fe2c 	bl	8007250 <__assert_func>
 80065f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065fc:	6006      	str	r6, [r0, #0]
 80065fe:	60c6      	str	r6, [r0, #12]
 8006600:	b13c      	cbz	r4, 8006612 <_Bfree+0x3a>
 8006602:	69eb      	ldr	r3, [r5, #28]
 8006604:	6862      	ldr	r2, [r4, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800660c:	6021      	str	r1, [r4, #0]
 800660e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	08007883 	.word	0x08007883
 8006618:	08007903 	.word	0x08007903

0800661c <__multadd>:
 800661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006620:	4607      	mov	r7, r0
 8006622:	460c      	mov	r4, r1
 8006624:	461e      	mov	r6, r3
 8006626:	2000      	movs	r0, #0
 8006628:	690d      	ldr	r5, [r1, #16]
 800662a:	f101 0c14 	add.w	ip, r1, #20
 800662e:	f8dc 3000 	ldr.w	r3, [ip]
 8006632:	3001      	adds	r0, #1
 8006634:	b299      	uxth	r1, r3
 8006636:	fb02 6101 	mla	r1, r2, r1, r6
 800663a:	0c1e      	lsrs	r6, r3, #16
 800663c:	0c0b      	lsrs	r3, r1, #16
 800663e:	fb02 3306 	mla	r3, r2, r6, r3
 8006642:	b289      	uxth	r1, r1
 8006644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006648:	4285      	cmp	r5, r0
 800664a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800664e:	f84c 1b04 	str.w	r1, [ip], #4
 8006652:	dcec      	bgt.n	800662e <__multadd+0x12>
 8006654:	b30e      	cbz	r6, 800669a <__multadd+0x7e>
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	42ab      	cmp	r3, r5
 800665a:	dc19      	bgt.n	8006690 <__multadd+0x74>
 800665c:	6861      	ldr	r1, [r4, #4]
 800665e:	4638      	mov	r0, r7
 8006660:	3101      	adds	r1, #1
 8006662:	f7ff ff79 	bl	8006558 <_Balloc>
 8006666:	4680      	mov	r8, r0
 8006668:	b928      	cbnz	r0, 8006676 <__multadd+0x5a>
 800666a:	4602      	mov	r2, r0
 800666c:	21ba      	movs	r1, #186	; 0xba
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <__multadd+0x84>)
 8006670:	480c      	ldr	r0, [pc, #48]	; (80066a4 <__multadd+0x88>)
 8006672:	f000 fded 	bl	8007250 <__assert_func>
 8006676:	6922      	ldr	r2, [r4, #16]
 8006678:	f104 010c 	add.w	r1, r4, #12
 800667c:	3202      	adds	r2, #2
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	300c      	adds	r0, #12
 8006682:	f000 fdd7 	bl	8007234 <memcpy>
 8006686:	4621      	mov	r1, r4
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa5 	bl	80065d8 <_Bfree>
 800668e:	4644      	mov	r4, r8
 8006690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006694:	3501      	adds	r5, #1
 8006696:	615e      	str	r6, [r3, #20]
 8006698:	6125      	str	r5, [r4, #16]
 800669a:	4620      	mov	r0, r4
 800669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a0:	080078f2 	.word	0x080078f2
 80066a4:	08007903 	.word	0x08007903

080066a8 <__hi0bits>:
 80066a8:	0c02      	lsrs	r2, r0, #16
 80066aa:	0412      	lsls	r2, r2, #16
 80066ac:	4603      	mov	r3, r0
 80066ae:	b9ca      	cbnz	r2, 80066e4 <__hi0bits+0x3c>
 80066b0:	0403      	lsls	r3, r0, #16
 80066b2:	2010      	movs	r0, #16
 80066b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066b8:	bf04      	itt	eq
 80066ba:	021b      	lsleq	r3, r3, #8
 80066bc:	3008      	addeq	r0, #8
 80066be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066c2:	bf04      	itt	eq
 80066c4:	011b      	lsleq	r3, r3, #4
 80066c6:	3004      	addeq	r0, #4
 80066c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066cc:	bf04      	itt	eq
 80066ce:	009b      	lsleq	r3, r3, #2
 80066d0:	3002      	addeq	r0, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	db05      	blt.n	80066e2 <__hi0bits+0x3a>
 80066d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066da:	f100 0001 	add.w	r0, r0, #1
 80066de:	bf08      	it	eq
 80066e0:	2020      	moveq	r0, #32
 80066e2:	4770      	bx	lr
 80066e4:	2000      	movs	r0, #0
 80066e6:	e7e5      	b.n	80066b4 <__hi0bits+0xc>

080066e8 <__lo0bits>:
 80066e8:	6803      	ldr	r3, [r0, #0]
 80066ea:	4602      	mov	r2, r0
 80066ec:	f013 0007 	ands.w	r0, r3, #7
 80066f0:	d00b      	beq.n	800670a <__lo0bits+0x22>
 80066f2:	07d9      	lsls	r1, r3, #31
 80066f4:	d421      	bmi.n	800673a <__lo0bits+0x52>
 80066f6:	0798      	lsls	r0, r3, #30
 80066f8:	bf49      	itett	mi
 80066fa:	085b      	lsrmi	r3, r3, #1
 80066fc:	089b      	lsrpl	r3, r3, #2
 80066fe:	2001      	movmi	r0, #1
 8006700:	6013      	strmi	r3, [r2, #0]
 8006702:	bf5c      	itt	pl
 8006704:	2002      	movpl	r0, #2
 8006706:	6013      	strpl	r3, [r2, #0]
 8006708:	4770      	bx	lr
 800670a:	b299      	uxth	r1, r3
 800670c:	b909      	cbnz	r1, 8006712 <__lo0bits+0x2a>
 800670e:	2010      	movs	r0, #16
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	b2d9      	uxtb	r1, r3
 8006714:	b909      	cbnz	r1, 800671a <__lo0bits+0x32>
 8006716:	3008      	adds	r0, #8
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	0719      	lsls	r1, r3, #28
 800671c:	bf04      	itt	eq
 800671e:	091b      	lsreq	r3, r3, #4
 8006720:	3004      	addeq	r0, #4
 8006722:	0799      	lsls	r1, r3, #30
 8006724:	bf04      	itt	eq
 8006726:	089b      	lsreq	r3, r3, #2
 8006728:	3002      	addeq	r0, #2
 800672a:	07d9      	lsls	r1, r3, #31
 800672c:	d403      	bmi.n	8006736 <__lo0bits+0x4e>
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	f100 0001 	add.w	r0, r0, #1
 8006734:	d003      	beq.n	800673e <__lo0bits+0x56>
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4770      	bx	lr
 800673a:	2000      	movs	r0, #0
 800673c:	4770      	bx	lr
 800673e:	2020      	movs	r0, #32
 8006740:	4770      	bx	lr
	...

08006744 <__i2b>:
 8006744:	b510      	push	{r4, lr}
 8006746:	460c      	mov	r4, r1
 8006748:	2101      	movs	r1, #1
 800674a:	f7ff ff05 	bl	8006558 <_Balloc>
 800674e:	4602      	mov	r2, r0
 8006750:	b928      	cbnz	r0, 800675e <__i2b+0x1a>
 8006752:	f240 1145 	movw	r1, #325	; 0x145
 8006756:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__i2b+0x24>)
 8006758:	4804      	ldr	r0, [pc, #16]	; (800676c <__i2b+0x28>)
 800675a:	f000 fd79 	bl	8007250 <__assert_func>
 800675e:	2301      	movs	r3, #1
 8006760:	6144      	str	r4, [r0, #20]
 8006762:	6103      	str	r3, [r0, #16]
 8006764:	bd10      	pop	{r4, pc}
 8006766:	bf00      	nop
 8006768:	080078f2 	.word	0x080078f2
 800676c:	08007903 	.word	0x08007903

08006770 <__multiply>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	4691      	mov	r9, r2
 8006776:	690a      	ldr	r2, [r1, #16]
 8006778:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800677c:	460c      	mov	r4, r1
 800677e:	429a      	cmp	r2, r3
 8006780:	bfbe      	ittt	lt
 8006782:	460b      	movlt	r3, r1
 8006784:	464c      	movlt	r4, r9
 8006786:	4699      	movlt	r9, r3
 8006788:	6927      	ldr	r7, [r4, #16]
 800678a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	6861      	ldr	r1, [r4, #4]
 8006792:	eb07 060a 	add.w	r6, r7, sl
 8006796:	42b3      	cmp	r3, r6
 8006798:	b085      	sub	sp, #20
 800679a:	bfb8      	it	lt
 800679c:	3101      	addlt	r1, #1
 800679e:	f7ff fedb 	bl	8006558 <_Balloc>
 80067a2:	b930      	cbnz	r0, 80067b2 <__multiply+0x42>
 80067a4:	4602      	mov	r2, r0
 80067a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80067aa:	4b43      	ldr	r3, [pc, #268]	; (80068b8 <__multiply+0x148>)
 80067ac:	4843      	ldr	r0, [pc, #268]	; (80068bc <__multiply+0x14c>)
 80067ae:	f000 fd4f 	bl	8007250 <__assert_func>
 80067b2:	f100 0514 	add.w	r5, r0, #20
 80067b6:	462b      	mov	r3, r5
 80067b8:	2200      	movs	r2, #0
 80067ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067be:	4543      	cmp	r3, r8
 80067c0:	d321      	bcc.n	8006806 <__multiply+0x96>
 80067c2:	f104 0314 	add.w	r3, r4, #20
 80067c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067ca:	f109 0314 	add.w	r3, r9, #20
 80067ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067d2:	9202      	str	r2, [sp, #8]
 80067d4:	1b3a      	subs	r2, r7, r4
 80067d6:	3a15      	subs	r2, #21
 80067d8:	f022 0203 	bic.w	r2, r2, #3
 80067dc:	3204      	adds	r2, #4
 80067de:	f104 0115 	add.w	r1, r4, #21
 80067e2:	428f      	cmp	r7, r1
 80067e4:	bf38      	it	cc
 80067e6:	2204      	movcc	r2, #4
 80067e8:	9201      	str	r2, [sp, #4]
 80067ea:	9a02      	ldr	r2, [sp, #8]
 80067ec:	9303      	str	r3, [sp, #12]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d80c      	bhi.n	800680c <__multiply+0x9c>
 80067f2:	2e00      	cmp	r6, #0
 80067f4:	dd03      	ble.n	80067fe <__multiply+0x8e>
 80067f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d05a      	beq.n	80068b4 <__multiply+0x144>
 80067fe:	6106      	str	r6, [r0, #16]
 8006800:	b005      	add	sp, #20
 8006802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006806:	f843 2b04 	str.w	r2, [r3], #4
 800680a:	e7d8      	b.n	80067be <__multiply+0x4e>
 800680c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006810:	f1ba 0f00 	cmp.w	sl, #0
 8006814:	d023      	beq.n	800685e <__multiply+0xee>
 8006816:	46a9      	mov	r9, r5
 8006818:	f04f 0c00 	mov.w	ip, #0
 800681c:	f104 0e14 	add.w	lr, r4, #20
 8006820:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006824:	f8d9 1000 	ldr.w	r1, [r9]
 8006828:	fa1f fb82 	uxth.w	fp, r2
 800682c:	b289      	uxth	r1, r1
 800682e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006832:	4461      	add	r1, ip
 8006834:	f8d9 c000 	ldr.w	ip, [r9]
 8006838:	0c12      	lsrs	r2, r2, #16
 800683a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800683e:	fb0a c202 	mla	r2, sl, r2, ip
 8006842:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006846:	b289      	uxth	r1, r1
 8006848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800684c:	4577      	cmp	r7, lr
 800684e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006852:	f849 1b04 	str.w	r1, [r9], #4
 8006856:	d8e3      	bhi.n	8006820 <__multiply+0xb0>
 8006858:	9a01      	ldr	r2, [sp, #4]
 800685a:	f845 c002 	str.w	ip, [r5, r2]
 800685e:	9a03      	ldr	r2, [sp, #12]
 8006860:	3304      	adds	r3, #4
 8006862:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006866:	f1b9 0f00 	cmp.w	r9, #0
 800686a:	d021      	beq.n	80068b0 <__multiply+0x140>
 800686c:	46ae      	mov	lr, r5
 800686e:	f04f 0a00 	mov.w	sl, #0
 8006872:	6829      	ldr	r1, [r5, #0]
 8006874:	f104 0c14 	add.w	ip, r4, #20
 8006878:	f8bc b000 	ldrh.w	fp, [ip]
 800687c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006880:	b289      	uxth	r1, r1
 8006882:	fb09 220b 	mla	r2, r9, fp, r2
 8006886:	4452      	add	r2, sl
 8006888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800688c:	f84e 1b04 	str.w	r1, [lr], #4
 8006890:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006894:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006898:	f8be 1000 	ldrh.w	r1, [lr]
 800689c:	4567      	cmp	r7, ip
 800689e:	fb09 110a 	mla	r1, r9, sl, r1
 80068a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80068a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068aa:	d8e5      	bhi.n	8006878 <__multiply+0x108>
 80068ac:	9a01      	ldr	r2, [sp, #4]
 80068ae:	50a9      	str	r1, [r5, r2]
 80068b0:	3504      	adds	r5, #4
 80068b2:	e79a      	b.n	80067ea <__multiply+0x7a>
 80068b4:	3e01      	subs	r6, #1
 80068b6:	e79c      	b.n	80067f2 <__multiply+0x82>
 80068b8:	080078f2 	.word	0x080078f2
 80068bc:	08007903 	.word	0x08007903

080068c0 <__pow5mult>:
 80068c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c4:	4615      	mov	r5, r2
 80068c6:	f012 0203 	ands.w	r2, r2, #3
 80068ca:	4606      	mov	r6, r0
 80068cc:	460f      	mov	r7, r1
 80068ce:	d007      	beq.n	80068e0 <__pow5mult+0x20>
 80068d0:	4c25      	ldr	r4, [pc, #148]	; (8006968 <__pow5mult+0xa8>)
 80068d2:	3a01      	subs	r2, #1
 80068d4:	2300      	movs	r3, #0
 80068d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068da:	f7ff fe9f 	bl	800661c <__multadd>
 80068de:	4607      	mov	r7, r0
 80068e0:	10ad      	asrs	r5, r5, #2
 80068e2:	d03d      	beq.n	8006960 <__pow5mult+0xa0>
 80068e4:	69f4      	ldr	r4, [r6, #28]
 80068e6:	b97c      	cbnz	r4, 8006908 <__pow5mult+0x48>
 80068e8:	2010      	movs	r0, #16
 80068ea:	f7ff fd81 	bl	80063f0 <malloc>
 80068ee:	4602      	mov	r2, r0
 80068f0:	61f0      	str	r0, [r6, #28]
 80068f2:	b928      	cbnz	r0, 8006900 <__pow5mult+0x40>
 80068f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <__pow5mult+0xac>)
 80068fa:	481d      	ldr	r0, [pc, #116]	; (8006970 <__pow5mult+0xb0>)
 80068fc:	f000 fca8 	bl	8007250 <__assert_func>
 8006900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006904:	6004      	str	r4, [r0, #0]
 8006906:	60c4      	str	r4, [r0, #12]
 8006908:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800690c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006910:	b94c      	cbnz	r4, 8006926 <__pow5mult+0x66>
 8006912:	f240 2171 	movw	r1, #625	; 0x271
 8006916:	4630      	mov	r0, r6
 8006918:	f7ff ff14 	bl	8006744 <__i2b>
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	f8c8 0008 	str.w	r0, [r8, #8]
 8006924:	6003      	str	r3, [r0, #0]
 8006926:	f04f 0900 	mov.w	r9, #0
 800692a:	07eb      	lsls	r3, r5, #31
 800692c:	d50a      	bpl.n	8006944 <__pow5mult+0x84>
 800692e:	4639      	mov	r1, r7
 8006930:	4622      	mov	r2, r4
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff ff1c 	bl	8006770 <__multiply>
 8006938:	4680      	mov	r8, r0
 800693a:	4639      	mov	r1, r7
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff fe4b 	bl	80065d8 <_Bfree>
 8006942:	4647      	mov	r7, r8
 8006944:	106d      	asrs	r5, r5, #1
 8006946:	d00b      	beq.n	8006960 <__pow5mult+0xa0>
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	b938      	cbnz	r0, 800695c <__pow5mult+0x9c>
 800694c:	4622      	mov	r2, r4
 800694e:	4621      	mov	r1, r4
 8006950:	4630      	mov	r0, r6
 8006952:	f7ff ff0d 	bl	8006770 <__multiply>
 8006956:	6020      	str	r0, [r4, #0]
 8006958:	f8c0 9000 	str.w	r9, [r0]
 800695c:	4604      	mov	r4, r0
 800695e:	e7e4      	b.n	800692a <__pow5mult+0x6a>
 8006960:	4638      	mov	r0, r7
 8006962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006966:	bf00      	nop
 8006968:	08007a50 	.word	0x08007a50
 800696c:	08007883 	.word	0x08007883
 8006970:	08007903 	.word	0x08007903

08006974 <__lshift>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	460c      	mov	r4, r1
 800697a:	4607      	mov	r7, r0
 800697c:	4691      	mov	r9, r2
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	6849      	ldr	r1, [r1, #4]
 8006982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800698c:	f108 0601 	add.w	r6, r8, #1
 8006990:	42b3      	cmp	r3, r6
 8006992:	db0b      	blt.n	80069ac <__lshift+0x38>
 8006994:	4638      	mov	r0, r7
 8006996:	f7ff fddf 	bl	8006558 <_Balloc>
 800699a:	4605      	mov	r5, r0
 800699c:	b948      	cbnz	r0, 80069b2 <__lshift+0x3e>
 800699e:	4602      	mov	r2, r0
 80069a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80069a4:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <__lshift+0xd0>)
 80069a6:	4828      	ldr	r0, [pc, #160]	; (8006a48 <__lshift+0xd4>)
 80069a8:	f000 fc52 	bl	8007250 <__assert_func>
 80069ac:	3101      	adds	r1, #1
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	e7ee      	b.n	8006990 <__lshift+0x1c>
 80069b2:	2300      	movs	r3, #0
 80069b4:	f100 0114 	add.w	r1, r0, #20
 80069b8:	f100 0210 	add.w	r2, r0, #16
 80069bc:	4618      	mov	r0, r3
 80069be:	4553      	cmp	r3, sl
 80069c0:	db33      	blt.n	8006a2a <__lshift+0xb6>
 80069c2:	6920      	ldr	r0, [r4, #16]
 80069c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069c8:	f104 0314 	add.w	r3, r4, #20
 80069cc:	f019 091f 	ands.w	r9, r9, #31
 80069d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069d8:	d02b      	beq.n	8006a32 <__lshift+0xbe>
 80069da:	468a      	mov	sl, r1
 80069dc:	2200      	movs	r2, #0
 80069de:	f1c9 0e20 	rsb	lr, r9, #32
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	fa00 f009 	lsl.w	r0, r0, r9
 80069e8:	4310      	orrs	r0, r2
 80069ea:	f84a 0b04 	str.w	r0, [sl], #4
 80069ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f2:	459c      	cmp	ip, r3
 80069f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80069f8:	d8f3      	bhi.n	80069e2 <__lshift+0x6e>
 80069fa:	ebac 0304 	sub.w	r3, ip, r4
 80069fe:	3b15      	subs	r3, #21
 8006a00:	f023 0303 	bic.w	r3, r3, #3
 8006a04:	3304      	adds	r3, #4
 8006a06:	f104 0015 	add.w	r0, r4, #21
 8006a0a:	4584      	cmp	ip, r0
 8006a0c:	bf38      	it	cc
 8006a0e:	2304      	movcc	r3, #4
 8006a10:	50ca      	str	r2, [r1, r3]
 8006a12:	b10a      	cbz	r2, 8006a18 <__lshift+0xa4>
 8006a14:	f108 0602 	add.w	r6, r8, #2
 8006a18:	3e01      	subs	r6, #1
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	612e      	str	r6, [r5, #16]
 8006a20:	f7ff fdda 	bl	80065d8 <_Bfree>
 8006a24:	4628      	mov	r0, r5
 8006a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a2e:	3301      	adds	r3, #1
 8006a30:	e7c5      	b.n	80069be <__lshift+0x4a>
 8006a32:	3904      	subs	r1, #4
 8006a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a38:	459c      	cmp	ip, r3
 8006a3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a3e:	d8f9      	bhi.n	8006a34 <__lshift+0xc0>
 8006a40:	e7ea      	b.n	8006a18 <__lshift+0xa4>
 8006a42:	bf00      	nop
 8006a44:	080078f2 	.word	0x080078f2
 8006a48:	08007903 	.word	0x08007903

08006a4c <__mcmp>:
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	690a      	ldr	r2, [r1, #16]
 8006a50:	6900      	ldr	r0, [r0, #16]
 8006a52:	b530      	push	{r4, r5, lr}
 8006a54:	1a80      	subs	r0, r0, r2
 8006a56:	d10d      	bne.n	8006a74 <__mcmp+0x28>
 8006a58:	3314      	adds	r3, #20
 8006a5a:	3114      	adds	r1, #20
 8006a5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a6c:	4295      	cmp	r5, r2
 8006a6e:	d002      	beq.n	8006a76 <__mcmp+0x2a>
 8006a70:	d304      	bcc.n	8006a7c <__mcmp+0x30>
 8006a72:	2001      	movs	r0, #1
 8006a74:	bd30      	pop	{r4, r5, pc}
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	d3f4      	bcc.n	8006a64 <__mcmp+0x18>
 8006a7a:	e7fb      	b.n	8006a74 <__mcmp+0x28>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e7f8      	b.n	8006a74 <__mcmp+0x28>
	...

08006a84 <__mdiff>:
 8006a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4607      	mov	r7, r0
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4628      	mov	r0, r5
 8006a90:	4614      	mov	r4, r2
 8006a92:	f7ff ffdb 	bl	8006a4c <__mcmp>
 8006a96:	1e06      	subs	r6, r0, #0
 8006a98:	d111      	bne.n	8006abe <__mdiff+0x3a>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff fd5b 	bl	8006558 <_Balloc>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	b928      	cbnz	r0, 8006ab2 <__mdiff+0x2e>
 8006aa6:	f240 2137 	movw	r1, #567	; 0x237
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	; (8006b94 <__mdiff+0x110>)
 8006aac:	483a      	ldr	r0, [pc, #232]	; (8006b98 <__mdiff+0x114>)
 8006aae:	f000 fbcf 	bl	8007250 <__assert_func>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ab8:	4610      	mov	r0, r2
 8006aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	bfa4      	itt	ge
 8006ac0:	4623      	movge	r3, r4
 8006ac2:	462c      	movge	r4, r5
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	6861      	ldr	r1, [r4, #4]
 8006ac8:	bfa6      	itte	ge
 8006aca:	461d      	movge	r5, r3
 8006acc:	2600      	movge	r6, #0
 8006ace:	2601      	movlt	r6, #1
 8006ad0:	f7ff fd42 	bl	8006558 <_Balloc>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	b918      	cbnz	r0, 8006ae0 <__mdiff+0x5c>
 8006ad8:	f240 2145 	movw	r1, #581	; 0x245
 8006adc:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <__mdiff+0x110>)
 8006ade:	e7e5      	b.n	8006aac <__mdiff+0x28>
 8006ae0:	f102 0814 	add.w	r8, r2, #20
 8006ae4:	46c2      	mov	sl, r8
 8006ae6:	f04f 0c00 	mov.w	ip, #0
 8006aea:	6927      	ldr	r7, [r4, #16]
 8006aec:	60c6      	str	r6, [r0, #12]
 8006aee:	692e      	ldr	r6, [r5, #16]
 8006af0:	f104 0014 	add.w	r0, r4, #20
 8006af4:	f105 0914 	add.w	r9, r5, #20
 8006af8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006afc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b00:	3410      	adds	r4, #16
 8006b02:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006b06:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b0a:	fa1f f18b 	uxth.w	r1, fp
 8006b0e:	4461      	add	r1, ip
 8006b10:	fa1f fc83 	uxth.w	ip, r3
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	eba1 010c 	sub.w	r1, r1, ip
 8006b1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b22:	b289      	uxth	r1, r1
 8006b24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006b28:	454e      	cmp	r6, r9
 8006b2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b2e:	f84a 1b04 	str.w	r1, [sl], #4
 8006b32:	d8e6      	bhi.n	8006b02 <__mdiff+0x7e>
 8006b34:	1b73      	subs	r3, r6, r5
 8006b36:	3b15      	subs	r3, #21
 8006b38:	f023 0303 	bic.w	r3, r3, #3
 8006b3c:	3515      	adds	r5, #21
 8006b3e:	3304      	adds	r3, #4
 8006b40:	42ae      	cmp	r6, r5
 8006b42:	bf38      	it	cc
 8006b44:	2304      	movcc	r3, #4
 8006b46:	4418      	add	r0, r3
 8006b48:	4443      	add	r3, r8
 8006b4a:	461e      	mov	r6, r3
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	4575      	cmp	r5, lr
 8006b50:	d30e      	bcc.n	8006b70 <__mdiff+0xec>
 8006b52:	f10e 0103 	add.w	r1, lr, #3
 8006b56:	1a09      	subs	r1, r1, r0
 8006b58:	f021 0103 	bic.w	r1, r1, #3
 8006b5c:	3803      	subs	r0, #3
 8006b5e:	4586      	cmp	lr, r0
 8006b60:	bf38      	it	cc
 8006b62:	2100      	movcc	r1, #0
 8006b64:	440b      	add	r3, r1
 8006b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b6a:	b189      	cbz	r1, 8006b90 <__mdiff+0x10c>
 8006b6c:	6117      	str	r7, [r2, #16]
 8006b6e:	e7a3      	b.n	8006ab8 <__mdiff+0x34>
 8006b70:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b74:	fa1f f188 	uxth.w	r1, r8
 8006b78:	4461      	add	r1, ip
 8006b7a:	140c      	asrs	r4, r1, #16
 8006b7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b80:	b289      	uxth	r1, r1
 8006b82:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b86:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006b8a:	f846 1b04 	str.w	r1, [r6], #4
 8006b8e:	e7de      	b.n	8006b4e <__mdiff+0xca>
 8006b90:	3f01      	subs	r7, #1
 8006b92:	e7e8      	b.n	8006b66 <__mdiff+0xe2>
 8006b94:	080078f2 	.word	0x080078f2
 8006b98:	08007903 	.word	0x08007903

08006b9c <__d2b>:
 8006b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	4617      	mov	r7, r2
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	9e08      	ldr	r6, [sp, #32]
 8006ba6:	f7ff fcd7 	bl	8006558 <_Balloc>
 8006baa:	4605      	mov	r5, r0
 8006bac:	b930      	cbnz	r0, 8006bbc <__d2b+0x20>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f240 310f 	movw	r1, #783	; 0x30f
 8006bb4:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <__d2b+0xa4>)
 8006bb6:	4823      	ldr	r0, [pc, #140]	; (8006c44 <__d2b+0xa8>)
 8006bb8:	f000 fb4a 	bl	8007250 <__assert_func>
 8006bbc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006bc0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006bc4:	bb24      	cbnz	r4, 8006c10 <__d2b+0x74>
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	d026      	beq.n	8006c1a <__d2b+0x7e>
 8006bcc:	4668      	mov	r0, sp
 8006bce:	9700      	str	r7, [sp, #0]
 8006bd0:	f7ff fd8a 	bl	80066e8 <__lo0bits>
 8006bd4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bd8:	b1e8      	cbz	r0, 8006c16 <__d2b+0x7a>
 8006bda:	f1c0 0320 	rsb	r3, r0, #32
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	430b      	orrs	r3, r1
 8006be4:	40c2      	lsrs	r2, r0
 8006be6:	616b      	str	r3, [r5, #20]
 8006be8:	9201      	str	r2, [sp, #4]
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf14      	ite	ne
 8006bf0:	2102      	movne	r1, #2
 8006bf2:	2101      	moveq	r1, #1
 8006bf4:	61ab      	str	r3, [r5, #24]
 8006bf6:	6129      	str	r1, [r5, #16]
 8006bf8:	b1bc      	cbz	r4, 8006c2a <__d2b+0x8e>
 8006bfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006bfe:	4404      	add	r4, r0
 8006c00:	6034      	str	r4, [r6, #0]
 8006c02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c08:	6018      	str	r0, [r3, #0]
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c14:	e7d7      	b.n	8006bc6 <__d2b+0x2a>
 8006c16:	6169      	str	r1, [r5, #20]
 8006c18:	e7e7      	b.n	8006bea <__d2b+0x4e>
 8006c1a:	a801      	add	r0, sp, #4
 8006c1c:	f7ff fd64 	bl	80066e8 <__lo0bits>
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	2101      	movs	r1, #1
 8006c24:	616b      	str	r3, [r5, #20]
 8006c26:	3020      	adds	r0, #32
 8006c28:	e7e5      	b.n	8006bf6 <__d2b+0x5a>
 8006c2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c2e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006c32:	6030      	str	r0, [r6, #0]
 8006c34:	6918      	ldr	r0, [r3, #16]
 8006c36:	f7ff fd37 	bl	80066a8 <__hi0bits>
 8006c3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c3e:	e7e2      	b.n	8006c06 <__d2b+0x6a>
 8006c40:	080078f2 	.word	0x080078f2
 8006c44:	08007903 	.word	0x08007903

08006c48 <__ssputs_r>:
 8006c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	461f      	mov	r7, r3
 8006c4e:	688e      	ldr	r6, [r1, #8]
 8006c50:	4682      	mov	sl, r0
 8006c52:	42be      	cmp	r6, r7
 8006c54:	460c      	mov	r4, r1
 8006c56:	4690      	mov	r8, r2
 8006c58:	680b      	ldr	r3, [r1, #0]
 8006c5a:	d82c      	bhi.n	8006cb6 <__ssputs_r+0x6e>
 8006c5c:	898a      	ldrh	r2, [r1, #12]
 8006c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c62:	d026      	beq.n	8006cb2 <__ssputs_r+0x6a>
 8006c64:	6965      	ldr	r5, [r4, #20]
 8006c66:	6909      	ldr	r1, [r1, #16]
 8006c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c6c:	eba3 0901 	sub.w	r9, r3, r1
 8006c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c74:	1c7b      	adds	r3, r7, #1
 8006c76:	444b      	add	r3, r9
 8006c78:	106d      	asrs	r5, r5, #1
 8006c7a:	429d      	cmp	r5, r3
 8006c7c:	bf38      	it	cc
 8006c7e:	461d      	movcc	r5, r3
 8006c80:	0553      	lsls	r3, r2, #21
 8006c82:	d527      	bpl.n	8006cd4 <__ssputs_r+0x8c>
 8006c84:	4629      	mov	r1, r5
 8006c86:	f7ff fbdb 	bl	8006440 <_malloc_r>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	b360      	cbz	r0, 8006ce8 <__ssputs_r+0xa0>
 8006c8e:	464a      	mov	r2, r9
 8006c90:	6921      	ldr	r1, [r4, #16]
 8006c92:	f000 facf 	bl	8007234 <memcpy>
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	6126      	str	r6, [r4, #16]
 8006ca4:	444e      	add	r6, r9
 8006ca6:	6026      	str	r6, [r4, #0]
 8006ca8:	463e      	mov	r6, r7
 8006caa:	6165      	str	r5, [r4, #20]
 8006cac:	eba5 0509 	sub.w	r5, r5, r9
 8006cb0:	60a5      	str	r5, [r4, #8]
 8006cb2:	42be      	cmp	r6, r7
 8006cb4:	d900      	bls.n	8006cb8 <__ssputs_r+0x70>
 8006cb6:	463e      	mov	r6, r7
 8006cb8:	4632      	mov	r2, r6
 8006cba:	4641      	mov	r1, r8
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	f000 fa8f 	bl	80071e0 <memmove>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	1b9b      	subs	r3, r3, r6
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4433      	add	r3, r6
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	f000 faff 	bl	80072d8 <_realloc_r>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1e0      	bne.n	8006ca2 <__ssputs_r+0x5a>
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	6921      	ldr	r1, [r4, #16]
 8006ce4:	f7ff fb3c 	bl	8006360 <_free_r>
 8006ce8:	230c      	movs	r3, #12
 8006cea:	f8ca 3000 	str.w	r3, [sl]
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf8:	81a3      	strh	r3, [r4, #12]
 8006cfa:	e7e9      	b.n	8006cd0 <__ssputs_r+0x88>

08006cfc <_svfiprintf_r>:
 8006cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d00:	4698      	mov	r8, r3
 8006d02:	898b      	ldrh	r3, [r1, #12]
 8006d04:	4607      	mov	r7, r0
 8006d06:	061b      	lsls	r3, r3, #24
 8006d08:	460d      	mov	r5, r1
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	b09d      	sub	sp, #116	; 0x74
 8006d0e:	d50e      	bpl.n	8006d2e <_svfiprintf_r+0x32>
 8006d10:	690b      	ldr	r3, [r1, #16]
 8006d12:	b963      	cbnz	r3, 8006d2e <_svfiprintf_r+0x32>
 8006d14:	2140      	movs	r1, #64	; 0x40
 8006d16:	f7ff fb93 	bl	8006440 <_malloc_r>
 8006d1a:	6028      	str	r0, [r5, #0]
 8006d1c:	6128      	str	r0, [r5, #16]
 8006d1e:	b920      	cbnz	r0, 8006d2a <_svfiprintf_r+0x2e>
 8006d20:	230c      	movs	r3, #12
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	e0d0      	b.n	8006ecc <_svfiprintf_r+0x1d0>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	616b      	str	r3, [r5, #20]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9309      	str	r3, [sp, #36]	; 0x24
 8006d32:	2320      	movs	r3, #32
 8006d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d38:	2330      	movs	r3, #48	; 0x30
 8006d3a:	f04f 0901 	mov.w	r9, #1
 8006d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d42:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006ee4 <_svfiprintf_r+0x1e8>
 8006d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	469a      	mov	sl, r3
 8006d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d52:	b10a      	cbz	r2, 8006d58 <_svfiprintf_r+0x5c>
 8006d54:	2a25      	cmp	r2, #37	; 0x25
 8006d56:	d1f9      	bne.n	8006d4c <_svfiprintf_r+0x50>
 8006d58:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5c:	d00b      	beq.n	8006d76 <_svfiprintf_r+0x7a>
 8006d5e:	465b      	mov	r3, fp
 8006d60:	4622      	mov	r2, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff ff6f 	bl	8006c48 <__ssputs_r>
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f000 80a9 	beq.w	8006ec2 <_svfiprintf_r+0x1c6>
 8006d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d72:	445a      	add	r2, fp
 8006d74:	9209      	str	r2, [sp, #36]	; 0x24
 8006d76:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80a1 	beq.w	8006ec2 <_svfiprintf_r+0x1c6>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8a:	f10a 0a01 	add.w	sl, sl, #1
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	9307      	str	r3, [sp, #28]
 8006d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d96:	931a      	str	r3, [sp, #104]	; 0x68
 8006d98:	4654      	mov	r4, sl
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	4850      	ldr	r0, [pc, #320]	; (8006ee4 <_svfiprintf_r+0x1e8>)
 8006da2:	f7fe fc62 	bl	800566a <memchr>
 8006da6:	9a04      	ldr	r2, [sp, #16]
 8006da8:	b9d8      	cbnz	r0, 8006de2 <_svfiprintf_r+0xe6>
 8006daa:	06d0      	lsls	r0, r2, #27
 8006dac:	bf44      	itt	mi
 8006dae:	2320      	movmi	r3, #32
 8006db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db4:	0711      	lsls	r1, r2, #28
 8006db6:	bf44      	itt	mi
 8006db8:	232b      	movmi	r3, #43	; 0x2b
 8006dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc4:	d015      	beq.n	8006df2 <_svfiprintf_r+0xf6>
 8006dc6:	4654      	mov	r4, sl
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f04f 0c0a 	mov.w	ip, #10
 8006dce:	9a07      	ldr	r2, [sp, #28]
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd6:	3b30      	subs	r3, #48	; 0x30
 8006dd8:	2b09      	cmp	r3, #9
 8006dda:	d94d      	bls.n	8006e78 <_svfiprintf_r+0x17c>
 8006ddc:	b1b0      	cbz	r0, 8006e0c <_svfiprintf_r+0x110>
 8006dde:	9207      	str	r2, [sp, #28]
 8006de0:	e014      	b.n	8006e0c <_svfiprintf_r+0x110>
 8006de2:	eba0 0308 	sub.w	r3, r0, r8
 8006de6:	fa09 f303 	lsl.w	r3, r9, r3
 8006dea:	4313      	orrs	r3, r2
 8006dec:	46a2      	mov	sl, r4
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	e7d2      	b.n	8006d98 <_svfiprintf_r+0x9c>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	1d19      	adds	r1, r3, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	9103      	str	r1, [sp, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfbb      	ittet	lt
 8006dfe:	425b      	neglt	r3, r3
 8006e00:	f042 0202 	orrlt.w	r2, r2, #2
 8006e04:	9307      	strge	r3, [sp, #28]
 8006e06:	9307      	strlt	r3, [sp, #28]
 8006e08:	bfb8      	it	lt
 8006e0a:	9204      	strlt	r2, [sp, #16]
 8006e0c:	7823      	ldrb	r3, [r4, #0]
 8006e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e10:	d10c      	bne.n	8006e2c <_svfiprintf_r+0x130>
 8006e12:	7863      	ldrb	r3, [r4, #1]
 8006e14:	2b2a      	cmp	r3, #42	; 0x2a
 8006e16:	d134      	bne.n	8006e82 <_svfiprintf_r+0x186>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	3402      	adds	r4, #2
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	9203      	str	r2, [sp, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bfb8      	it	lt
 8006e26:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e2a:	9305      	str	r3, [sp, #20]
 8006e2c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006ee8 <_svfiprintf_r+0x1ec>
 8006e30:	2203      	movs	r2, #3
 8006e32:	4650      	mov	r0, sl
 8006e34:	7821      	ldrb	r1, [r4, #0]
 8006e36:	f7fe fc18 	bl	800566a <memchr>
 8006e3a:	b138      	cbz	r0, 8006e4c <_svfiprintf_r+0x150>
 8006e3c:	2240      	movs	r2, #64	; 0x40
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	eba0 000a 	sub.w	r0, r0, sl
 8006e44:	4082      	lsls	r2, r0
 8006e46:	4313      	orrs	r3, r2
 8006e48:	3401      	adds	r4, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e50:	2206      	movs	r2, #6
 8006e52:	4826      	ldr	r0, [pc, #152]	; (8006eec <_svfiprintf_r+0x1f0>)
 8006e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e58:	f7fe fc07 	bl	800566a <memchr>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d038      	beq.n	8006ed2 <_svfiprintf_r+0x1d6>
 8006e60:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <_svfiprintf_r+0x1f4>)
 8006e62:	bb1b      	cbnz	r3, 8006eac <_svfiprintf_r+0x1b0>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	3307      	adds	r3, #7
 8006e68:	f023 0307 	bic.w	r3, r3, #7
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e72:	4433      	add	r3, r6
 8006e74:	9309      	str	r3, [sp, #36]	; 0x24
 8006e76:	e768      	b.n	8006d4a <_svfiprintf_r+0x4e>
 8006e78:	460c      	mov	r4, r1
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e80:	e7a6      	b.n	8006dd0 <_svfiprintf_r+0xd4>
 8006e82:	2300      	movs	r3, #0
 8006e84:	f04f 0c0a 	mov.w	ip, #10
 8006e88:	4619      	mov	r1, r3
 8006e8a:	3401      	adds	r4, #1
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e94:	3a30      	subs	r2, #48	; 0x30
 8006e96:	2a09      	cmp	r2, #9
 8006e98:	d903      	bls.n	8006ea2 <_svfiprintf_r+0x1a6>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0c6      	beq.n	8006e2c <_svfiprintf_r+0x130>
 8006e9e:	9105      	str	r1, [sp, #20]
 8006ea0:	e7c4      	b.n	8006e2c <_svfiprintf_r+0x130>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eaa:	e7f0      	b.n	8006e8e <_svfiprintf_r+0x192>
 8006eac:	ab03      	add	r3, sp, #12
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <_svfiprintf_r+0x1f8>)
 8006eb6:	a904      	add	r1, sp, #16
 8006eb8:	f7fd fe68 	bl	8004b8c <_printf_float>
 8006ebc:	1c42      	adds	r2, r0, #1
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	d1d6      	bne.n	8006e70 <_svfiprintf_r+0x174>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	065b      	lsls	r3, r3, #25
 8006ec6:	f53f af2d 	bmi.w	8006d24 <_svfiprintf_r+0x28>
 8006eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ecc:	b01d      	add	sp, #116	; 0x74
 8006ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed2:	ab03      	add	r3, sp, #12
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	462a      	mov	r2, r5
 8006ed8:	4638      	mov	r0, r7
 8006eda:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <_svfiprintf_r+0x1f8>)
 8006edc:	a904      	add	r1, sp, #16
 8006ede:	f7fe f8f5 	bl	80050cc <_printf_i>
 8006ee2:	e7eb      	b.n	8006ebc <_svfiprintf_r+0x1c0>
 8006ee4:	08007a5c 	.word	0x08007a5c
 8006ee8:	08007a62 	.word	0x08007a62
 8006eec:	08007a66 	.word	0x08007a66
 8006ef0:	08004b8d 	.word	0x08004b8d
 8006ef4:	08006c49 	.word	0x08006c49

08006ef8 <__sflush_r>:
 8006ef8:	898a      	ldrh	r2, [r1, #12]
 8006efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efc:	4605      	mov	r5, r0
 8006efe:	0710      	lsls	r0, r2, #28
 8006f00:	460c      	mov	r4, r1
 8006f02:	d457      	bmi.n	8006fb4 <__sflush_r+0xbc>
 8006f04:	684b      	ldr	r3, [r1, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc04      	bgt.n	8006f14 <__sflush_r+0x1c>
 8006f0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc01      	bgt.n	8006f14 <__sflush_r+0x1c>
 8006f10:	2000      	movs	r0, #0
 8006f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f16:	2e00      	cmp	r6, #0
 8006f18:	d0fa      	beq.n	8006f10 <__sflush_r+0x18>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f20:	682f      	ldr	r7, [r5, #0]
 8006f22:	6a21      	ldr	r1, [r4, #32]
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	d032      	beq.n	8006f8e <__sflush_r+0x96>
 8006f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	075a      	lsls	r2, r3, #29
 8006f2e:	d505      	bpl.n	8006f3c <__sflush_r+0x44>
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	1ac0      	subs	r0, r0, r3
 8006f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f36:	b10b      	cbz	r3, 8006f3c <__sflush_r+0x44>
 8006f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f3a:	1ac0      	subs	r0, r0, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4602      	mov	r2, r0
 8006f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f42:	4628      	mov	r0, r5
 8006f44:	6a21      	ldr	r1, [r4, #32]
 8006f46:	47b0      	blx	r6
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	d106      	bne.n	8006f5c <__sflush_r+0x64>
 8006f4e:	6829      	ldr	r1, [r5, #0]
 8006f50:	291d      	cmp	r1, #29
 8006f52:	d82b      	bhi.n	8006fac <__sflush_r+0xb4>
 8006f54:	4a28      	ldr	r2, [pc, #160]	; (8006ff8 <__sflush_r+0x100>)
 8006f56:	410a      	asrs	r2, r1
 8006f58:	07d6      	lsls	r6, r2, #31
 8006f5a:	d427      	bmi.n	8006fac <__sflush_r+0xb4>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6062      	str	r2, [r4, #4]
 8006f60:	6922      	ldr	r2, [r4, #16]
 8006f62:	04d9      	lsls	r1, r3, #19
 8006f64:	6022      	str	r2, [r4, #0]
 8006f66:	d504      	bpl.n	8006f72 <__sflush_r+0x7a>
 8006f68:	1c42      	adds	r2, r0, #1
 8006f6a:	d101      	bne.n	8006f70 <__sflush_r+0x78>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b903      	cbnz	r3, 8006f72 <__sflush_r+0x7a>
 8006f70:	6560      	str	r0, [r4, #84]	; 0x54
 8006f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f74:	602f      	str	r7, [r5, #0]
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d0ca      	beq.n	8006f10 <__sflush_r+0x18>
 8006f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	d002      	beq.n	8006f88 <__sflush_r+0x90>
 8006f82:	4628      	mov	r0, r5
 8006f84:	f7ff f9ec 	bl	8006360 <_free_r>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8006f8c:	e7c1      	b.n	8006f12 <__sflush_r+0x1a>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b0      	blx	r6
 8006f94:	1c41      	adds	r1, r0, #1
 8006f96:	d1c8      	bne.n	8006f2a <__sflush_r+0x32>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0c5      	beq.n	8006f2a <__sflush_r+0x32>
 8006f9e:	2b1d      	cmp	r3, #29
 8006fa0:	d001      	beq.n	8006fa6 <__sflush_r+0xae>
 8006fa2:	2b16      	cmp	r3, #22
 8006fa4:	d101      	bne.n	8006faa <__sflush_r+0xb2>
 8006fa6:	602f      	str	r7, [r5, #0]
 8006fa8:	e7b2      	b.n	8006f10 <__sflush_r+0x18>
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	e7ae      	b.n	8006f12 <__sflush_r+0x1a>
 8006fb4:	690f      	ldr	r7, [r1, #16]
 8006fb6:	2f00      	cmp	r7, #0
 8006fb8:	d0aa      	beq.n	8006f10 <__sflush_r+0x18>
 8006fba:	0793      	lsls	r3, r2, #30
 8006fbc:	bf18      	it	ne
 8006fbe:	2300      	movne	r3, #0
 8006fc0:	680e      	ldr	r6, [r1, #0]
 8006fc2:	bf08      	it	eq
 8006fc4:	694b      	ldreq	r3, [r1, #20]
 8006fc6:	1bf6      	subs	r6, r6, r7
 8006fc8:	600f      	str	r7, [r1, #0]
 8006fca:	608b      	str	r3, [r1, #8]
 8006fcc:	2e00      	cmp	r6, #0
 8006fce:	dd9f      	ble.n	8006f10 <__sflush_r+0x18>
 8006fd0:	4633      	mov	r3, r6
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	6a21      	ldr	r1, [r4, #32]
 8006fd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006fdc:	47e0      	blx	ip
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	dc06      	bgt.n	8006ff0 <__sflush_r+0xf8>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	e790      	b.n	8006f12 <__sflush_r+0x1a>
 8006ff0:	4407      	add	r7, r0
 8006ff2:	1a36      	subs	r6, r6, r0
 8006ff4:	e7ea      	b.n	8006fcc <__sflush_r+0xd4>
 8006ff6:	bf00      	nop
 8006ff8:	dfbffffe 	.word	0xdfbffffe

08006ffc <_fflush_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	690b      	ldr	r3, [r1, #16]
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b913      	cbnz	r3, 800700c <_fflush_r+0x10>
 8007006:	2500      	movs	r5, #0
 8007008:	4628      	mov	r0, r5
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	b118      	cbz	r0, 8007016 <_fflush_r+0x1a>
 800700e:	6a03      	ldr	r3, [r0, #32]
 8007010:	b90b      	cbnz	r3, 8007016 <_fflush_r+0x1a>
 8007012:	f7fe fa09 	bl	8005428 <__sinit>
 8007016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f3      	beq.n	8007006 <_fflush_r+0xa>
 800701e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007020:	07d0      	lsls	r0, r2, #31
 8007022:	d404      	bmi.n	800702e <_fflush_r+0x32>
 8007024:	0599      	lsls	r1, r3, #22
 8007026:	d402      	bmi.n	800702e <_fflush_r+0x32>
 8007028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800702a:	f7fe fb1c 	bl	8005666 <__retarget_lock_acquire_recursive>
 800702e:	4628      	mov	r0, r5
 8007030:	4621      	mov	r1, r4
 8007032:	f7ff ff61 	bl	8006ef8 <__sflush_r>
 8007036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007038:	4605      	mov	r5, r0
 800703a:	07da      	lsls	r2, r3, #31
 800703c:	d4e4      	bmi.n	8007008 <_fflush_r+0xc>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	059b      	lsls	r3, r3, #22
 8007042:	d4e1      	bmi.n	8007008 <_fflush_r+0xc>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f7fe fb0f 	bl	8005668 <__retarget_lock_release_recursive>
 800704a:	e7dd      	b.n	8007008 <_fflush_r+0xc>

0800704c <_putc_r>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	460d      	mov	r5, r1
 8007050:	4614      	mov	r4, r2
 8007052:	4606      	mov	r6, r0
 8007054:	b118      	cbz	r0, 800705e <_putc_r+0x12>
 8007056:	6a03      	ldr	r3, [r0, #32]
 8007058:	b90b      	cbnz	r3, 800705e <_putc_r+0x12>
 800705a:	f7fe f9e5 	bl	8005428 <__sinit>
 800705e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007060:	07d8      	lsls	r0, r3, #31
 8007062:	d405      	bmi.n	8007070 <_putc_r+0x24>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	0599      	lsls	r1, r3, #22
 8007068:	d402      	bmi.n	8007070 <_putc_r+0x24>
 800706a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800706c:	f7fe fafb 	bl	8005666 <__retarget_lock_acquire_recursive>
 8007070:	68a3      	ldr	r3, [r4, #8]
 8007072:	3b01      	subs	r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	60a3      	str	r3, [r4, #8]
 8007078:	da05      	bge.n	8007086 <_putc_r+0x3a>
 800707a:	69a2      	ldr	r2, [r4, #24]
 800707c:	4293      	cmp	r3, r2
 800707e:	db12      	blt.n	80070a6 <_putc_r+0x5a>
 8007080:	b2eb      	uxtb	r3, r5
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d00f      	beq.n	80070a6 <_putc_r+0x5a>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	701d      	strb	r5, [r3, #0]
 800708e:	b2ed      	uxtb	r5, r5
 8007090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007092:	07da      	lsls	r2, r3, #31
 8007094:	d405      	bmi.n	80070a2 <_putc_r+0x56>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	059b      	lsls	r3, r3, #22
 800709a:	d402      	bmi.n	80070a2 <_putc_r+0x56>
 800709c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800709e:	f7fe fae3 	bl	8005668 <__retarget_lock_release_recursive>
 80070a2:	4628      	mov	r0, r5
 80070a4:	bd70      	pop	{r4, r5, r6, pc}
 80070a6:	4629      	mov	r1, r5
 80070a8:	4622      	mov	r2, r4
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 f802 	bl	80070b4 <__swbuf_r>
 80070b0:	4605      	mov	r5, r0
 80070b2:	e7ed      	b.n	8007090 <_putc_r+0x44>

080070b4 <__swbuf_r>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	460e      	mov	r6, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	4605      	mov	r5, r0
 80070bc:	b118      	cbz	r0, 80070c6 <__swbuf_r+0x12>
 80070be:	6a03      	ldr	r3, [r0, #32]
 80070c0:	b90b      	cbnz	r3, 80070c6 <__swbuf_r+0x12>
 80070c2:	f7fe f9b1 	bl	8005428 <__sinit>
 80070c6:	69a3      	ldr	r3, [r4, #24]
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	071a      	lsls	r2, r3, #28
 80070ce:	d525      	bpl.n	800711c <__swbuf_r+0x68>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	b31b      	cbz	r3, 800711c <__swbuf_r+0x68>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	6922      	ldr	r2, [r4, #16]
 80070d8:	b2f6      	uxtb	r6, r6
 80070da:	1a98      	subs	r0, r3, r2
 80070dc:	6963      	ldr	r3, [r4, #20]
 80070de:	4637      	mov	r7, r6
 80070e0:	4283      	cmp	r3, r0
 80070e2:	dc04      	bgt.n	80070ee <__swbuf_r+0x3a>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f7ff ff88 	bl	8006ffc <_fflush_r>
 80070ec:	b9e0      	cbnz	r0, 8007128 <__swbuf_r+0x74>
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	6022      	str	r2, [r4, #0]
 80070fa:	701e      	strb	r6, [r3, #0]
 80070fc:	6962      	ldr	r2, [r4, #20]
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	429a      	cmp	r2, r3
 8007102:	d004      	beq.n	800710e <__swbuf_r+0x5a>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	07db      	lsls	r3, r3, #31
 8007108:	d506      	bpl.n	8007118 <__swbuf_r+0x64>
 800710a:	2e0a      	cmp	r6, #10
 800710c:	d104      	bne.n	8007118 <__swbuf_r+0x64>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f7ff ff73 	bl	8006ffc <_fflush_r>
 8007116:	b938      	cbnz	r0, 8007128 <__swbuf_r+0x74>
 8007118:	4638      	mov	r0, r7
 800711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800711c:	4621      	mov	r1, r4
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f806 	bl	8007130 <__swsetup_r>
 8007124:	2800      	cmp	r0, #0
 8007126:	d0d5      	beq.n	80070d4 <__swbuf_r+0x20>
 8007128:	f04f 37ff 	mov.w	r7, #4294967295
 800712c:	e7f4      	b.n	8007118 <__swbuf_r+0x64>
	...

08007130 <__swsetup_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4b2a      	ldr	r3, [pc, #168]	; (80071dc <__swsetup_r+0xac>)
 8007134:	4605      	mov	r5, r0
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	460c      	mov	r4, r1
 800713a:	b118      	cbz	r0, 8007144 <__swsetup_r+0x14>
 800713c:	6a03      	ldr	r3, [r0, #32]
 800713e:	b90b      	cbnz	r3, 8007144 <__swsetup_r+0x14>
 8007140:	f7fe f972 	bl	8005428 <__sinit>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800714a:	0718      	lsls	r0, r3, #28
 800714c:	d422      	bmi.n	8007194 <__swsetup_r+0x64>
 800714e:	06d9      	lsls	r1, r3, #27
 8007150:	d407      	bmi.n	8007162 <__swsetup_r+0x32>
 8007152:	2309      	movs	r3, #9
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	e034      	b.n	80071cc <__swsetup_r+0x9c>
 8007162:	0758      	lsls	r0, r3, #29
 8007164:	d512      	bpl.n	800718c <__swsetup_r+0x5c>
 8007166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007168:	b141      	cbz	r1, 800717c <__swsetup_r+0x4c>
 800716a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800716e:	4299      	cmp	r1, r3
 8007170:	d002      	beq.n	8007178 <__swsetup_r+0x48>
 8007172:	4628      	mov	r0, r5
 8007174:	f7ff f8f4 	bl	8006360 <_free_r>
 8007178:	2300      	movs	r3, #0
 800717a:	6363      	str	r3, [r4, #52]	; 0x34
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	2300      	movs	r3, #0
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f043 0308 	orr.w	r3, r3, #8
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	b94b      	cbnz	r3, 80071ac <__swsetup_r+0x7c>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800719e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a2:	d003      	beq.n	80071ac <__swsetup_r+0x7c>
 80071a4:	4621      	mov	r1, r4
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 f909 	bl	80073be <__smakebuf_r>
 80071ac:	89a0      	ldrh	r0, [r4, #12]
 80071ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071b2:	f010 0301 	ands.w	r3, r0, #1
 80071b6:	d00a      	beq.n	80071ce <__swsetup_r+0x9e>
 80071b8:	2300      	movs	r3, #0
 80071ba:	60a3      	str	r3, [r4, #8]
 80071bc:	6963      	ldr	r3, [r4, #20]
 80071be:	425b      	negs	r3, r3
 80071c0:	61a3      	str	r3, [r4, #24]
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	b943      	cbnz	r3, 80071d8 <__swsetup_r+0xa8>
 80071c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071ca:	d1c4      	bne.n	8007156 <__swsetup_r+0x26>
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	0781      	lsls	r1, r0, #30
 80071d0:	bf58      	it	pl
 80071d2:	6963      	ldrpl	r3, [r4, #20]
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	e7f4      	b.n	80071c2 <__swsetup_r+0x92>
 80071d8:	2000      	movs	r0, #0
 80071da:	e7f7      	b.n	80071cc <__swsetup_r+0x9c>
 80071dc:	20000070 	.word	0x20000070

080071e0 <memmove>:
 80071e0:	4288      	cmp	r0, r1
 80071e2:	b510      	push	{r4, lr}
 80071e4:	eb01 0402 	add.w	r4, r1, r2
 80071e8:	d902      	bls.n	80071f0 <memmove+0x10>
 80071ea:	4284      	cmp	r4, r0
 80071ec:	4623      	mov	r3, r4
 80071ee:	d807      	bhi.n	8007200 <memmove+0x20>
 80071f0:	1e43      	subs	r3, r0, #1
 80071f2:	42a1      	cmp	r1, r4
 80071f4:	d008      	beq.n	8007208 <memmove+0x28>
 80071f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071fe:	e7f8      	b.n	80071f2 <memmove+0x12>
 8007200:	4601      	mov	r1, r0
 8007202:	4402      	add	r2, r0
 8007204:	428a      	cmp	r2, r1
 8007206:	d100      	bne.n	800720a <memmove+0x2a>
 8007208:	bd10      	pop	{r4, pc}
 800720a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800720e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007212:	e7f7      	b.n	8007204 <memmove+0x24>

08007214 <_sbrk_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	2300      	movs	r3, #0
 8007218:	4d05      	ldr	r5, [pc, #20]	; (8007230 <_sbrk_r+0x1c>)
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7fa fe04 	bl	8001e2c <_sbrk>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_sbrk_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_sbrk_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000488 	.word	0x20000488

08007234 <memcpy>:
 8007234:	440a      	add	r2, r1
 8007236:	4291      	cmp	r1, r2
 8007238:	f100 33ff 	add.w	r3, r0, #4294967295
 800723c:	d100      	bne.n	8007240 <memcpy+0xc>
 800723e:	4770      	bx	lr
 8007240:	b510      	push	{r4, lr}
 8007242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007246:	4291      	cmp	r1, r2
 8007248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800724c:	d1f9      	bne.n	8007242 <memcpy+0xe>
 800724e:	bd10      	pop	{r4, pc}

08007250 <__assert_func>:
 8007250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007252:	4614      	mov	r4, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <__assert_func+0x2c>)
 8007258:	4605      	mov	r5, r0
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68d8      	ldr	r0, [r3, #12]
 800725e:	b14c      	cbz	r4, 8007274 <__assert_func+0x24>
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <__assert_func+0x30>)
 8007262:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007266:	9100      	str	r1, [sp, #0]
 8007268:	462b      	mov	r3, r5
 800726a:	4906      	ldr	r1, [pc, #24]	; (8007284 <__assert_func+0x34>)
 800726c:	f000 f870 	bl	8007350 <fiprintf>
 8007270:	f000 f904 	bl	800747c <abort>
 8007274:	4b04      	ldr	r3, [pc, #16]	; (8007288 <__assert_func+0x38>)
 8007276:	461c      	mov	r4, r3
 8007278:	e7f3      	b.n	8007262 <__assert_func+0x12>
 800727a:	bf00      	nop
 800727c:	20000070 	.word	0x20000070
 8007280:	08007a77 	.word	0x08007a77
 8007284:	08007a84 	.word	0x08007a84
 8007288:	08007ab2 	.word	0x08007ab2

0800728c <_calloc_r>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	fba1 5402 	umull	r5, r4, r1, r2
 8007292:	b934      	cbnz	r4, 80072a2 <_calloc_r+0x16>
 8007294:	4629      	mov	r1, r5
 8007296:	f7ff f8d3 	bl	8006440 <_malloc_r>
 800729a:	4606      	mov	r6, r0
 800729c:	b928      	cbnz	r0, 80072aa <_calloc_r+0x1e>
 800729e:	4630      	mov	r0, r6
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	220c      	movs	r2, #12
 80072a4:	2600      	movs	r6, #0
 80072a6:	6002      	str	r2, [r0, #0]
 80072a8:	e7f9      	b.n	800729e <_calloc_r+0x12>
 80072aa:	462a      	mov	r2, r5
 80072ac:	4621      	mov	r1, r4
 80072ae:	f7fe f95c 	bl	800556a <memset>
 80072b2:	e7f4      	b.n	800729e <_calloc_r+0x12>

080072b4 <__ascii_mbtowc>:
 80072b4:	b082      	sub	sp, #8
 80072b6:	b901      	cbnz	r1, 80072ba <__ascii_mbtowc+0x6>
 80072b8:	a901      	add	r1, sp, #4
 80072ba:	b142      	cbz	r2, 80072ce <__ascii_mbtowc+0x1a>
 80072bc:	b14b      	cbz	r3, 80072d2 <__ascii_mbtowc+0x1e>
 80072be:	7813      	ldrb	r3, [r2, #0]
 80072c0:	600b      	str	r3, [r1, #0]
 80072c2:	7812      	ldrb	r2, [r2, #0]
 80072c4:	1e10      	subs	r0, r2, #0
 80072c6:	bf18      	it	ne
 80072c8:	2001      	movne	r0, #1
 80072ca:	b002      	add	sp, #8
 80072cc:	4770      	bx	lr
 80072ce:	4610      	mov	r0, r2
 80072d0:	e7fb      	b.n	80072ca <__ascii_mbtowc+0x16>
 80072d2:	f06f 0001 	mvn.w	r0, #1
 80072d6:	e7f8      	b.n	80072ca <__ascii_mbtowc+0x16>

080072d8 <_realloc_r>:
 80072d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072dc:	4680      	mov	r8, r0
 80072de:	4614      	mov	r4, r2
 80072e0:	460e      	mov	r6, r1
 80072e2:	b921      	cbnz	r1, 80072ee <_realloc_r+0x16>
 80072e4:	4611      	mov	r1, r2
 80072e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ea:	f7ff b8a9 	b.w	8006440 <_malloc_r>
 80072ee:	b92a      	cbnz	r2, 80072fc <_realloc_r+0x24>
 80072f0:	f7ff f836 	bl	8006360 <_free_r>
 80072f4:	4625      	mov	r5, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	f000 f8c5 	bl	800748a <_malloc_usable_size_r>
 8007300:	4284      	cmp	r4, r0
 8007302:	4607      	mov	r7, r0
 8007304:	d802      	bhi.n	800730c <_realloc_r+0x34>
 8007306:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800730a:	d812      	bhi.n	8007332 <_realloc_r+0x5a>
 800730c:	4621      	mov	r1, r4
 800730e:	4640      	mov	r0, r8
 8007310:	f7ff f896 	bl	8006440 <_malloc_r>
 8007314:	4605      	mov	r5, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d0ed      	beq.n	80072f6 <_realloc_r+0x1e>
 800731a:	42bc      	cmp	r4, r7
 800731c:	4622      	mov	r2, r4
 800731e:	4631      	mov	r1, r6
 8007320:	bf28      	it	cs
 8007322:	463a      	movcs	r2, r7
 8007324:	f7ff ff86 	bl	8007234 <memcpy>
 8007328:	4631      	mov	r1, r6
 800732a:	4640      	mov	r0, r8
 800732c:	f7ff f818 	bl	8006360 <_free_r>
 8007330:	e7e1      	b.n	80072f6 <_realloc_r+0x1e>
 8007332:	4635      	mov	r5, r6
 8007334:	e7df      	b.n	80072f6 <_realloc_r+0x1e>

08007336 <__ascii_wctomb>:
 8007336:	4603      	mov	r3, r0
 8007338:	4608      	mov	r0, r1
 800733a:	b141      	cbz	r1, 800734e <__ascii_wctomb+0x18>
 800733c:	2aff      	cmp	r2, #255	; 0xff
 800733e:	d904      	bls.n	800734a <__ascii_wctomb+0x14>
 8007340:	228a      	movs	r2, #138	; 0x8a
 8007342:	f04f 30ff 	mov.w	r0, #4294967295
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	4770      	bx	lr
 800734a:	2001      	movs	r0, #1
 800734c:	700a      	strb	r2, [r1, #0]
 800734e:	4770      	bx	lr

08007350 <fiprintf>:
 8007350:	b40e      	push	{r1, r2, r3}
 8007352:	b503      	push	{r0, r1, lr}
 8007354:	4601      	mov	r1, r0
 8007356:	ab03      	add	r3, sp, #12
 8007358:	4805      	ldr	r0, [pc, #20]	; (8007370 <fiprintf+0x20>)
 800735a:	f853 2b04 	ldr.w	r2, [r3], #4
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	f000 f8c1 	bl	80074e8 <_vfiprintf_r>
 8007366:	b002      	add	sp, #8
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b003      	add	sp, #12
 800736e:	4770      	bx	lr
 8007370:	20000070 	.word	0x20000070

08007374 <__swhatbuf_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	460c      	mov	r4, r1
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	4615      	mov	r5, r2
 800737e:	2900      	cmp	r1, #0
 8007380:	461e      	mov	r6, r3
 8007382:	b096      	sub	sp, #88	; 0x58
 8007384:	da0c      	bge.n	80073a0 <__swhatbuf_r+0x2c>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	2100      	movs	r1, #0
 800738a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800738e:	bf0c      	ite	eq
 8007390:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007394:	2340      	movne	r3, #64	; 0x40
 8007396:	2000      	movs	r0, #0
 8007398:	6031      	str	r1, [r6, #0]
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	b016      	add	sp, #88	; 0x58
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	466a      	mov	r2, sp
 80073a2:	f000 f849 	bl	8007438 <_fstat_r>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	dbed      	blt.n	8007386 <__swhatbuf_r+0x12>
 80073aa:	9901      	ldr	r1, [sp, #4]
 80073ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80073b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80073b4:	4259      	negs	r1, r3
 80073b6:	4159      	adcs	r1, r3
 80073b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073bc:	e7eb      	b.n	8007396 <__swhatbuf_r+0x22>

080073be <__smakebuf_r>:
 80073be:	898b      	ldrh	r3, [r1, #12]
 80073c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073c2:	079d      	lsls	r5, r3, #30
 80073c4:	4606      	mov	r6, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	d507      	bpl.n	80073da <__smakebuf_r+0x1c>
 80073ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	6123      	str	r3, [r4, #16]
 80073d2:	2301      	movs	r3, #1
 80073d4:	6163      	str	r3, [r4, #20]
 80073d6:	b002      	add	sp, #8
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
 80073da:	466a      	mov	r2, sp
 80073dc:	ab01      	add	r3, sp, #4
 80073de:	f7ff ffc9 	bl	8007374 <__swhatbuf_r>
 80073e2:	9900      	ldr	r1, [sp, #0]
 80073e4:	4605      	mov	r5, r0
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff f82a 	bl	8006440 <_malloc_r>
 80073ec:	b948      	cbnz	r0, 8007402 <__smakebuf_r+0x44>
 80073ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f2:	059a      	lsls	r2, r3, #22
 80073f4:	d4ef      	bmi.n	80073d6 <__smakebuf_r+0x18>
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	f043 0302 	orr.w	r3, r3, #2
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	e7e3      	b.n	80073ca <__smakebuf_r+0xc>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	6020      	str	r0, [r4, #0]
 8007406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	9b00      	ldr	r3, [sp, #0]
 800740e:	6120      	str	r0, [r4, #16]
 8007410:	6163      	str	r3, [r4, #20]
 8007412:	9b01      	ldr	r3, [sp, #4]
 8007414:	b15b      	cbz	r3, 800742e <__smakebuf_r+0x70>
 8007416:	4630      	mov	r0, r6
 8007418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800741c:	f000 f81e 	bl	800745c <_isatty_r>
 8007420:	b128      	cbz	r0, 800742e <__smakebuf_r+0x70>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f023 0303 	bic.w	r3, r3, #3
 8007428:	f043 0301 	orr.w	r3, r3, #1
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	431d      	orrs	r5, r3
 8007432:	81a5      	strh	r5, [r4, #12]
 8007434:	e7cf      	b.n	80073d6 <__smakebuf_r+0x18>
	...

08007438 <_fstat_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	2300      	movs	r3, #0
 800743c:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_fstat_r+0x20>)
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	f7fa fccb 	bl	8001de0 <_fstat>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	d102      	bne.n	8007454 <_fstat_r+0x1c>
 800744e:	682b      	ldr	r3, [r5, #0]
 8007450:	b103      	cbz	r3, 8007454 <_fstat_r+0x1c>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd38      	pop	{r3, r4, r5, pc}
 8007456:	bf00      	nop
 8007458:	20000488 	.word	0x20000488

0800745c <_isatty_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	2300      	movs	r3, #0
 8007460:	4d05      	ldr	r5, [pc, #20]	; (8007478 <_isatty_r+0x1c>)
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fa fcc9 	bl	8001dfe <_isatty>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_isatty_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_isatty_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000488 	.word	0x20000488

0800747c <abort>:
 800747c:	2006      	movs	r0, #6
 800747e:	b508      	push	{r3, lr}
 8007480:	f000 f974 	bl	800776c <raise>
 8007484:	2001      	movs	r0, #1
 8007486:	f7fa fc5d 	bl	8001d44 <_exit>

0800748a <_malloc_usable_size_r>:
 800748a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800748e:	1f18      	subs	r0, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfbc      	itt	lt
 8007494:	580b      	ldrlt	r3, [r1, r0]
 8007496:	18c0      	addlt	r0, r0, r3
 8007498:	4770      	bx	lr

0800749a <__sfputc_r>:
 800749a:	6893      	ldr	r3, [r2, #8]
 800749c:	b410      	push	{r4}
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	6093      	str	r3, [r2, #8]
 80074a4:	da07      	bge.n	80074b6 <__sfputc_r+0x1c>
 80074a6:	6994      	ldr	r4, [r2, #24]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	db01      	blt.n	80074b0 <__sfputc_r+0x16>
 80074ac:	290a      	cmp	r1, #10
 80074ae:	d102      	bne.n	80074b6 <__sfputc_r+0x1c>
 80074b0:	bc10      	pop	{r4}
 80074b2:	f7ff bdff 	b.w	80070b4 <__swbuf_r>
 80074b6:	6813      	ldr	r3, [r2, #0]
 80074b8:	1c58      	adds	r0, r3, #1
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	7019      	strb	r1, [r3, #0]
 80074be:	4608      	mov	r0, r1
 80074c0:	bc10      	pop	{r4}
 80074c2:	4770      	bx	lr

080074c4 <__sfputs_r>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	4614      	mov	r4, r2
 80074cc:	18d5      	adds	r5, r2, r3
 80074ce:	42ac      	cmp	r4, r5
 80074d0:	d101      	bne.n	80074d6 <__sfputs_r+0x12>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e007      	b.n	80074e6 <__sfputs_r+0x22>
 80074d6:	463a      	mov	r2, r7
 80074d8:	4630      	mov	r0, r6
 80074da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074de:	f7ff ffdc 	bl	800749a <__sfputc_r>
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	d1f3      	bne.n	80074ce <__sfputs_r+0xa>
 80074e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074e8 <_vfiprintf_r>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	460d      	mov	r5, r1
 80074ee:	4614      	mov	r4, r2
 80074f0:	4698      	mov	r8, r3
 80074f2:	4606      	mov	r6, r0
 80074f4:	b09d      	sub	sp, #116	; 0x74
 80074f6:	b118      	cbz	r0, 8007500 <_vfiprintf_r+0x18>
 80074f8:	6a03      	ldr	r3, [r0, #32]
 80074fa:	b90b      	cbnz	r3, 8007500 <_vfiprintf_r+0x18>
 80074fc:	f7fd ff94 	bl	8005428 <__sinit>
 8007500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007502:	07d9      	lsls	r1, r3, #31
 8007504:	d405      	bmi.n	8007512 <_vfiprintf_r+0x2a>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	059a      	lsls	r2, r3, #22
 800750a:	d402      	bmi.n	8007512 <_vfiprintf_r+0x2a>
 800750c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800750e:	f7fe f8aa 	bl	8005666 <__retarget_lock_acquire_recursive>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	071b      	lsls	r3, r3, #28
 8007516:	d501      	bpl.n	800751c <_vfiprintf_r+0x34>
 8007518:	692b      	ldr	r3, [r5, #16]
 800751a:	b99b      	cbnz	r3, 8007544 <_vfiprintf_r+0x5c>
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff fe06 	bl	8007130 <__swsetup_r>
 8007524:	b170      	cbz	r0, 8007544 <_vfiprintf_r+0x5c>
 8007526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007528:	07dc      	lsls	r4, r3, #31
 800752a:	d504      	bpl.n	8007536 <_vfiprintf_r+0x4e>
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	b01d      	add	sp, #116	; 0x74
 8007532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	0598      	lsls	r0, r3, #22
 800753a:	d4f7      	bmi.n	800752c <_vfiprintf_r+0x44>
 800753c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800753e:	f7fe f893 	bl	8005668 <__retarget_lock_release_recursive>
 8007542:	e7f3      	b.n	800752c <_vfiprintf_r+0x44>
 8007544:	2300      	movs	r3, #0
 8007546:	9309      	str	r3, [sp, #36]	; 0x24
 8007548:	2320      	movs	r3, #32
 800754a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800754e:	2330      	movs	r3, #48	; 0x30
 8007550:	f04f 0901 	mov.w	r9, #1
 8007554:	f8cd 800c 	str.w	r8, [sp, #12]
 8007558:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007708 <_vfiprintf_r+0x220>
 800755c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007560:	4623      	mov	r3, r4
 8007562:	469a      	mov	sl, r3
 8007564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007568:	b10a      	cbz	r2, 800756e <_vfiprintf_r+0x86>
 800756a:	2a25      	cmp	r2, #37	; 0x25
 800756c:	d1f9      	bne.n	8007562 <_vfiprintf_r+0x7a>
 800756e:	ebba 0b04 	subs.w	fp, sl, r4
 8007572:	d00b      	beq.n	800758c <_vfiprintf_r+0xa4>
 8007574:	465b      	mov	r3, fp
 8007576:	4622      	mov	r2, r4
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ffa2 	bl	80074c4 <__sfputs_r>
 8007580:	3001      	adds	r0, #1
 8007582:	f000 80a9 	beq.w	80076d8 <_vfiprintf_r+0x1f0>
 8007586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007588:	445a      	add	r2, fp
 800758a:	9209      	str	r2, [sp, #36]	; 0x24
 800758c:	f89a 3000 	ldrb.w	r3, [sl]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80a1 	beq.w	80076d8 <_vfiprintf_r+0x1f0>
 8007596:	2300      	movs	r3, #0
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a0:	f10a 0a01 	add.w	sl, sl, #1
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	9307      	str	r3, [sp, #28]
 80075a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ac:	931a      	str	r3, [sp, #104]	; 0x68
 80075ae:	4654      	mov	r4, sl
 80075b0:	2205      	movs	r2, #5
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	4854      	ldr	r0, [pc, #336]	; (8007708 <_vfiprintf_r+0x220>)
 80075b8:	f7fe f857 	bl	800566a <memchr>
 80075bc:	9a04      	ldr	r2, [sp, #16]
 80075be:	b9d8      	cbnz	r0, 80075f8 <_vfiprintf_r+0x110>
 80075c0:	06d1      	lsls	r1, r2, #27
 80075c2:	bf44      	itt	mi
 80075c4:	2320      	movmi	r3, #32
 80075c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ca:	0713      	lsls	r3, r2, #28
 80075cc:	bf44      	itt	mi
 80075ce:	232b      	movmi	r3, #43	; 0x2b
 80075d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d4:	f89a 3000 	ldrb.w	r3, [sl]
 80075d8:	2b2a      	cmp	r3, #42	; 0x2a
 80075da:	d015      	beq.n	8007608 <_vfiprintf_r+0x120>
 80075dc:	4654      	mov	r4, sl
 80075de:	2000      	movs	r0, #0
 80075e0:	f04f 0c0a 	mov.w	ip, #10
 80075e4:	9a07      	ldr	r2, [sp, #28]
 80075e6:	4621      	mov	r1, r4
 80075e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ec:	3b30      	subs	r3, #48	; 0x30
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d94d      	bls.n	800768e <_vfiprintf_r+0x1a6>
 80075f2:	b1b0      	cbz	r0, 8007622 <_vfiprintf_r+0x13a>
 80075f4:	9207      	str	r2, [sp, #28]
 80075f6:	e014      	b.n	8007622 <_vfiprintf_r+0x13a>
 80075f8:	eba0 0308 	sub.w	r3, r0, r8
 80075fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007600:	4313      	orrs	r3, r2
 8007602:	46a2      	mov	sl, r4
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	e7d2      	b.n	80075ae <_vfiprintf_r+0xc6>
 8007608:	9b03      	ldr	r3, [sp, #12]
 800760a:	1d19      	adds	r1, r3, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	9103      	str	r1, [sp, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfbb      	ittet	lt
 8007614:	425b      	neglt	r3, r3
 8007616:	f042 0202 	orrlt.w	r2, r2, #2
 800761a:	9307      	strge	r3, [sp, #28]
 800761c:	9307      	strlt	r3, [sp, #28]
 800761e:	bfb8      	it	lt
 8007620:	9204      	strlt	r2, [sp, #16]
 8007622:	7823      	ldrb	r3, [r4, #0]
 8007624:	2b2e      	cmp	r3, #46	; 0x2e
 8007626:	d10c      	bne.n	8007642 <_vfiprintf_r+0x15a>
 8007628:	7863      	ldrb	r3, [r4, #1]
 800762a:	2b2a      	cmp	r3, #42	; 0x2a
 800762c:	d134      	bne.n	8007698 <_vfiprintf_r+0x1b0>
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	3402      	adds	r4, #2
 8007632:	1d1a      	adds	r2, r3, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	9203      	str	r2, [sp, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	bfb8      	it	lt
 800763c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800770c <_vfiprintf_r+0x224>
 8007646:	2203      	movs	r2, #3
 8007648:	4650      	mov	r0, sl
 800764a:	7821      	ldrb	r1, [r4, #0]
 800764c:	f7fe f80d 	bl	800566a <memchr>
 8007650:	b138      	cbz	r0, 8007662 <_vfiprintf_r+0x17a>
 8007652:	2240      	movs	r2, #64	; 0x40
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	eba0 000a 	sub.w	r0, r0, sl
 800765a:	4082      	lsls	r2, r0
 800765c:	4313      	orrs	r3, r2
 800765e:	3401      	adds	r4, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007666:	2206      	movs	r2, #6
 8007668:	4829      	ldr	r0, [pc, #164]	; (8007710 <_vfiprintf_r+0x228>)
 800766a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800766e:	f7fd fffc 	bl	800566a <memchr>
 8007672:	2800      	cmp	r0, #0
 8007674:	d03f      	beq.n	80076f6 <_vfiprintf_r+0x20e>
 8007676:	4b27      	ldr	r3, [pc, #156]	; (8007714 <_vfiprintf_r+0x22c>)
 8007678:	bb1b      	cbnz	r3, 80076c2 <_vfiprintf_r+0x1da>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	3307      	adds	r3, #7
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	3308      	adds	r3, #8
 8007684:	9303      	str	r3, [sp, #12]
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	443b      	add	r3, r7
 800768a:	9309      	str	r3, [sp, #36]	; 0x24
 800768c:	e768      	b.n	8007560 <_vfiprintf_r+0x78>
 800768e:	460c      	mov	r4, r1
 8007690:	2001      	movs	r0, #1
 8007692:	fb0c 3202 	mla	r2, ip, r2, r3
 8007696:	e7a6      	b.n	80075e6 <_vfiprintf_r+0xfe>
 8007698:	2300      	movs	r3, #0
 800769a:	f04f 0c0a 	mov.w	ip, #10
 800769e:	4619      	mov	r1, r3
 80076a0:	3401      	adds	r4, #1
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	4620      	mov	r0, r4
 80076a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076aa:	3a30      	subs	r2, #48	; 0x30
 80076ac:	2a09      	cmp	r2, #9
 80076ae:	d903      	bls.n	80076b8 <_vfiprintf_r+0x1d0>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0c6      	beq.n	8007642 <_vfiprintf_r+0x15a>
 80076b4:	9105      	str	r1, [sp, #20]
 80076b6:	e7c4      	b.n	8007642 <_vfiprintf_r+0x15a>
 80076b8:	4604      	mov	r4, r0
 80076ba:	2301      	movs	r3, #1
 80076bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c0:	e7f0      	b.n	80076a4 <_vfiprintf_r+0x1bc>
 80076c2:	ab03      	add	r3, sp, #12
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	462a      	mov	r2, r5
 80076c8:	4630      	mov	r0, r6
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <_vfiprintf_r+0x230>)
 80076cc:	a904      	add	r1, sp, #16
 80076ce:	f7fd fa5d 	bl	8004b8c <_printf_float>
 80076d2:	4607      	mov	r7, r0
 80076d4:	1c78      	adds	r0, r7, #1
 80076d6:	d1d6      	bne.n	8007686 <_vfiprintf_r+0x19e>
 80076d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076da:	07d9      	lsls	r1, r3, #31
 80076dc:	d405      	bmi.n	80076ea <_vfiprintf_r+0x202>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	059a      	lsls	r2, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_vfiprintf_r+0x202>
 80076e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e6:	f7fd ffbf 	bl	8005668 <__retarget_lock_release_recursive>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	065b      	lsls	r3, r3, #25
 80076ee:	f53f af1d 	bmi.w	800752c <_vfiprintf_r+0x44>
 80076f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f4:	e71c      	b.n	8007530 <_vfiprintf_r+0x48>
 80076f6:	ab03      	add	r3, sp, #12
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	462a      	mov	r2, r5
 80076fc:	4630      	mov	r0, r6
 80076fe:	4b06      	ldr	r3, [pc, #24]	; (8007718 <_vfiprintf_r+0x230>)
 8007700:	a904      	add	r1, sp, #16
 8007702:	f7fd fce3 	bl	80050cc <_printf_i>
 8007706:	e7e4      	b.n	80076d2 <_vfiprintf_r+0x1ea>
 8007708:	08007a5c 	.word	0x08007a5c
 800770c:	08007a62 	.word	0x08007a62
 8007710:	08007a66 	.word	0x08007a66
 8007714:	08004b8d 	.word	0x08004b8d
 8007718:	080074c5 	.word	0x080074c5

0800771c <_raise_r>:
 800771c:	291f      	cmp	r1, #31
 800771e:	b538      	push	{r3, r4, r5, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	d904      	bls.n	8007730 <_raise_r+0x14>
 8007726:	2316      	movs	r3, #22
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	f04f 30ff 	mov.w	r0, #4294967295
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007732:	b112      	cbz	r2, 800773a <_raise_r+0x1e>
 8007734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007738:	b94b      	cbnz	r3, 800774e <_raise_r+0x32>
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f830 	bl	80077a0 <_getpid_r>
 8007740:	462a      	mov	r2, r5
 8007742:	4601      	mov	r1, r0
 8007744:	4620      	mov	r0, r4
 8007746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774a:	f000 b817 	b.w	800777c <_kill_r>
 800774e:	2b01      	cmp	r3, #1
 8007750:	d00a      	beq.n	8007768 <_raise_r+0x4c>
 8007752:	1c59      	adds	r1, r3, #1
 8007754:	d103      	bne.n	800775e <_raise_r+0x42>
 8007756:	2316      	movs	r3, #22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	2001      	movs	r0, #1
 800775c:	e7e7      	b.n	800772e <_raise_r+0x12>
 800775e:	2400      	movs	r4, #0
 8007760:	4628      	mov	r0, r5
 8007762:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007766:	4798      	blx	r3
 8007768:	2000      	movs	r0, #0
 800776a:	e7e0      	b.n	800772e <_raise_r+0x12>

0800776c <raise>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <raise+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f7ff bfd3 	b.w	800771c <_raise_r>
 8007776:	bf00      	nop
 8007778:	20000070 	.word	0x20000070

0800777c <_kill_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	2300      	movs	r3, #0
 8007780:	4d06      	ldr	r5, [pc, #24]	; (800779c <_kill_r+0x20>)
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	4611      	mov	r1, r2
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	f7fa facb 	bl	8001d24 <_kill>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d102      	bne.n	8007798 <_kill_r+0x1c>
 8007792:	682b      	ldr	r3, [r5, #0]
 8007794:	b103      	cbz	r3, 8007798 <_kill_r+0x1c>
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	bd38      	pop	{r3, r4, r5, pc}
 800779a:	bf00      	nop
 800779c:	20000488 	.word	0x20000488

080077a0 <_getpid_r>:
 80077a0:	f7fa bab9 	b.w	8001d16 <_getpid>

080077a4 <_init>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr

080077b0 <_fini>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr
